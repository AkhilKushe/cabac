// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_decision (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_offset,
        mode_offset,
        state_ivlCurrRange_V_read,
        state_ivlOffset_V_read,
        state_bstate_currIdx_read,
        state_bstate_n_bits_held_read,
        state_bstate_held_aligned_word_read,
        bStream,
        bStream1,
        p_read,
        p_read1,
        ctxAddr_offset,
        ctxTables_address0,
        ctxTables_ce0,
        ctxTables_we0,
        ctxTables_d0,
        ctxTables_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   init_offset;
input  [0:0] mode_offset;
input  [31:0] state_ivlCurrRange_V_read;
input  [31:0] state_ivlOffset_V_read;
input  [31:0] state_bstate_currIdx_read;
input  [7:0] state_bstate_n_bits_held_read;
input  [7:0] state_bstate_held_aligned_word_read;
input  [7:0] bStream;
input  [7:0] bStream1;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [0:0] ctxAddr_offset;
output  [8:0] ctxTables_address0;
output   ctxTables_ce0;
output   ctxTables_we0;
output  [7:0] ctxTables_d0;
input  [7:0] ctxTables_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [0:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] ctxTables_address0;
reg ctxTables_ce0;
reg ctxTables_we0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[0:0] ap_return_4;
reg[31:0] ap_return_5;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] lpsTable_address0;
reg    lpsTable_ce0;
wire   [7:0] lpsTable_q0;
wire   [6:0] transMPS_address0;
reg    transMPS_ce0;
wire   [6:0] transMPS_q0;
wire   [6:0] transLPS_address0;
reg    transLPS_ce0;
wire   [6:0] transLPS_q0;
wire   [0:0] mode_offset_read_read_fu_162_p2;
reg   [8:0] ctxTables_addr_reg_810;
reg   [7:0] ctxState_reg_815;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln34_1_fu_436_p1;
reg   [31:0] zext_ln34_1_reg_826;
wire    ap_CS_fsm_state3;
wire   [31:0] sub_ln229_1_fu_440_p2;
reg   [31:0] sub_ln229_1_reg_831;
wire    ap_CS_fsm_state4;
wire   [0:0] xor_ln1076_1_fu_470_p2;
reg   [0:0] xor_ln1076_1_reg_858;
wire   [31:0] select_ln1076_fu_476_p3;
reg   [31:0] select_ln1076_reg_863;
wire   [31:0] select_ln1076_2_fu_496_p3;
reg   [31:0] select_ln1076_2_reg_868;
wire   [31:0] select_ln13_fu_669_p3;
reg   [31:0] select_ln13_reg_873;
wire    ap_CS_fsm_state7;
wire   [7:0] select_ln13_1_fu_677_p3;
reg   [7:0] select_ln13_1_reg_878;
wire   [7:0] retVal_12_fu_685_p3;
reg   [7:0] retVal_12_reg_883;
wire   [8:0] or_ln1543_fu_713_p2;
reg   [8:0] or_ln1543_reg_888;
reg   [22:0] tmp_1_reg_893;
wire   [0:0] xor_ln70_fu_747_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] ret_1_fu_753_p3;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_idle;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_ready;
wire   [7:0] grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out_ap_vld;
wire   [7:0] grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out_ap_vld;
wire   [31:0] grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out_ap_vld;
wire   [31:0] grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out_ap_vld;
wire   [31:0] grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out;
wire    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out_ap_vld;
reg   [31:0] state_ivlCurrRange_V_read_assign_reg_240;
wire   [0:0] init_offset_read_read_fu_168_p2;
reg   [31:0] state_bstate_currIdx_read_assign_reg_252;
reg   [7:0] state_bstate_n_bits_held_read_assign_reg_264;
reg   [7:0] state_bstate_held_aligned_word_read_assign_reg_276;
wire   [31:0] zext_ln11_fu_393_p1;
reg   [31:0] state_ivlOffset_V_read_assign_reg_288;
reg   [31:0] ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4;
reg   [31:0] state_ivlCurrRange_1_reg_299;
wire    ap_CS_fsm_state6;
reg   [31:0] ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4;
reg   [31:0] state_bstate_currIdx_2_reg_309;
reg   [7:0] ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4;
reg   [7:0] state_bstate_n_bits_held_2_reg_318;
reg   [7:0] ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4;
reg   [7:0] state_bstate_held_aligned_word_2_reg_327;
reg   [0:0] ap_phi_mux_binVal_1_phi_fu_339_p4;
reg   [0:0] binVal_1_reg_336;
reg   [31:0] ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4;
reg   [31:0] state_ivlOffset_2_reg_345;
reg    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln17_fu_398_p1;
wire   [63:0] zext_ln34_fu_431_p1;
wire   [63:0] zext_ln24_fu_446_p1;
wire   [0:0] tmp_fu_377_p3;
wire   [8:0] retVal_2_fu_385_p3;
wire   [5:0] pState_fu_403_p4;
wire   [1:0] qRangeIdx_fu_413_p4;
wire   [7:0] tmp_3_fu_423_p3;
wire   [0:0] icmp_ln1076_1_fu_454_p2;
wire   [0:0] valMps_fu_451_p1;
wire   [0:0] xor_ln1076_fu_464_p2;
wire   [6:0] select_ln1076_1_fu_483_p3;
wire   [31:0] sub_ln229_2_fu_459_p2;
wire   [31:0] zext_ln13_fu_561_p1;
wire   [31:0] shl_ln23_fu_579_p2;
wire   [7:0] trunc_ln23_fu_585_p1;
wire   [7:0] xor_ln23_fu_589_p2;
wire   [1:0] retVal_14_fu_605_p5;
wire   [7:0] retVal_14_fu_605_p6;
wire   [7:0] and_ln24_fu_595_p2;
wire   [0:0] tmp_2_fu_623_p3;
wire   [8:0] zext_ln13_1_fu_565_p1;
wire   [8:0] add_ln14_fu_639_p2;
wire   [31:0] zext_ln14_fu_575_p1;
wire  signed [31:0] sext_ln14_fu_645_p1;
wire   [31:0] retVal_10_fu_649_p2;
wire   [0:0] retVal_11_fu_655_p1;
wire   [0:0] icmp_ln13_fu_569_p2;
wire   [31:0] add_ln6_fu_617_p2;
wire   [7:0] add_ln16_fu_663_p2;
wire   [8:0] retVal_4_fu_631_p3;
wire   [8:0] zext_ln11_1_fu_659_p1;
wire   [7:0] trunc_ln1543_fu_701_p1;
wire   [8:0] shl_ln_fu_705_p3;
wire   [8:0] retVal_15_fu_693_p3;
wire   [31:0] ret_fu_729_p3;
wire   [0:0] icmp_ln1076_fu_735_p2;
wire   [31:0] sub_ln229_fu_741_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [0:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 1'd0;
#0 ap_return_5_preg = 32'd0;
end

cabac_top_decode_decision_lpsTable_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lpsTable_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpsTable_address0),
    .ce0(lpsTable_ce0),
    .q0(lpsTable_q0)
);

cabac_top_decode_decision_transMPS_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
transMPS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transMPS_address0),
    .ce0(transMPS_ce0),
    .q0(transMPS_q0)
);

cabac_top_decode_decision_transLPS_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
transLPS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transLPS_address0),
    .ce0(transLPS_ce0),
    .q0(transLPS_q0)
);

cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1 grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start),
    .ap_done(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done),
    .ap_idle(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_idle),
    .ap_ready(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_ready),
    .state_bstate_n_bits_held_read_assign(state_bstate_n_bits_held_read_assign_reg_264),
    .state_bstate_held_aligned_word_read_assign(state_bstate_held_aligned_word_read_assign_reg_276),
    .state_bstate_currIdx_read_assign(state_bstate_currIdx_read_assign_reg_252),
    .select_ln1076_2(select_ln1076_2_reg_868),
    .select_ln1076(select_ln1076_reg_863),
    .bStream_load_2(bStream),
    .bStream1_load_2(bStream1),
    .p_read(p_read),
    .p_read1(p_read1),
    .state_bstate_n_bits_held_0_i_out(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out),
    .state_bstate_n_bits_held_0_i_out_ap_vld(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out_ap_vld),
    .state_bstate_held_aligned_word_0_i_out(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out),
    .state_bstate_held_aligned_word_0_i_out_ap_vld(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out_ap_vld),
    .state_bstate_currIdx_0_i_out(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out),
    .state_bstate_currIdx_0_i_out_ap_vld(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out_ap_vld),
    .phi_ln59_out(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out),
    .phi_ln59_out_ap_vld(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out_ap_vld),
    .state_ivlCurrRange_1_i_out(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out),
    .state_ivlCurrRange_1_i_out_ap_vld(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out_ap_vld)
);

cabac_top_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U37(
    .din0(bStream),
    .din1(bStream1),
    .din2(p_read),
    .din3(p_read1),
    .din4(retVal_14_fu_605_p5),
    .dout(retVal_14_fu_605_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_1_preg <= ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_2_preg <= ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_3_preg <= ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_4_preg <= ap_phi_mux_binVal_1_phi_fu_339_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_5_preg <= ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg <= 1'b1;
        end else if ((grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_ready == 1'b1)) begin
            grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        binVal_1_reg_336 <= xor_ln1076_1_reg_858;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        binVal_1_reg_336 <= xor_ln70_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_bstate_currIdx_2_reg_309 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_bstate_currIdx_2_reg_309 <= select_ln13_reg_873;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((init_offset_read_read_fu_168_p2 == 1'd0)) begin
            state_bstate_currIdx_read_assign_reg_252 <= state_bstate_currIdx_read;
        end else if ((init_offset_read_read_fu_168_p2 == 1'd1)) begin
            state_bstate_currIdx_read_assign_reg_252 <= 32'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_bstate_held_aligned_word_2_reg_327 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_bstate_held_aligned_word_2_reg_327 <= retVal_12_reg_883;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((init_offset_read_read_fu_168_p2 == 1'd0)) begin
            state_bstate_held_aligned_word_read_assign_reg_276 <= state_bstate_held_aligned_word_read;
        end else if ((init_offset_read_read_fu_168_p2 == 1'd1)) begin
            state_bstate_held_aligned_word_read_assign_reg_276 <= bStream1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_bstate_n_bits_held_2_reg_318 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_bstate_n_bits_held_2_reg_318 <= select_ln13_1_reg_878;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((init_offset_read_read_fu_168_p2 == 1'd0)) begin
            state_bstate_n_bits_held_read_assign_reg_264 <= state_bstate_n_bits_held_read;
        end else if ((init_offset_read_read_fu_168_p2 == 1'd1)) begin
            state_bstate_n_bits_held_read_assign_reg_264 <= 8'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_ivlCurrRange_1_reg_299 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_ivlCurrRange_1_reg_299 <= state_ivlCurrRange_V_read_assign_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((init_offset_read_read_fu_168_p2 == 1'd0)) begin
            state_ivlCurrRange_V_read_assign_reg_240 <= state_ivlCurrRange_V_read;
        end else if ((init_offset_read_read_fu_168_p2 == 1'd1)) begin
            state_ivlCurrRange_V_read_assign_reg_240 <= 32'd510;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_ivlOffset_2_reg_345 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_ivlOffset_2_reg_345 <= ret_1_fu_753_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        if ((init_offset_read_read_fu_168_p2 == 1'd0)) begin
            state_ivlOffset_V_read_assign_reg_288 <= state_ivlOffset_V_read;
        end else if ((init_offset_read_read_fu_168_p2 == 1'd1)) begin
            state_ivlOffset_V_read_assign_reg_288 <= zext_ln11_fu_393_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctxState_reg_815 <= ctxTables_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ctxTables_addr_reg_810[0] <= zext_ln17_fu_398_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln1543_reg_888 <= or_ln1543_fu_713_p2;
        retVal_12_reg_883 <= retVal_12_fu_685_p3;
        select_ln13_1_reg_878 <= select_ln13_1_fu_677_p3;
        select_ln13_reg_873 <= select_ln13_fu_669_p3;
        tmp_1_reg_893 <= {{state_ivlOffset_V_read_assign_reg_288[30:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln1076_2_reg_868 <= select_ln1076_2_fu_496_p3;
        select_ln1076_reg_863 <= select_ln1076_fu_476_p3;
        xor_ln1076_1_reg_858 <= xor_ln1076_1_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_ln229_1_reg_831 <= sub_ln229_1_fu_440_p2;
        zext_ln34_1_reg_826[7 : 0] <= zext_ln34_1_fu_436_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_binVal_1_phi_fu_339_p4 = xor_ln1076_1_reg_858;
    end else begin
        ap_phi_mux_binVal_1_phi_fu_339_p4 = binVal_1_reg_336;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4 = grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out;
    end else begin
        ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4 = state_bstate_currIdx_2_reg_309;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4 = grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out;
    end else begin
        ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4 = state_bstate_held_aligned_word_2_reg_327;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4 = grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out;
    end else begin
        ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4 = state_bstate_n_bits_held_2_reg_318;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4 = grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out;
    end else begin
        ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4 = state_ivlCurrRange_1_reg_299;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4 = grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out;
    end else begin
        ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4 = state_ivlOffset_2_reg_345;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_2 = ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_3 = ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_4 = ap_phi_mux_binVal_1_phi_fu_339_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_5 = ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctxTables_address0 = ctxTables_addr_reg_810;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctxTables_address0 = zext_ln17_fu_398_p1;
    end else begin
        ctxTables_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ctxTables_ce0 = 1'b1;
    end else begin
        ctxTables_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctxTables_we0 = 1'b1;
    end else begin
        ctxTables_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lpsTable_ce0 = 1'b1;
    end else begin
        lpsTable_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        transLPS_ce0 = 1'b1;
    end else begin
        transLPS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        transMPS_ce0 = 1'b1;
    end else begin
        transMPS_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((mode_offset_read_read_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((mode_offset_read_read_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_639_p2 = ($signed(zext_ln13_1_fu_565_p1) + $signed(9'd511));

assign add_ln16_fu_663_p2 = ($signed(state_bstate_n_bits_held_read_assign_reg_264) + $signed(8'd255));

assign add_ln6_fu_617_p2 = (state_bstate_currIdx_read_assign_reg_252 + 32'd1);

assign and_ln24_fu_595_p2 = (xor_ln23_fu_589_p2 & state_bstate_held_aligned_word_read_assign_reg_276);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ctxTables_d0 = select_ln1076_1_fu_483_p3;

assign grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start = grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg;

assign icmp_ln1076_1_fu_454_p2 = ((sub_ln229_1_reg_831 > state_ivlOffset_V_read_assign_reg_288) ? 1'b1 : 1'b0);

assign icmp_ln1076_fu_735_p2 = ((ret_fu_729_p3 < state_ivlCurrRange_V_read_assign_reg_240) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_569_p2 = ((state_bstate_n_bits_held_read_assign_reg_264 == 8'd0) ? 1'b1 : 1'b0);

assign init_offset_read_read_fu_168_p2 = init_offset;

assign lpsTable_address0 = zext_ln34_fu_431_p1;

assign mode_offset_read_read_fu_162_p2 = mode_offset;

assign or_ln1543_fu_713_p2 = (shl_ln_fu_705_p3 | retVal_15_fu_693_p3);

assign pState_fu_403_p4 = {{ctxTables_q0[6:1]}};

assign qRangeIdx_fu_413_p4 = {{state_ivlCurrRange_V_read_assign_reg_240[7:6]}};

assign retVal_10_fu_649_p2 = zext_ln14_fu_575_p1 >> sext_ln14_fu_645_p1;

assign retVal_11_fu_655_p1 = retVal_10_fu_649_p2[0:0];

assign retVal_12_fu_685_p3 = ((icmp_ln13_fu_569_p2[0:0] == 1'b1) ? retVal_14_fu_605_p6 : state_bstate_held_aligned_word_read_assign_reg_276);

assign retVal_14_fu_605_p5 = state_bstate_currIdx_read_assign_reg_252[1:0];

assign retVal_15_fu_693_p3 = ((icmp_ln13_fu_569_p2[0:0] == 1'b1) ? retVal_4_fu_631_p3 : zext_ln11_1_fu_659_p1);

assign retVal_2_fu_385_p3 = {{bStream}, {tmp_fu_377_p3}};

assign retVal_4_fu_631_p3 = {{and_ln24_fu_595_p2}, {tmp_2_fu_623_p3}};

assign ret_1_fu_753_p3 = ((icmp_ln1076_fu_735_p2[0:0] == 1'b1) ? ret_fu_729_p3 : sub_ln229_fu_741_p2);

assign ret_fu_729_p3 = {{tmp_1_reg_893}, {or_ln1543_reg_888}};

assign select_ln1076_1_fu_483_p3 = ((icmp_ln1076_1_fu_454_p2[0:0] == 1'b1) ? transMPS_q0 : transLPS_q0);

assign select_ln1076_2_fu_496_p3 = ((icmp_ln1076_1_fu_454_p2[0:0] == 1'b1) ? state_ivlOffset_V_read_assign_reg_288 : sub_ln229_2_fu_459_p2);

assign select_ln1076_fu_476_p3 = ((icmp_ln1076_1_fu_454_p2[0:0] == 1'b1) ? sub_ln229_1_reg_831 : zext_ln34_1_reg_826);

assign select_ln13_1_fu_677_p3 = ((icmp_ln13_fu_569_p2[0:0] == 1'b1) ? 8'd7 : add_ln16_fu_663_p2);

assign select_ln13_fu_669_p3 = ((icmp_ln13_fu_569_p2[0:0] == 1'b1) ? add_ln6_fu_617_p2 : state_bstate_currIdx_read_assign_reg_252);

assign sext_ln14_fu_645_p1 = $signed(add_ln14_fu_639_p2);

assign shl_ln23_fu_579_p2 = 32'd255 << zext_ln13_fu_561_p1;

assign shl_ln_fu_705_p3 = {{trunc_ln1543_fu_701_p1}, {1'd0}};

assign sub_ln229_1_fu_440_p2 = (state_ivlCurrRange_V_read_assign_reg_240 - zext_ln34_1_fu_436_p1);

assign sub_ln229_2_fu_459_p2 = (state_ivlOffset_V_read_assign_reg_288 - sub_ln229_1_reg_831);

assign sub_ln229_fu_741_p2 = (ret_fu_729_p3 - state_ivlCurrRange_V_read_assign_reg_240);

assign tmp_2_fu_623_p3 = retVal_14_fu_605_p6[32'd7];

assign tmp_3_fu_423_p3 = {{pState_fu_403_p4}, {qRangeIdx_fu_413_p4}};

assign tmp_fu_377_p3 = bStream1[32'd7];

assign transLPS_address0 = zext_ln24_fu_446_p1;

assign transMPS_address0 = zext_ln24_fu_446_p1;

assign trunc_ln1543_fu_701_p1 = state_ivlOffset_V_read_assign_reg_288[7:0];

assign trunc_ln23_fu_585_p1 = shl_ln23_fu_579_p2[7:0];

assign valMps_fu_451_p1 = ctxState_reg_815[0:0];

assign xor_ln1076_1_fu_470_p2 = (xor_ln1076_fu_464_p2 ^ valMps_fu_451_p1);

assign xor_ln1076_fu_464_p2 = (icmp_ln1076_1_fu_454_p2 ^ 1'd1);

assign xor_ln23_fu_589_p2 = (trunc_ln23_fu_585_p1 ^ 8'd255);

assign xor_ln70_fu_747_p2 = (icmp_ln1076_fu_735_p2 ^ 1'd1);

assign zext_ln11_1_fu_659_p1 = retVal_11_fu_655_p1;

assign zext_ln11_fu_393_p1 = retVal_2_fu_385_p3;

assign zext_ln13_1_fu_565_p1 = state_bstate_n_bits_held_read_assign_reg_264;

assign zext_ln13_fu_561_p1 = state_bstate_n_bits_held_read_assign_reg_264;

assign zext_ln14_fu_575_p1 = state_bstate_held_aligned_word_read_assign_reg_276;

assign zext_ln17_fu_398_p1 = ctxAddr_offset;

assign zext_ln24_fu_446_p1 = ctxState_reg_815;

assign zext_ln34_1_fu_436_p1 = lpsTable_q0;

assign zext_ln34_fu_431_p1 = tmp_3_fu_423_p3;

always @ (posedge ap_clk) begin
    ctxTables_addr_reg_810[8:1] <= 8'b00000000;
    zext_ln34_1_reg_826[31:8] <= 24'b000000000000000000000000;
end

endmodule //cabac_top_decode_decision
