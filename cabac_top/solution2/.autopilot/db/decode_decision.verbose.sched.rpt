

================================================================
== Vitis HLS Report for 'decode_decision'
================================================================
* Date:           Thu Mar 30 10:45:18 2023

* Version:        2021.2 (Build 3367213 on Tue Oct 19 02:47:39 MDT 2021)
* Project:        cabac_top
* Solution:       solution2 (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.757 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        ?|        ?|         ?|         ?|    ?|    ?|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 8
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 7 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 
7 --> 8 
8 --> 6 

* FSM state operations: 

State 1 <SV = 0> <Delay = 3.25>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%ctxAddr_offset_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %ctxAddr_offset"   --->   Operation 9 'read' 'ctxAddr_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%p_read_3 = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %p_read1"   --->   Operation 10 'read' 'p_read_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%p_read_4 = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %p_read"   --->   Operation 11 'read' 'p_read_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%state_bstate_held_aligned_word_read_1 = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %state_bstate_held_aligned_word_read"   --->   Operation 12 'read' 'state_bstate_held_aligned_word_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%state_bstate_n_bits_held_read_1 = read i8 @_ssdm_op_Read.ap_auto.i8, i8 %state_bstate_n_bits_held_read"   --->   Operation 13 'read' 'state_bstate_n_bits_held_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%state_bstate_currIdx_read_1 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %state_bstate_currIdx_read"   --->   Operation 14 'read' 'state_bstate_currIdx_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%state_ivlOffset_V_read_1 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %state_ivlOffset_V_read"   --->   Operation 15 'read' 'state_ivlOffset_V_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%state_ivlCurrRange_V_read_1 = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %state_ivlCurrRange_V_read"   --->   Operation 16 'read' 'state_ivlCurrRange_V_read_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%mode_offset_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %mode_offset"   --->   Operation 17 'read' 'mode_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%init_offset_read = read i1 @_ssdm_op_Read.ap_auto.i1, i1 %init_offset"   --->   Operation 18 'read' 'init_offset_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%state_ivlCurrRange_1_i_loc = alloca i64 1"   --->   Operation 19 'alloca' 'state_ivlCurrRange_1_i_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%phi_ln59_loc = alloca i64 1"   --->   Operation 20 'alloca' 'phi_ln59_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%state_bstate_currIdx_0_i_loc = alloca i64 1"   --->   Operation 21 'alloca' 'state_bstate_currIdx_0_i_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%state_bstate_held_aligned_word_0_i_loc = alloca i64 1"   --->   Operation 22 'alloca' 'state_bstate_held_aligned_word_0_i_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%state_bstate_n_bits_held_0_i_loc = alloca i64 1"   --->   Operation 23 'alloca' 'state_bstate_n_bits_held_0_i_loc' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (1.58ns)   --->   "%br_ln84 = br i1 %init_offset_read, void %._crit_edge, void %_ZN8ArithDec4initEPhR8_arith_t.12.31.44.57.70.83.96.109.exit" [src/arith_dec.cpp:84]   --->   Operation 24 'br' 'br_ln84' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%retVal = read i8 @_ssdm_op_Read.ap_auto.volatile.i8P0A, i8 %bStream" [src/utils.cpp:5]   --->   Operation 25 'read' 'retVal' <Predicate = (init_offset_read)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%retVal_8 = read i8 @_ssdm_op_Read.ap_auto.volatile.i8P0A, i8 %bStream1" [src/utils.cpp:5]   --->   Operation 26 'read' 'retVal_8' <Predicate = (init_offset_read)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%tmp = bitselect i1 @_ssdm_op_BitSelect.i1.i8.i32, i8 %retVal_8, i32 7" [src/utils.cpp:42]   --->   Operation 27 'bitselect' 'tmp' <Predicate = (init_offset_read)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%retVal_2 = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %retVal, i1 %tmp" [src/utils.cpp:42]   --->   Operation 28 'bitconcatenate' 'retVal_2' <Predicate = (init_offset_read)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%zext_ln11 = zext i9 %retVal_2" [src/utils.cpp:11]   --->   Operation 29 'zext' 'zext_ln11' <Predicate = (init_offset_read)> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (1.58ns)   --->   "%br_ln86 = br void %._crit_edge" [src/arith_dec.cpp:86]   --->   Operation 30 'br' 'br_ln86' <Predicate = (init_offset_read)> <Delay = 1.58>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%state_ivlCurrRange_V_read_assign = phi i32 510, void %_ZN8ArithDec4initEPhR8_arith_t.12.31.44.57.70.83.96.109.exit, i32 %state_ivlCurrRange_V_read_1, void"   --->   Operation 31 'phi' 'state_ivlCurrRange_V_read_assign' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%state_bstate_currIdx_read_assign = phi i32 2, void %_ZN8ArithDec4initEPhR8_arith_t.12.31.44.57.70.83.96.109.exit, i32 %state_bstate_currIdx_read_1, void"   --->   Operation 32 'phi' 'state_bstate_currIdx_read_assign' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%state_bstate_n_bits_held_read_assign = phi i8 7, void %_ZN8ArithDec4initEPhR8_arith_t.12.31.44.57.70.83.96.109.exit, i8 %state_bstate_n_bits_held_read_1, void"   --->   Operation 33 'phi' 'state_bstate_n_bits_held_read_assign' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%state_bstate_held_aligned_word_read_assign = phi i8 %retVal_8, void %_ZN8ArithDec4initEPhR8_arith_t.12.31.44.57.70.83.96.109.exit, i8 %state_bstate_held_aligned_word_read_1, void"   --->   Operation 34 'phi' 'state_bstate_held_aligned_word_read_assign' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%state_ivlOffset_V_read_assign = phi i32 %zext_ln11, void %_ZN8ArithDec4initEPhR8_arith_t.12.31.44.57.70.83.96.109.exit, i32 %state_ivlOffset_V_read_1, void" [src/utils.cpp:11]   --->   Operation 35 'phi' 'state_ivlOffset_V_read_assign' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%br_ln88 = br i1 %mode_offset_read, void %codeRepl, void %_ifconv" [src/arith_dec.cpp:88]   --->   Operation 36 'br' 'br_ln88' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%zext_ln17 = zext i1 %ctxAddr_offset_read" [src/arith_dec.cpp:17]   --->   Operation 37 'zext' 'zext_ln17' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "%ctxTables_addr = getelementptr i8 %ctxTables, i64 0, i64 %zext_ln17" [src/arith_dec.cpp:17]   --->   Operation 38 'getelementptr' 'ctxTables_addr' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_1 : Operation 39 [2/2] (3.25ns)   --->   "%ctxState = load i9 %ctxTables_addr" [src/arith_dec.cpp:17]   --->   Operation 39 'load' 'ctxState' <Predicate = (!mode_offset_read)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 512> <RAM>

State 2 <SV = 1> <Delay = 6.50>
ST_2 : Operation 40 [1/2] (3.25ns)   --->   "%ctxState = load i9 %ctxTables_addr" [src/arith_dec.cpp:17]   --->   Operation 40 'load' 'ctxState' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 512> <RAM>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%pState = partselect i6 @_ssdm_op_PartSelect.i6.i8.i32.i32, i8 %ctxState, i32 1, i32 6" [src/arith_dec.cpp:30->src/arith_dec.cpp:89]   --->   Operation 41 'partselect' 'pState' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%qRangeIdx = partselect i2 @_ssdm_op_PartSelect.i2.i32.i32.i32, i32 %state_ivlCurrRange_V_read_assign, i32 6, i32 7"   --->   Operation 42 'partselect' 'qRangeIdx' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%tmp_3 = bitconcatenate i8 @_ssdm_op_BitConcatenate.i8.i6.i2, i6 %pState, i2 %qRangeIdx" [src/arith_dec.cpp:34->src/arith_dec.cpp:89]   --->   Operation 43 'bitconcatenate' 'tmp_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%zext_ln34 = zext i8 %tmp_3" [src/arith_dec.cpp:34->src/arith_dec.cpp:89]   --->   Operation 44 'zext' 'zext_ln34' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%lpsTable_addr = getelementptr i8 %lpsTable, i64 0, i64 %zext_ln34" [src/arith_dec.cpp:34->src/arith_dec.cpp:89]   --->   Operation 45 'getelementptr' 'lpsTable_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 46 [2/2] (3.25ns)   --->   "%ivlLpsRange = load i8 %lpsTable_addr" [src/arith_dec.cpp:34->src/arith_dec.cpp:89]   --->   Operation 46 'load' 'ivlLpsRange' <Predicate = true> <Delay = 3.25> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 256> <ROM>

State 3 <SV = 2> <Delay = 5.80>
ST_3 : Operation 47 [1/2] (3.25ns)   --->   "%ivlLpsRange = load i8 %lpsTable_addr" [src/arith_dec.cpp:34->src/arith_dec.cpp:89]   --->   Operation 47 'load' 'ivlLpsRange' <Predicate = true> <Delay = 3.25> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 256> <ROM>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%zext_ln34_1 = zext i8 %ivlLpsRange" [src/arith_dec.cpp:34->src/arith_dec.cpp:89]   --->   Operation 48 'zext' 'zext_ln34_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (2.55ns)   --->   "%sub_ln229_1 = sub i32 %state_ivlCurrRange_V_read_assign, i32 %zext_ln34_1"   --->   Operation 49 'sub' 'sub_ln229_1' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "%zext_ln24 = zext i8 %ctxState" [src/arith_dec.cpp:24]   --->   Operation 50 'zext' 'zext_ln24' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (0.00ns)   --->   "%transMPS_addr = getelementptr i7 %transMPS, i64 0, i64 %zext_ln24" [src/arith_dec.cpp:22]   --->   Operation 51 'getelementptr' 'transMPS_addr' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 52 [2/2] (2.32ns)   --->   "%transMPS_load = load i7 %transMPS_addr" [src/arith_dec.cpp:22]   --->   Operation 52 'load' 'transMPS_load' <Predicate = true> <Delay = 2.32> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 7> <Depth = 128> <ROM>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%transLPS_addr = getelementptr i7 %transLPS, i64 0, i64 %zext_ln24" [src/arith_dec.cpp:24]   --->   Operation 53 'getelementptr' 'transLPS_addr' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 54 [2/2] (2.32ns)   --->   "%transLPS_load = load i7 %transLPS_addr" [src/arith_dec.cpp:24]   --->   Operation 54 'load' 'transLPS_load' <Predicate = true> <Delay = 2.32> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 7> <Depth = 128> <ROM>

State 4 <SV = 3> <Delay = 6.72>
ST_4 : Operation 55 [1/1] (0.00ns)   --->   "%bStream_read_1 = read i8 @_ssdm_op_Read.ap_auto.i8P0A, i8 %bStream" [src/arith_dec.cpp:89]   --->   Operation 55 'read' 'bStream_read_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 56 [1/1] (0.00ns)   --->   "%bStream1_read_1 = read i8 @_ssdm_op_Read.ap_auto.i8P0A, i8 %bStream1" [src/arith_dec.cpp:89]   --->   Operation 56 'read' 'bStream1_read_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 57 [1/1] (0.00ns) (grouped into LUT with out node xor_ln1076_1)   --->   "%valMps = trunc i8 %ctxState" [src/arith_dec.cpp:29->src/arith_dec.cpp:89]   --->   Operation 57 'trunc' 'valMps' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 58 [1/1] (2.47ns)   --->   "%icmp_ln1076_1 = icmp_ugt  i32 %sub_ln229_1, i32 %state_ivlOffset_V_read_assign"   --->   Operation 58 'icmp' 'icmp_ln1076_1' <Predicate = true> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 59 [1/2] (2.32ns)   --->   "%transMPS_load = load i7 %transMPS_addr" [src/arith_dec.cpp:22]   --->   Operation 59 'load' 'transMPS_load' <Predicate = true> <Delay = 2.32> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 7> <Depth = 128> <ROM>
ST_4 : Operation 60 [1/1] (2.55ns)   --->   "%sub_ln229_2 = sub i32 %state_ivlOffset_V_read_assign, i32 %sub_ln229_1"   --->   Operation 60 'sub' 'sub_ln229_2' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 61 [1/2] (2.32ns)   --->   "%transLPS_load = load i7 %transLPS_addr" [src/arith_dec.cpp:24]   --->   Operation 61 'load' 'transLPS_load' <Predicate = true> <Delay = 2.32> <CoreInst = "ROM">   --->   Core 95 'ROM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 7> <Depth = 128> <ROM>
ST_4 : Operation 62 [1/1] (0.00ns) (grouped into LUT with out node xor_ln1076_1)   --->   "%xor_ln1076 = xor i1 %icmp_ln1076_1, i1 1"   --->   Operation 62 'xor' 'xor_ln1076' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 63 [1/1] (0.97ns) (out node of the LUT)   --->   "%xor_ln1076_1 = xor i1 %valMps, i1 %xor_ln1076"   --->   Operation 63 'xor' 'xor_ln1076_1' <Predicate = true> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 64 [1/1] (0.69ns)   --->   "%select_ln1076 = select i1 %icmp_ln1076_1, i32 %sub_ln229_1, i32 %zext_ln34_1"   --->   Operation 64 'select' 'select_ln1076' <Predicate = true> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 65 [1/1] (0.99ns)   --->   "%select_ln1076_1 = select i1 %icmp_ln1076_1, i7 %transMPS_load, i7 %transLPS_load"   --->   Operation 65 'select' 'select_ln1076_1' <Predicate = true> <Delay = 0.99> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 66 [1/1] (0.00ns)   --->   "%zext_ln1076 = zext i7 %select_ln1076_1"   --->   Operation 66 'zext' 'zext_ln1076' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 67 [1/1] (0.69ns)   --->   "%select_ln1076_2 = select i1 %icmp_ln1076_1, i32 %state_ivlOffset_V_read_assign, i32 %sub_ln229_2"   --->   Operation 67 'select' 'select_ln1076_2' <Predicate = true> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 68 [1/1] (3.25ns)   --->   "%store_ln24 = store i8 %zext_ln1076, i9 %ctxTables_addr" [src/arith_dec.cpp:24]   --->   Operation 68 'store' 'store_ln24' <Predicate = true> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 82 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 512> <RAM>
ST_4 : Operation 69 [2/2] (1.58ns)   --->   "%call_ln5 = call void @decode_decision_Pipeline_VITIS_LOOP_53_1, i8 %state_bstate_n_bits_held_read_assign, i8 %state_bstate_held_aligned_word_read_assign, i32 %state_bstate_currIdx_read_assign, i32 %select_ln1076_2, i32 %select_ln1076, i8 %bStream_read_1, i8 %bStream1_read_1, i8 %p_read_4, i8 %p_read_3, i8 %state_bstate_n_bits_held_0_i_loc, i8 %state_bstate_held_aligned_word_0_i_loc, i32 %state_bstate_currIdx_0_i_loc, i32 %phi_ln59_loc, i32 %state_ivlCurrRange_1_i_loc" [src/utils.cpp:5]   --->   Operation 69 'call' 'call_ln5' <Predicate = true> <Delay = 1.58> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 5 <SV = 4> <Delay = 2.45>
ST_5 : Operation 70 [1/2] (2.45ns)   --->   "%call_ln5 = call void @decode_decision_Pipeline_VITIS_LOOP_53_1, i8 %state_bstate_n_bits_held_read_assign, i8 %state_bstate_held_aligned_word_read_assign, i32 %state_bstate_currIdx_read_assign, i32 %select_ln1076_2, i32 %select_ln1076, i8 %bStream_read_1, i8 %bStream1_read_1, i8 %p_read_4, i8 %p_read_3, i8 %state_bstate_n_bits_held_0_i_loc, i8 %state_bstate_held_aligned_word_0_i_loc, i32 %state_bstate_currIdx_0_i_loc, i32 %phi_ln59_loc, i32 %state_ivlCurrRange_1_i_loc" [src/utils.cpp:5]   --->   Operation 70 'call' 'call_ln5' <Predicate = true> <Delay = 2.45> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 6 <SV = 5> <Delay = 1.58>
ST_6 : Operation 71 [1/1] (0.00ns)   --->   "%state_bstate_n_bits_held_0_i_loc_load = load i8 %state_bstate_n_bits_held_0_i_loc"   --->   Operation 71 'load' 'state_bstate_n_bits_held_0_i_loc_load' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_6 : Operation 72 [1/1] (0.00ns)   --->   "%state_bstate_held_aligned_word_0_i_loc_load = load i8 %state_bstate_held_aligned_word_0_i_loc"   --->   Operation 72 'load' 'state_bstate_held_aligned_word_0_i_loc_load' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_6 : Operation 73 [1/1] (0.00ns)   --->   "%state_bstate_currIdx_0_i_loc_load = load i32 %state_bstate_currIdx_0_i_loc"   --->   Operation 73 'load' 'state_bstate_currIdx_0_i_loc_load' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_6 : Operation 74 [1/1] (0.00ns)   --->   "%phi_ln59_loc_load = load i32 %phi_ln59_loc"   --->   Operation 74 'load' 'phi_ln59_loc_load' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_6 : Operation 75 [1/1] (0.00ns)   --->   "%state_ivlCurrRange_1_i_loc_load = load i32 %state_ivlCurrRange_1_i_loc"   --->   Operation 75 'load' 'state_ivlCurrRange_1_i_loc_load' <Predicate = (!mode_offset_read)> <Delay = 0.00>
ST_6 : Operation 76 [1/1] (1.58ns)   --->   "%br_ln0 = br void %._crit_edge1"   --->   Operation 76 'br' 'br_ln0' <Predicate = (!mode_offset_read)> <Delay = 1.58>
ST_6 : Operation 77 [1/1] (0.00ns)   --->   "%state_ivlCurrRange_1 = phi i32 %state_ivlCurrRange_V_read_assign, void %_ifconv, i32 %state_ivlCurrRange_1_i_loc_load, void %codeRepl"   --->   Operation 77 'phi' 'state_ivlCurrRange_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 78 [1/1] (0.00ns)   --->   "%state_bstate_currIdx_2 = phi i32 %select_ln13, void %_ifconv, i32 %state_bstate_currIdx_0_i_loc_load, void %codeRepl" [src/utils.cpp:13]   --->   Operation 78 'phi' 'state_bstate_currIdx_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 79 [1/1] (0.00ns)   --->   "%state_bstate_n_bits_held_2 = phi i8 %select_ln13_1, void %_ifconv, i8 %state_bstate_n_bits_held_0_i_loc_load, void %codeRepl" [src/utils.cpp:13]   --->   Operation 79 'phi' 'state_bstate_n_bits_held_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 80 [1/1] (0.00ns)   --->   "%state_bstate_held_aligned_word_2 = phi i8 %retVal_12, void %_ifconv, i8 %state_bstate_held_aligned_word_0_i_loc_load, void %codeRepl"   --->   Operation 80 'phi' 'state_bstate_held_aligned_word_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 81 [1/1] (0.00ns)   --->   "%binVal_1 = phi i1 %xor_ln70, void %_ifconv, i1 %xor_ln1076_1, void %codeRepl" [src/arith_dec.cpp:70]   --->   Operation 81 'phi' 'binVal_1' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 82 [1/1] (0.00ns)   --->   "%state_ivlOffset_2 = phi i32 %ret_1, void %_ifconv, i32 %phi_ln59_loc_load, void %codeRepl"   --->   Operation 82 'phi' 'state_ivlOffset_2' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 83 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue i113 <undef>, i32 %state_ivlCurrRange_1" [src/arith_dec.cpp:97]   --->   Operation 83 'insertvalue' 'mrv_s' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 84 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue i113 %mrv_s, i32 %state_bstate_currIdx_2" [src/arith_dec.cpp:97]   --->   Operation 84 'insertvalue' 'mrv_6' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 85 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue i113 %mrv_6, i8 %state_bstate_n_bits_held_2" [src/arith_dec.cpp:97]   --->   Operation 85 'insertvalue' 'mrv_7' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 86 [1/1] (0.00ns)   --->   "%mrv_8 = insertvalue i113 %mrv_7, i8 %state_bstate_held_aligned_word_2" [src/arith_dec.cpp:97]   --->   Operation 86 'insertvalue' 'mrv_8' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 87 [1/1] (0.00ns)   --->   "%mrv_9 = insertvalue i113 %mrv_8, i1 %binVal_1" [src/arith_dec.cpp:97]   --->   Operation 87 'insertvalue' 'mrv_9' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 88 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue i113 %mrv_9, i32 %state_ivlOffset_2" [src/arith_dec.cpp:97]   --->   Operation 88 'insertvalue' 'mrv_5' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 89 [1/1] (0.00ns)   --->   "%ret_ln97 = ret i113 %mrv_5" [src/arith_dec.cpp:97]   --->   Operation 89 'ret' 'ret_ln97' <Predicate = true> <Delay = 0.00>

State 7 <SV = 3> <Delay = 5.16>
ST_7 : Operation 90 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%zext_ln13 = zext i8 %state_bstate_n_bits_held_read_assign" [src/utils.cpp:13]   --->   Operation 90 'zext' 'zext_ln13' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 91 [1/1] (0.00ns)   --->   "%zext_ln13_1 = zext i8 %state_bstate_n_bits_held_read_assign" [src/utils.cpp:13]   --->   Operation 91 'zext' 'zext_ln13_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 92 [1/1] (1.55ns)   --->   "%icmp_ln13 = icmp_eq  i8 %state_bstate_n_bits_held_read_assign, i8 0" [src/utils.cpp:13]   --->   Operation 92 'icmp' 'icmp_ln13' <Predicate = true> <Delay = 1.55> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 93 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%zext_ln14 = zext i8 %state_bstate_held_aligned_word_read_assign" [src/utils.cpp:14]   --->   Operation 93 'zext' 'zext_ln14' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 94 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%shl_ln23 = shl i32 255, i32 %zext_ln13" [src/utils.cpp:23]   --->   Operation 94 'shl' 'shl_ln23' <Predicate = true> <Delay = 0.00> <CoreInst = "Shifter">   --->   Core 75 'Shifter' <Latency = 0> <II = 1> <Delay = 3.25> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 95 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%trunc_ln23 = trunc i32 %shl_ln23" [src/utils.cpp:23]   --->   Operation 95 'trunc' 'trunc_ln23' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 96 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%xor_ln23 = xor i8 %trunc_ln23, i8 255" [src/utils.cpp:23]   --->   Operation 96 'xor' 'xor_ln23' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 97 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%and_ln24 = and i8 %state_bstate_held_aligned_word_read_assign, i8 %xor_ln23" [src/utils.cpp:24]   --->   Operation 97 'and' 'and_ln24' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 98 [1/1] (0.00ns)   --->   "%trunc_ln5 = trunc i32 %state_bstate_currIdx_read_assign" [src/utils.cpp:5]   --->   Operation 98 'trunc' 'trunc_ln5' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 99 [1/1] (0.00ns)   --->   "%bStream_read = read i8 @_ssdm_op_Read.ap_auto.i8P0A, i8 %bStream" [src/utils.cpp:5]   --->   Operation 99 'read' 'bStream_read' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 100 [1/1] (0.00ns)   --->   "%bStream1_read = read i8 @_ssdm_op_Read.ap_auto.i8P0A, i8 %bStream1" [src/utils.cpp:5]   --->   Operation 100 'read' 'bStream1_read' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 101 [1/1] (1.82ns)   --->   "%retVal_14 = mux i8 @_ssdm_op_Mux.ap_auto.4i8.i2, i8 %bStream_read, i8 %bStream1_read, i8 %p_read_4, i8 %p_read_3, i2 %trunc_ln5" [src/utils.cpp:5]   --->   Operation 101 'mux' 'retVal_14' <Predicate = true> <Delay = 1.82> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 102 [1/1] (2.55ns)   --->   "%add_ln6 = add i32 %state_bstate_currIdx_read_assign, i32 1" [src/utils.cpp:6]   --->   Operation 102 'add' 'add_ln6' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 103 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%tmp_2 = bitselect i1 @_ssdm_op_BitSelect.i1.i8.i32, i8 %retVal_14, i32 7" [src/utils.cpp:42]   --->   Operation 103 'bitselect' 'tmp_2' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 104 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%retVal_4 = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %and_ln24, i1 %tmp_2" [src/utils.cpp:42]   --->   Operation 104 'bitconcatenate' 'retVal_4' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 105 [1/1] (1.91ns)   --->   "%add_ln14 = add i9 %zext_ln13_1, i9 511" [src/utils.cpp:14]   --->   Operation 105 'add' 'add_ln14' <Predicate = true> <Delay = 1.91> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 106 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%sext_ln14 = sext i9 %add_ln14" [src/utils.cpp:14]   --->   Operation 106 'sext' 'sext_ln14' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 107 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%retVal_10 = lshr i32 %zext_ln14, i32 %sext_ln14" [src/utils.cpp:14]   --->   Operation 107 'lshr' 'retVal_10' <Predicate = true> <Delay = 0.00> <CoreInst = "Shifter">   --->   Core 75 'Shifter' <Latency = 0> <II = 1> <Delay = 3.25> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 108 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%retVal_11 = trunc i32 %retVal_10" [src/utils.cpp:11]   --->   Operation 108 'trunc' 'retVal_11' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 109 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%zext_ln11_1 = zext i1 %retVal_11" [src/utils.cpp:11]   --->   Operation 109 'zext' 'zext_ln11_1' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 110 [1/1] (1.91ns)   --->   "%add_ln16 = add i8 %state_bstate_n_bits_held_read_assign, i8 255" [src/utils.cpp:16]   --->   Operation 110 'add' 'add_ln16' <Predicate = true> <Delay = 1.91> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 111 [1/1] (0.69ns)   --->   "%select_ln13 = select i1 %icmp_ln13, i32 %add_ln6, i32 %state_bstate_currIdx_read_assign" [src/utils.cpp:13]   --->   Operation 111 'select' 'select_ln13' <Predicate = true> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 112 [1/1] (1.24ns)   --->   "%select_ln13_1 = select i1 %icmp_ln13, i8 7, i8 %add_ln16" [src/utils.cpp:13]   --->   Operation 112 'select' 'select_ln13_1' <Predicate = true> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 113 [1/1] (1.24ns)   --->   "%retVal_12 = select i1 %icmp_ln13, i8 %retVal_14, i8 %state_bstate_held_aligned_word_read_assign" [src/utils.cpp:13]   --->   Operation 113 'select' 'retVal_12' <Predicate = true> <Delay = 1.24> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 114 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%retVal_15 = select i1 %icmp_ln13, i9 %retVal_4, i9 %zext_ln11_1" [src/utils.cpp:13]   --->   Operation 114 'select' 'retVal_15' <Predicate = true> <Delay = 0.00> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_7 : Operation 115 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%trunc_ln1543 = trunc i32 %state_ivlOffset_V_read_assign"   --->   Operation 115 'trunc' 'trunc_ln1543' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 116 [1/1] (0.00ns) (grouped into LUT with out node or_ln1543)   --->   "%shl_ln = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i8.i1, i8 %trunc_ln1543, i1 0"   --->   Operation 116 'bitconcatenate' 'shl_ln' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 117 [1/1] (3.25ns) (out node of the LUT)   --->   "%or_ln1543 = or i9 %shl_ln, i9 %retVal_15"   --->   Operation 117 'or' 'or_ln1543' <Predicate = true> <Delay = 3.25> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 118 [1/1] (0.00ns)   --->   "%tmp_1 = partselect i23 @_ssdm_op_PartSelect.i23.i32.i32.i32, i32 %state_ivlOffset_V_read_assign, i32 8, i32 30"   --->   Operation 118 'partselect' 'tmp_1' <Predicate = true> <Delay = 0.00>

State 8 <SV = 4> <Delay = 3.45>
ST_8 : Operation 119 [1/1] (0.00ns)   --->   "%ret = bitconcatenate i32 @_ssdm_op_BitConcatenate.i32.i23.i9, i23 %tmp_1, i9 %or_ln1543"   --->   Operation 119 'bitconcatenate' 'ret' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 120 [1/1] (2.47ns)   --->   "%icmp_ln1076 = icmp_ult  i32 %ret, i32 %state_ivlCurrRange_V_read_assign"   --->   Operation 120 'icmp' 'icmp_ln1076' <Predicate = true> <Delay = 2.47> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 121 [1/1] (2.55ns)   --->   "%sub_ln229 = sub i32 %ret, i32 %state_ivlCurrRange_V_read_assign"   --->   Operation 121 'sub' 'sub_ln229' <Predicate = true> <Delay = 2.55> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 122 [1/1] (0.97ns)   --->   "%xor_ln70 = xor i1 %icmp_ln1076, i1 1" [src/arith_dec.cpp:70]   --->   Operation 122 'xor' 'xor_ln70' <Predicate = true> <Delay = 0.97> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 123 [1/1] (0.69ns)   --->   "%ret_1 = select i1 %icmp_ln1076, i32 %ret, i32 %sub_ln229" [src/arith_dec.cpp:70]   --->   Operation 123 'select' 'ret_1' <Predicate = true> <Delay = 0.69> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_8 : Operation 124 [1/1] (1.58ns)   --->   "%br_ln92 = br void %._crit_edge1" [src/arith_dec.cpp:92]   --->   Operation 124 'br' 'br_ln92' <Predicate = true> <Delay = 1.58>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 2.7ns.

 <State 1>: 3.25ns
The critical path consists of the following:
	wire read operation ('ctxAddr') on port 'ctxAddr_offset' [17]  (0 ns)
	'getelementptr' operation ('ctxTables_addr', src/arith_dec.cpp:17) [51]  (0 ns)
	'load' operation ('ctxState', src/arith_dec.cpp:17) on array 'ctxTables' [52]  (3.25 ns)

 <State 2>: 6.51ns
The critical path consists of the following:
	'load' operation ('ctxState', src/arith_dec.cpp:17) on array 'ctxTables' [52]  (3.25 ns)
	'getelementptr' operation ('lpsTable_addr', src/arith_dec.cpp:34->src/arith_dec.cpp:89) [58]  (0 ns)
	'load' operation ('ivlLpsRange', src/arith_dec.cpp:34->src/arith_dec.cpp:89) on array 'lpsTable' [59]  (3.25 ns)

 <State 3>: 5.81ns
The critical path consists of the following:
	'load' operation ('ivlLpsRange', src/arith_dec.cpp:34->src/arith_dec.cpp:89) on array 'lpsTable' [59]  (3.25 ns)
	'sub' operation ('sub_ln229_1') [61]  (2.55 ns)

 <State 4>: 6.72ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln1076_1') [62]  (2.47 ns)
	'select' operation ('select_ln1076_1') [72]  (0.993 ns)
	'store' operation ('store_ln24', src/arith_dec.cpp:24) of variable 'zext_ln1076' on array 'ctxTables' [75]  (3.25 ns)

 <State 5>: 2.45ns
The critical path consists of the following:
	'call' operation ('call_ln5', src/utils.cpp:5) to 'decode_decision_Pipeline_VITIS_LOOP_53_1' [76]  (2.45 ns)

 <State 6>: 1.59ns
The critical path consists of the following:
	'load' operation ('state_ivlCurrRange_1_i_loc_load') on local variable 'state_ivlCurrRange_1_i_loc' [81]  (0 ns)
	multiplexor before 'phi' operation ('state_ivlCurrRange_1') with incoming values : ('state.ivlCurrRange.V') ('state_ivlCurrRange_1_i_loc_load') [120]  (1.59 ns)
	'phi' operation ('state_ivlCurrRange_1') with incoming values : ('state.ivlCurrRange.V') ('state_ivlCurrRange_1_i_loc_load') [120]  (0 ns)

 <State 7>: 5.17ns
The critical path consists of the following:
	'add' operation ('add_ln14', src/utils.cpp:14) [99]  (1.92 ns)
	'lshr' operation ('retVal', src/utils.cpp:14) [101]  (0 ns)
	'select' operation ('retVal', src/utils.cpp:13) [108]  (0 ns)
	'or' operation ('or_ln1543') [111]  (3.25 ns)

 <State 8>: 3.45ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln1076') [114]  (2.47 ns)
	'xor' operation ('xor_ln70', src/arith_dec.cpp:70) [116]  (0.978 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
