-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cabac_top_decode_decision_transLPS_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 7; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cabac_top_decode_decision_transLPS_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0000001", 1 to 2=> "0000000", 3 => "0000001", 4 => "0000010", 
    5 => "0000011", 6 => "0000100", 7 => "0000101", 8 => "0000100", 
    9 => "0000101", 10 => "0001000", 11 => "0001001", 12 => "0001000", 
    13 => "0001001", 14 => "0001010", 15 => "0001011", 16 => "0001100", 
    17 => "0001101", 18 => "0001110", 19 => "0001111", 20 => "0010000", 
    21 => "0010001", 22 => "0010010", 23 => "0010011", 24 => "0010010", 
    25 => "0010011", 26 => "0010110", 27 => "0010111", 28 => "0010110", 
    29 => "0010111", 30 => "0011000", 31 => "0011001", 32 => "0011010", 
    33 => "0011011", 34 => "0011010", 35 => "0011011", 36 => "0011110", 
    37 => "0011111", 38 => "0011110", 39 => "0011111", 40 => "0100000", 
    41 => "0100001", 42 => "0100000", 43 => "0100001", 44 => "0100100", 
    45 => "0100101", 46 => "0100100", 47 => "0100101", 48 => "0100110", 
    49 => "0100111", 50 => "0100110", 51 => "0100111", 52 => "0101010", 
    53 => "0101011", 54 => "0101010", 55 => "0101011", 56 => "0101100", 
    57 => "0101101", 58 => "0101100", 59 => "0101101", 60 => "0101110", 
    61 => "0101111", 62 => "0110000", 63 => "0110001", 64 => "0110000", 
    65 => "0110001", 66 => "0110010", 67 => "0110011", 68 => "0110100", 
    69 => "0110101", 70 => "0110100", 71 => "0110101", 72 => "0110110", 
    73 => "0110111", 74 => "0110110", 75 => "0110111", 76 => "0111000", 
    77 => "0111001", 78 => "0111010", 79 => "0111011", 80 => "0111010", 
    81 => "0111011", 82 => "0111100", 83 => "0111101", 84 => "0111100", 
    85 => "0111101", 86 => "0111100", 87 => "0111101", 88 => "0111110", 
    89 => "0111111", 90 => "1000000", 91 => "1000001", 92 => "1000000", 
    93 => "1000001", 94 => "1000010", 95 => "1000011", 96 => "1000010", 
    97 => "1000011", 98 => "1000010", 99 => "1000011", 100 => "1000100", 
    101 => "1000101", 102 => "1000100", 103 => "1000101", 104 => "1000110", 
    105 => "1000111", 106 => "1000110", 107 => "1000111", 108 => "1000110", 
    109 => "1000111", 110 => "1001000", 111 => "1001001", 112 => "1001000", 
    113 => "1001001", 114 => "1001000", 115 => "1001001", 116 => "1001010", 
    117 => "1001011", 118 => "1001010", 119 => "1001011", 120 => "1001010", 
    121 => "1001011", 122 => "1001100", 123 => "1001101", 124 => "1001100", 
    125 => "1001101", 126 => "1111110", 127 => "1111111" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

