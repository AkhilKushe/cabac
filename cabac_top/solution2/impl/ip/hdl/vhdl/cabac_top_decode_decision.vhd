-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_decode_decision is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init_offset : IN STD_LOGIC;
    mode_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    state_ivlCurrRange_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    state_ivlOffset_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_read : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_n_bits_held_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_read : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctxAddr_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    ctxTables_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ctxTables_ce0 : OUT STD_LOGIC;
    ctxTables_we0 : OUT STD_LOGIC;
    ctxTables_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctxTables_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cabac_top_decode_decision is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lpsTable_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lpsTable_ce0 : STD_LOGIC;
    signal lpsTable_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal transMPS_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transMPS_ce0 : STD_LOGIC;
    signal transMPS_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transLPS_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transLPS_ce0 : STD_LOGIC;
    signal transLPS_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mode_offset_read_read_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctxTables_addr_reg_810 : STD_LOGIC_VECTOR (8 downto 0);
    signal ctxState_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln34_1_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_1_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln229_1_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln229_1_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln1076_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1076_1_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1076_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1076_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1076_2_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1076_2_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln13_1_fu_677_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_1_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_12_fu_685_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_12_reg_883 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1543_fu_713_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln1543_reg_888 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_893 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln70_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ret_1_fu_753_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_idle : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_ready : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out_ap_vld : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out_ap_vld : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out_ap_vld : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out_ap_vld : STD_LOGIC;
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out_ap_vld : STD_LOGIC;
    signal state_ivlCurrRange_V_read_assign_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_offset_read_read_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_bstate_currIdx_read_assign_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_n_bits_held_read_assign_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_held_aligned_word_read_assign_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln11_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlOffset_V_read_assign_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlCurrRange_1_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_currIdx_2_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_n_bits_held_2_reg_318 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_held_aligned_word_2_reg_327 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_binVal_1_phi_fu_339_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal binVal_1_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlOffset_2_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln17_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal retVal_2_fu_385_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pState_fu_403_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal qRangeIdx_fu_413_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_423_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1076_1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valMps_fu_451_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1076_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1076_1_fu_483_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln229_2_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln23_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_14_fu_605_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal retVal_14_fu_605_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln24_fu_595_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_565_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_639_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_10_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_11_fu_655_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_4_fu_631_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln11_1_fu_659_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1543_fu_701_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_705_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal retVal_15_fu_693_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_fu_729_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_bstate_n_bits_held_read_assign : IN STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_held_aligned_word_read_assign : IN STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_currIdx_read_assign : IN STD_LOGIC_VECTOR (31 downto 0);
        select_ln1076_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        select_ln1076 : IN STD_LOGIC_VECTOR (31 downto 0);
        bStream_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        bStream1_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_n_bits_held_0_i_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_n_bits_held_0_i_out_ap_vld : OUT STD_LOGIC;
        state_bstate_held_aligned_word_0_i_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_held_aligned_word_0_i_out_ap_vld : OUT STD_LOGIC;
        state_bstate_currIdx_0_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_bstate_currIdx_0_i_out_ap_vld : OUT STD_LOGIC;
        phi_ln59_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        phi_ln59_out_ap_vld : OUT STD_LOGIC;
        state_ivlCurrRange_1_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_ivlCurrRange_1_i_out_ap_vld : OUT STD_LOGIC );
    end component;


    component cabac_top_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_decode_decision_lpsTable_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_decode_decision_transMPS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cabac_top_decode_decision_transLPS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    lpsTable_U : component cabac_top_decode_decision_lpsTable_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lpsTable_address0,
        ce0 => lpsTable_ce0,
        q0 => lpsTable_q0);

    transMPS_U : component cabac_top_decode_decision_transMPS_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transMPS_address0,
        ce0 => transMPS_ce0,
        q0 => transMPS_q0);

    transLPS_U : component cabac_top_decode_decision_transLPS_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transLPS_address0,
        ce0 => transLPS_ce0,
        q0 => transLPS_q0);

    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354 : component cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start,
        ap_done => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done,
        ap_idle => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_idle,
        ap_ready => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_ready,
        state_bstate_n_bits_held_read_assign => state_bstate_n_bits_held_read_assign_reg_264,
        state_bstate_held_aligned_word_read_assign => state_bstate_held_aligned_word_read_assign_reg_276,
        state_bstate_currIdx_read_assign => state_bstate_currIdx_read_assign_reg_252,
        select_ln1076_2 => select_ln1076_2_reg_868,
        select_ln1076 => select_ln1076_reg_863,
        bStream_load_2 => bStream,
        bStream1_load_2 => bStream1,
        p_read => p_read,
        p_read1 => p_read1,
        state_bstate_n_bits_held_0_i_out => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out,
        state_bstate_n_bits_held_0_i_out_ap_vld => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out_ap_vld,
        state_bstate_held_aligned_word_0_i_out => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out,
        state_bstate_held_aligned_word_0_i_out_ap_vld => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out_ap_vld,
        state_bstate_currIdx_0_i_out => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out,
        state_bstate_currIdx_0_i_out_ap_vld => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out_ap_vld,
        phi_ln59_out => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out,
        phi_ln59_out_ap_vld => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out_ap_vld,
        state_ivlCurrRange_1_i_out => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out,
        state_ivlCurrRange_1_i_out_ap_vld => grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out_ap_vld);

    mux_42_8_1_1_U37 : component cabac_top_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => bStream,
        din1 => bStream1,
        din2 => p_read,
        din3 => p_read1,
        din4 => retVal_14_fu_605_p5,
        dout => retVal_14_fu_605_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_0_preg <= ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_1_preg <= ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_2_preg <= ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_3_preg <= ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_4_preg <= ap_phi_mux_binVal_1_phi_fu_339_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_5_preg <= ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_ready = ap_const_logic_1)) then 
                    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    binVal_1_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                binVal_1_reg_336 <= xor_ln1076_1_reg_858;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                binVal_1_reg_336 <= xor_ln70_fu_747_p2;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_2_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                state_bstate_currIdx_2_reg_309 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                state_bstate_currIdx_2_reg_309 <= select_ln13_reg_873;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_read_assign_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((init_offset_read_read_fu_168_p2 = ap_const_lv1_0)) then 
                    state_bstate_currIdx_read_assign_reg_252 <= state_bstate_currIdx_read;
                elsif ((init_offset_read_read_fu_168_p2 = ap_const_lv1_1)) then 
                    state_bstate_currIdx_read_assign_reg_252 <= ap_const_lv32_2;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_2_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                state_bstate_held_aligned_word_2_reg_327 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                state_bstate_held_aligned_word_2_reg_327 <= retVal_12_reg_883;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_read_assign_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((init_offset_read_read_fu_168_p2 = ap_const_lv1_0)) then 
                    state_bstate_held_aligned_word_read_assign_reg_276 <= state_bstate_held_aligned_word_read;
                elsif ((init_offset_read_read_fu_168_p2 = ap_const_lv1_1)) then 
                    state_bstate_held_aligned_word_read_assign_reg_276 <= bStream1;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_2_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                state_bstate_n_bits_held_2_reg_318 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                state_bstate_n_bits_held_2_reg_318 <= select_ln13_1_reg_878;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_read_assign_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((init_offset_read_read_fu_168_p2 = ap_const_lv1_0)) then 
                    state_bstate_n_bits_held_read_assign_reg_264 <= state_bstate_n_bits_held_read;
                elsif ((init_offset_read_read_fu_168_p2 = ap_const_lv1_1)) then 
                    state_bstate_n_bits_held_read_assign_reg_264 <= ap_const_lv8_7;
                end if;
            end if; 
        end if;
    end process;

    state_ivlCurrRange_1_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                state_ivlCurrRange_1_reg_299 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                state_ivlCurrRange_1_reg_299 <= state_ivlCurrRange_V_read_assign_reg_240;
            end if; 
        end if;
    end process;

    state_ivlCurrRange_V_read_assign_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((init_offset_read_read_fu_168_p2 = ap_const_lv1_0)) then 
                    state_ivlCurrRange_V_read_assign_reg_240 <= state_ivlCurrRange_V_read;
                elsif ((init_offset_read_read_fu_168_p2 = ap_const_lv1_1)) then 
                    state_ivlCurrRange_V_read_assign_reg_240 <= ap_const_lv32_1FE;
                end if;
            end if; 
        end if;
    end process;

    state_ivlOffset_2_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                state_ivlOffset_2_reg_345 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                state_ivlOffset_2_reg_345 <= ret_1_fu_753_p3;
            end if; 
        end if;
    end process;

    state_ivlOffset_V_read_assign_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                if ((init_offset_read_read_fu_168_p2 = ap_const_lv1_0)) then 
                    state_ivlOffset_V_read_assign_reg_288 <= state_ivlOffset_V_read;
                elsif ((init_offset_read_read_fu_168_p2 = ap_const_lv1_1)) then 
                    state_ivlOffset_V_read_assign_reg_288 <= zext_ln11_fu_393_p1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ctxState_reg_815 <= ctxTables_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ctxTables_addr_reg_810(0) <= zext_ln17_fu_398_p1(9 - 1 downto 0)(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                or_ln1543_reg_888 <= or_ln1543_fu_713_p2;
                retVal_12_reg_883 <= retVal_12_fu_685_p3;
                select_ln13_1_reg_878 <= select_ln13_1_fu_677_p3;
                select_ln13_reg_873 <= select_ln13_fu_669_p3;
                tmp_1_reg_893 <= state_ivlOffset_V_read_assign_reg_288(30 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln1076_2_reg_868 <= select_ln1076_2_fu_496_p3;
                select_ln1076_reg_863 <= select_ln1076_fu_476_p3;
                xor_ln1076_1_reg_858 <= xor_ln1076_1_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sub_ln229_1_reg_831 <= sub_ln229_1_fu_440_p2;
                    zext_ln34_1_reg_826(7 downto 0) <= zext_ln34_1_fu_436_p1(7 downto 0);
            end if;
        end if;
    end process;
    ctxTables_addr_reg_810(8 downto 1) <= "00000000";
    zext_ln34_1_reg_826(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mode_offset_read_read_fu_162_p2, grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln14_fu_639_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_565_p1) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_663_p2 <= std_logic_vector(unsigned(state_bstate_n_bits_held_read_assign_reg_264) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_617_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_read_assign_reg_252) + unsigned(ap_const_lv32_1));
    and_ln24_fu_595_p2 <= (xor_ln23_fu_589_p2 and state_bstate_held_aligned_word_read_assign_reg_276);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done)
    begin
        if ((grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_binVal_1_phi_fu_339_p4_assign_proc : process(mode_offset_read_read_fu_162_p2, xor_ln1076_1_reg_858, ap_CS_fsm_state6, binVal_1_reg_336)
    begin
        if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_binVal_1_phi_fu_339_p4 <= xor_ln1076_1_reg_858;
        else 
            ap_phi_mux_binVal_1_phi_fu_339_p4 <= binVal_1_reg_336;
        end if; 
    end process;


    ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4_assign_proc : process(mode_offset_read_read_fu_162_p2, grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out, ap_CS_fsm_state6, state_bstate_currIdx_2_reg_309)
    begin
        if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_currIdx_0_i_out;
        else 
            ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4 <= state_bstate_currIdx_2_reg_309;
        end if; 
    end process;


    ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4_assign_proc : process(mode_offset_read_read_fu_162_p2, grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out, ap_CS_fsm_state6, state_bstate_held_aligned_word_2_reg_327)
    begin
        if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_held_aligned_word_0_i_out;
        else 
            ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4 <= state_bstate_held_aligned_word_2_reg_327;
        end if; 
    end process;


    ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4_assign_proc : process(mode_offset_read_read_fu_162_p2, grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out, ap_CS_fsm_state6, state_bstate_n_bits_held_2_reg_318)
    begin
        if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_bstate_n_bits_held_0_i_out;
        else 
            ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4 <= state_bstate_n_bits_held_2_reg_318;
        end if; 
    end process;


    ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4_assign_proc : process(mode_offset_read_read_fu_162_p2, grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out, state_ivlCurrRange_1_reg_299, ap_CS_fsm_state6)
    begin
        if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_state_ivlCurrRange_1_i_out;
        else 
            ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4 <= state_ivlCurrRange_1_reg_299;
        end if; 
    end process;


    ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4_assign_proc : process(mode_offset_read_read_fu_162_p2, grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out, ap_CS_fsm_state6, state_ivlOffset_2_reg_345)
    begin
        if (((mode_offset_read_read_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4 <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_phi_ln59_out;
        else 
            ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4 <= state_ivlOffset_2_reg_345;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4, ap_CS_fsm_state6, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_0 <= ap_phi_mux_state_ivlCurrRange_1_phi_fu_302_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state6, ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_1 <= ap_phi_mux_state_bstate_currIdx_2_phi_fu_312_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state6, ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_2 <= ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_321_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state6, ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_3 <= ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_330_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state6, ap_phi_mux_binVal_1_phi_fu_339_p4, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_4 <= ap_phi_mux_binVal_1_phi_fu_339_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state6, ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_5 <= ap_phi_mux_state_ivlOffset_2_phi_fu_348_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ctxTables_address0_assign_proc : process(ap_CS_fsm_state1, ctxTables_addr_reg_810, ap_CS_fsm_state4, zext_ln17_fu_398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctxTables_address0 <= ctxTables_addr_reg_810;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctxTables_address0 <= zext_ln17_fu_398_p1(9 - 1 downto 0);
        else 
            ctxTables_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    ctxTables_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ctxTables_ce0 <= ap_const_logic_1;
        else 
            ctxTables_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ctxTables_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1076_1_fu_483_p3),8));

    ctxTables_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctxTables_we0 <= ap_const_logic_1;
        else 
            ctxTables_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start <= grp_decode_decision_Pipeline_VITIS_LOOP_53_1_fu_354_ap_start_reg;
    icmp_ln1076_1_fu_454_p2 <= "1" when (unsigned(sub_ln229_1_reg_831) > unsigned(state_ivlOffset_V_read_assign_reg_288)) else "0";
    icmp_ln1076_fu_735_p2 <= "1" when (unsigned(ret_fu_729_p3) < unsigned(state_ivlCurrRange_V_read_assign_reg_240)) else "0";
    icmp_ln13_fu_569_p2 <= "1" when (state_bstate_n_bits_held_read_assign_reg_264 = ap_const_lv8_0) else "0";
    init_offset_read_read_fu_168_p2 <= (0=>init_offset, others=>'-');
    lpsTable_address0 <= zext_ln34_fu_431_p1(8 - 1 downto 0);

    lpsTable_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lpsTable_ce0 <= ap_const_logic_1;
        else 
            lpsTable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mode_offset_read_read_fu_162_p2 <= mode_offset;
    or_ln1543_fu_713_p2 <= (shl_ln_fu_705_p3 or retVal_15_fu_693_p3);
    pState_fu_403_p4 <= ctxTables_q0(6 downto 1);
    qRangeIdx_fu_413_p4 <= state_ivlCurrRange_V_read_assign_reg_240(7 downto 6);
    retVal_10_fu_649_p2 <= std_logic_vector(shift_right(unsigned(zext_ln14_fu_575_p1),to_integer(unsigned('0' & sext_ln14_fu_645_p1(31-1 downto 0)))));
    retVal_11_fu_655_p1 <= retVal_10_fu_649_p2(1 - 1 downto 0);
    retVal_12_fu_685_p3 <= 
        retVal_14_fu_605_p6 when (icmp_ln13_fu_569_p2(0) = '1') else 
        state_bstate_held_aligned_word_read_assign_reg_276;
    retVal_14_fu_605_p5 <= state_bstate_currIdx_read_assign_reg_252(2 - 1 downto 0);
    retVal_15_fu_693_p3 <= 
        retVal_4_fu_631_p3 when (icmp_ln13_fu_569_p2(0) = '1') else 
        zext_ln11_1_fu_659_p1;
    retVal_2_fu_385_p3 <= (bStream & tmp_fu_377_p3);
    retVal_4_fu_631_p3 <= (and_ln24_fu_595_p2 & tmp_2_fu_623_p3);
    ret_1_fu_753_p3 <= 
        ret_fu_729_p3 when (icmp_ln1076_fu_735_p2(0) = '1') else 
        sub_ln229_fu_741_p2;
    ret_fu_729_p3 <= (tmp_1_reg_893 & or_ln1543_reg_888);
    select_ln1076_1_fu_483_p3 <= 
        transMPS_q0 when (icmp_ln1076_1_fu_454_p2(0) = '1') else 
        transLPS_q0;
    select_ln1076_2_fu_496_p3 <= 
        state_ivlOffset_V_read_assign_reg_288 when (icmp_ln1076_1_fu_454_p2(0) = '1') else 
        sub_ln229_2_fu_459_p2;
    select_ln1076_fu_476_p3 <= 
        sub_ln229_1_reg_831 when (icmp_ln1076_1_fu_454_p2(0) = '1') else 
        zext_ln34_1_reg_826;
    select_ln13_1_fu_677_p3 <= 
        ap_const_lv8_7 when (icmp_ln13_fu_569_p2(0) = '1') else 
        add_ln16_fu_663_p2;
    select_ln13_fu_669_p3 <= 
        add_ln6_fu_617_p2 when (icmp_ln13_fu_569_p2(0) = '1') else 
        state_bstate_currIdx_read_assign_reg_252;
        sext_ln14_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_639_p2),32));

    shl_ln23_fu_579_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FF),to_integer(unsigned('0' & zext_ln13_fu_561_p1(31-1 downto 0)))));
    shl_ln_fu_705_p3 <= (trunc_ln1543_fu_701_p1 & ap_const_lv1_0);
    sub_ln229_1_fu_440_p2 <= std_logic_vector(unsigned(state_ivlCurrRange_V_read_assign_reg_240) - unsigned(zext_ln34_1_fu_436_p1));
    sub_ln229_2_fu_459_p2 <= std_logic_vector(unsigned(state_ivlOffset_V_read_assign_reg_288) - unsigned(sub_ln229_1_reg_831));
    sub_ln229_fu_741_p2 <= std_logic_vector(unsigned(ret_fu_729_p3) - unsigned(state_ivlCurrRange_V_read_assign_reg_240));
    tmp_2_fu_623_p3 <= retVal_14_fu_605_p6(7 downto 7);
    tmp_3_fu_423_p3 <= (pState_fu_403_p4 & qRangeIdx_fu_413_p4);
    tmp_fu_377_p3 <= bStream1(7 downto 7);
    transLPS_address0 <= zext_ln24_fu_446_p1(7 - 1 downto 0);

    transLPS_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            transLPS_ce0 <= ap_const_logic_1;
        else 
            transLPS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    transMPS_address0 <= zext_ln24_fu_446_p1(7 - 1 downto 0);

    transMPS_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            transMPS_ce0 <= ap_const_logic_1;
        else 
            transMPS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1543_fu_701_p1 <= state_ivlOffset_V_read_assign_reg_288(8 - 1 downto 0);
    trunc_ln23_fu_585_p1 <= shl_ln23_fu_579_p2(8 - 1 downto 0);
    valMps_fu_451_p1 <= ctxState_reg_815(1 - 1 downto 0);
    xor_ln1076_1_fu_470_p2 <= (xor_ln1076_fu_464_p2 xor valMps_fu_451_p1);
    xor_ln1076_fu_464_p2 <= (icmp_ln1076_1_fu_454_p2 xor ap_const_lv1_1);
    xor_ln23_fu_589_p2 <= (trunc_ln23_fu_585_p1 xor ap_const_lv8_FF);
    xor_ln70_fu_747_p2 <= (icmp_ln1076_fu_735_p2 xor ap_const_lv1_1);
    zext_ln11_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_11_fu_655_p1),9));
    zext_ln11_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_2_fu_385_p3),32));
    zext_ln13_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_n_bits_held_read_assign_reg_264),9));
    zext_ln13_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_n_bits_held_read_assign_reg_264),32));
    zext_ln14_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_held_aligned_word_read_assign_reg_276),32));
    zext_ln17_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctxAddr_offset),64));
    zext_ln24_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctxState_reg_815),64));
    zext_ln34_1_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lpsTable_q0),32));
    zext_ln34_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_423_p3),64));
end behav;
