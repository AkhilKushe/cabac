#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_local_block", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_ctx_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_ctx_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_AWLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_ctx_AWSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_ctx_AWBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_ctx_AWLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_ctx_AWCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_ctx_AWPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_ctx_AWQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_ctx_AWREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_ctx_AWUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_ctx_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_WDATA", 32, hls_out, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_ctx_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_ctx_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_ctx_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_WUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_ctx_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_ctx_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_ARLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_ctx_ARSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_ctx_ARBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_ctx_ARLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_ctx_ARCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_ctx_ARPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_ctx_ARQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_ctx_ARREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_ctx_ARUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_ctx_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_RDATA", 32, hls_in, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_ctx_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_ctx_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_RUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_ctx_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_ctx_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_ctx_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_BUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("bitStream_TDATA", 8, hls_in, 2, "axis", "in_data", 1),
	Port_Property("bitStream_TVALID", 1, hls_in, 2, "axis", "in_vld", 1),
	Port_Property("bitStream_TREADY", 1, hls_out, 2, "axis", "in_acc", 1),
	Port_Property("bitOut_TDATA", 8, hls_in, 3, "axis", "in_data", 1),
	Port_Property("bitOut_TVALID", 1, hls_in, 3, "axis", "in_vld", 1),
	Port_Property("bitOut_TREADY", 1, hls_out, 3, "axis", "in_acc", 1),
	Port_Property("data_in_s_TDATA", 4096, hls_in, 4, "axis", "in_data", 1),
	Port_Property("data_in_s_TVALID", 1, hls_in, 4, "axis", "in_vld", 1),
	Port_Property("data_in_s_TREADY", 1, hls_out, 4, "axis", "in_acc", 1),
	Port_Property("data_out_s_TDATA", 336, hls_out, 5, "axis", "out_data", 1),
	Port_Property("data_out_s_TVALID", 1, hls_out, 5, "axis", "out_vld", 1),
	Port_Property("data_out_s_TREADY", 1, hls_in, 5, "axis", "out_acc", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 5, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "cabac_top";
