-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cabac_top_decode_regular_lpsTable_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 256
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cabac_top_decode_regular_lpsTable_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10000000", 1 => "10110000", 2 => "11010000", 3 => "11110000", 
    4 => "10000000", 5 => "10100111", 6 => "11000101", 7 => "11100011", 
    8 => "10000000", 9 => "10011110", 10 => "10111011", 11 => "11011000", 
    12 => "01111011", 13 => "10010110", 14 => "10110010", 15 => "11001101", 
    16 => "01110100", 17 => "10001110", 18 => "10101001", 19 => "11000011", 
    20 => "01101111", 21 => "10000111", 22 => "10100000", 23 => "10111001", 
    24 => "01101001", 25 => "10000000", 26 => "10011000", 27 => "10101111", 
    28 => "01100100", 29 => "01111010", 30 => "10010000", 31 => "10100110", 
    32 => "01011111", 33 => "01110100", 34 => "10001001", 35 => "10011110", 
    36 => "01011010", 37 => "01101110", 38 => "10000010", 39 => "10010110", 
    40 => "01010101", 41 => "01101000", 42 => "01111011", 43 => "10001110", 
    44 => "01010001", 45 => "01100011", 46 => "01110101", 47 => "10000111", 
    48 => "01001101", 49 => "01011110", 50 => "01101111", 51 => "10000000", 
    52 => "01001001", 53 => "01011001", 54 => "01101001", 55 => "01111010", 
    56 => "01000101", 57 => "01010101", 58 => "01100100", 59 => "01110100", 
    60 => "01000010", 61 => "01010000", 62 => "01011111", 63 => "01101110", 
    64 => "00111110", 65 => "01001100", 66 => "01011010", 67 => "01101000", 
    68 => "00111011", 69 => "01001000", 70 => "01010110", 71 => "01100011", 
    72 => "00111000", 73 => "01000101", 74 => "01010001", 75 => "01011110", 
    76 => "00110101", 77 => "01000001", 78 => "01001101", 79 => "01011001", 
    80 => "00110011", 81 => "00111110", 82 => "01001001", 83 => "01010101", 
    84 => "00110000", 85 => "00111011", 86 => "01000101", 87 => "01010000", 
    88 => "00101110", 89 => "00111000", 90 => "01000010", 91 => "01001100", 
    92 => "00101011", 93 => "00110101", 94 => "00111111", 95 => "01001000", 
    96 => "00101001", 97 => "00110010", 98 => "00111011", 99 => "01000101", 
    100 => "00100111", 101 => "00110000", 102 => "00111000", 103 => "01000001", 
    104 => "00100101", 105 => "00101101", 106 => "00110110", 107 => "00111110", 
    108 => "00100011", 109 => "00101011", 110 => "00110011", 111 => "00111011", 
    112 => "00100001", 113 => "00101001", 114 => "00110000", 115 => "00111000", 
    116 => "00100000", 117 => "00100111", 118 => "00101110", 119 => "00110101", 
    120 => "00011110", 121 => "00100101", 122 => "00101011", 123 => "00110010", 
    124 => "00011101", 125 => "00100011", 126 => "00101001", 127 => "00110000", 
    128 => "00011011", 129 => "00100001", 130 => "00100111", 131 => "00101101", 
    132 => "00011010", 133 => "00011111", 134 => "00100101", 135 => "00101011", 
    136 => "00011000", 137 => "00011110", 138 => "00100011", 139 => "00101001", 
    140 => "00010111", 141 => "00011100", 142 => "00100001", 143 => "00100111", 
    144 => "00010110", 145 => "00011011", 146 => "00100000", 147 => "00100101", 
    148 => "00010101", 149 => "00011010", 150 => "00011110", 151 => "00100011", 
    152 => "00010100", 153 => "00011000", 154 => "00011101", 155 => "00100001", 
    156 => "00010011", 157 => "00010111", 158 => "00011011", 159 => "00011111", 
    160 => "00010010", 161 => "00010110", 162 => "00011010", 163 => "00011110", 
    164 => "00010001", 165 => "00010101", 166 => "00011001", 167 => "00011100", 
    168 => "00010000", 169 => "00010100", 170 => "00010111", 171 => "00011011", 
    172 => "00001111", 173 => "00010011", 174 => "00010110", 175 => "00011001", 
    176 => "00001110", 177 => "00010010", 178 => "00010101", 179 => "00011000", 
    180 => "00001110", 181 => "00010001", 182 => "00010100", 183 => "00010111", 
    184 => "00001101", 185 => "00010000", 186 => "00010011", 187 => "00010110", 
    188 => "00001100", 189 => "00001111", 190 => "00010010", 191 => "00010101", 
    192 => "00001100", 193 => "00001110", 194 => "00010001", 195 => "00010100", 
    196 => "00001011", 197 => "00001110", 198 => "00010000", 199 => "00010011", 
    200 => "00001011", 201 => "00001101", 202 => "00001111", 203 => "00010010", 
    204 => "00001010", 205 => "00001100", 206 => "00001111", 207 => "00010001", 
    208 => "00001010", 209 => "00001100", 210 => "00001110", 211 => "00010000", 
    212 => "00001001", 213 => "00001011", 214 => "00001101", 215 => "00001111", 
    216 => "00001001", 217 => "00001011", 218 => "00001100", 219 => "00001110", 
    220 => "00001000", 221 => "00001010", 222 => "00001100", 223 => "00001110", 
    224 => "00001000", 225 => "00001001", 226 => "00001011", 227 => "00001101", 
    228 => "00000111", 229 => "00001001", 230 => "00001011", 231 => "00001100", 
    232 => "00000111", 233 => "00001001", 234 => "00001010", 235 => "00001100", 
    236 => "00000111", 237 => "00001000", 238 => "00001010", 239 => "00001011", 
    240 => "00000110", 241 => "00001000", 242 => "00001001", 243 => "00001011", 
    244 => "00000110", 245 => "00000111", 246 => "00001001", 247 => "00001010", 
    248 => "00000110", 249 => "00000111", 250 => "00001000", 251 => "00001001", 
    252 to 255=> "00000010" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

