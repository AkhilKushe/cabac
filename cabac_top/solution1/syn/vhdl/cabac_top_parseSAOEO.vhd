-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_parseSAOEO is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_ivlOffset_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_read : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_n_bits_held_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_read : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    baeState_0_constprop : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cabac_top_parseSAOEO is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln83_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln83_reg_461 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln13_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal retVal_16_fu_232_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal retVal_16_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_fu_293_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal retVal_fu_308_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_reg_129 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln5_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal binIdx_fu_68 : STD_LOGIC_VECTOR (1 downto 0);
    signal symbolVal_write_assign_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_ivlOffset_0_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_7_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_n_bits_held_0_fu_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_held_aligned_word_0_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_currIdx_0_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_216_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_15_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_304_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1543_fu_330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_334_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_348_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln1543_fu_342_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln82_fu_390_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal binVal_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    binIdx_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                binIdx_fu_68 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                binIdx_fu_68 <= add_ln83_reg_461;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_0_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                state_bstate_currIdx_0_fu_88 <= state_bstate_currIdx_read;
            elsif (((icmp_ln80_fu_190_p2 = ap_const_lv1_0) and (icmp_ln13_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_bstate_currIdx_0_fu_88 <= add_ln6_fu_252_p2;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_0_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                state_bstate_held_aligned_word_0_fu_84 <= state_bstate_held_aligned_word_read;
            elsif (((icmp_ln13_reg_466 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                state_bstate_held_aligned_word_0_fu_84 <= bStream_q0;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_0_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                state_bstate_n_bits_held_0_fu_80 <= state_bstate_n_bits_held_read;
            elsif (((icmp_ln80_fu_190_p2 = ap_const_lv1_0) and (icmp_ln13_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_bstate_n_bits_held_0_fu_80 <= add_ln16_fu_236_p2;
            elsif (((icmp_ln13_reg_466 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                state_bstate_n_bits_held_0_fu_80 <= ap_const_lv8_7;
            end if; 
        end if;
    end process;

    state_ivlOffset_0_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                state_ivlOffset_0_fu_76 <= state_ivlOffset_V_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                state_ivlOffset_0_fu_76 <= ret_7_fu_376_p3;
            end if; 
        end if;
    end process;

    symbolVal_write_assign_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                symbolVal_write_assign_fu_72 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                symbolVal_write_assign_fu_72 <= or_ln_fu_394_p3;
            end if; 
        end if;
    end process;

    val_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                if ((icmp_ln13_reg_466 = ap_const_lv1_0)) then 
                                        val_reg_129(0) <= zext_ln11_fu_293_p1(0);
                elsif ((icmp_ln13_reg_466 = ap_const_lv1_1)) then 
                                        val_reg_129(0) <= retVal_fu_308_p3(0);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln83_reg_461 <= add_ln83_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln13_reg_466 <= icmp_ln13_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_190_p2 = ap_const_lv1_0) and (icmp_ln13_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                retVal_16_reg_470 <= retVal_16_fu_232_p1;
            end if;
        end if;
    end process;
    val_reg_129(8 downto 1) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln80_fu_190_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln80_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln14_fu_216_p2 <= std_logic_vector(unsigned(zext_ln13_fu_202_p1) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_236_p2 <= std_logic_vector(unsigned(state_bstate_n_bits_held_0_fu_80) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_252_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_0_fu_88) + unsigned(ap_const_lv32_1));
    add_ln83_fu_196_p2 <= std_logic_vector(unsigned(binIdx_fu_68) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln80_fu_190_p2)
    begin
        if ((((icmp_ln80_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln80_fu_190_p2)
    begin
        if (((icmp_ln80_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= state_ivlOffset_0_fu_76;
    ap_return_1 <= state_bstate_currIdx_0_fu_88;
    ap_return_2 <= state_bstate_n_bits_held_0_fu_80;
    ap_return_3 <= state_bstate_held_aligned_word_0_fu_84;
    ap_return_4 <= symbolVal_write_assign_fu_72;
    bStream_address0 <= zext_ln5_fu_247_p1(3 - 1 downto 0);

    bStream_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bStream_ce0 <= ap_const_logic_1;
        else 
            bStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    binVal_fu_384_p2 <= (icmp_ln1076_fu_366_p2 xor ap_const_lv1_1);
    icmp_ln1076_fu_366_p2 <= "1" when (unsigned(ret_fu_358_p3) < unsigned(baeState_0_constprop)) else "0";
    icmp_ln13_fu_206_p2 <= "1" when (state_bstate_n_bits_held_0_fu_80 = ap_const_lv8_0) else "0";
    icmp_ln80_fu_190_p2 <= "1" when (binIdx_fu_68 = ap_const_lv2_2) else "0";
    or_ln1543_fu_342_p2 <= (val_reg_129 or shl_ln_fu_334_p3);
    or_ln_fu_394_p3 <= (trunc_ln82_fu_390_p1 & binVal_fu_384_p2);
    retVal_15_fu_226_p2 <= std_logic_vector(shift_right(unsigned(zext_ln14_fu_212_p1),to_integer(unsigned('0' & sext_ln14_fu_222_p1(31-1 downto 0)))));
    retVal_16_fu_232_p1 <= retVal_15_fu_226_p2(1 - 1 downto 0);
    retVal_fu_308_p3 <= (ap_const_lv1_0 & zext_ln42_fu_304_p1);
    ret_7_fu_376_p3 <= 
        ret_fu_358_p3 when (icmp_ln1076_fu_366_p2(0) = '1') else 
        sub_ln229_fu_371_p2;
    ret_fu_358_p3 <= (tmp_s_fu_348_p4 & or_ln1543_fu_342_p2);
        sext_ln14_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_216_p2),32));

    shl_ln_fu_334_p3 <= (trunc_ln1543_fu_330_p1 & ap_const_lv1_0);
    sub_ln229_fu_371_p2 <= std_logic_vector(unsigned(ret_fu_358_p3) - unsigned(baeState_0_constprop));
    tmp_fu_296_p3 <= bStream_q0(7 downto 7);
    tmp_s_fu_348_p4 <= state_ivlOffset_0_fu_76(30 downto 8);
    trunc_ln1543_fu_330_p1 <= state_ivlOffset_0_fu_76(8 - 1 downto 0);
    trunc_ln82_fu_390_p1 <= symbolVal_write_assign_fu_72(31 - 1 downto 0);
    zext_ln11_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_16_reg_470),9));
    zext_ln13_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_n_bits_held_0_fu_80),9));
    zext_ln14_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_held_aligned_word_0_fu_84),32));
    zext_ln42_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_296_p3),8));
    zext_ln5_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_currIdx_0_fu_88),64));
end behav;
