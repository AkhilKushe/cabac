-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_parseSAOMergeFlag is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_1_read : IN STD_LOGIC_VECTOR (30 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    baeState_0_constprop : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of cabac_top_parseSAOMergeFlag is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shl_ln_fu_139_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_325 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln13_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal retVal_12_fu_177_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal retVal_12_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_fu_186_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln16_fu_189_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln6_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_fu_211_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_369 : STD_LOGIC_VECTOR (22 downto 0);
    signal state_bstate_n_bits_held_write_assign_reg_97 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln49_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_0_0_reg_117 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_126 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln5_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln1543_fu_135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln13_fu_147_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_161_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_11_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_199_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1543_fu_228_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln44_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln95_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_6_fu_256_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_0_preg <= state_2_0_0_reg_117;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                                        ap_return_1_preg(0) <= zext_ln95_fu_270_p1(0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_2_preg <= ret_6_fu_256_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_3_preg <= state_bstate_n_bits_held_write_assign_reg_97;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_4_preg <= phi_ln49_reg_108;
                end if; 
            end if;
        end if;
    end process;


    phi_ln49_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((icmp_ln13_reg_330 = ap_const_lv1_0)) then 
                    phi_ln49_reg_108 <= p_read3;
                elsif ((icmp_ln13_reg_330 = ap_const_lv1_1)) then 
                    phi_ln49_reg_108 <= bStream_q0;
                end if;
            end if; 
        end if;
    end process;

    state_2_0_0_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((icmp_ln13_reg_330 = ap_const_lv1_0)) then 
                    state_2_0_0_reg_117 <= p_read1;
                elsif ((icmp_ln13_reg_330 = ap_const_lv1_1)) then 
                    state_2_0_0_reg_117 <= add_ln6_fu_194_p2;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_write_assign_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((icmp_ln13_reg_330 = ap_const_lv1_0)) then 
                    state_bstate_n_bits_held_write_assign_reg_97 <= add_ln16_fu_189_p2;
                elsif ((icmp_ln13_reg_330 = ap_const_lv1_1)) then 
                    state_bstate_n_bits_held_write_assign_reg_97 <= ap_const_lv8_7;
                end if;
            end if; 
        end if;
    end process;

    val_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                if ((icmp_ln13_reg_330 = ap_const_lv1_0)) then 
                                        val_reg_126(0) <= zext_ln11_fu_186_p1(0);
                elsif ((icmp_ln13_reg_330 = ap_const_lv1_1)) then 
                                        val_reg_126(0) <= retVal_fu_211_p3(0);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln13_reg_330 <= icmp_ln13_fu_151_p2;
                    shl_ln_reg_325(8 downto 1) <= shl_ln_fu_139_p3(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                retVal_12_reg_334 <= retVal_12_fu_177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_s_reg_369 <= state_1_read(30 downto 8);
            end if;
        end if;
    end process;
    shl_ln_reg_325(0) <= '0';
    val_reg_126(8 downto 1) <= "00000000";
    ap_return_1_preg(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln14_fu_161_p2 <= std_logic_vector(unsigned(zext_ln13_fu_147_p1) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_189_p2 <= std_logic_vector(unsigned(state_2_1_read) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_194_p2 <= std_logic_vector(unsigned(p_read1) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(state_2_0_0_reg_117, ap_CS_fsm_state3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_0 <= state_2_0_0_reg_117;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, zext_ln95_fu_270_p1, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_1 <= zext_ln95_fu_270_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state3, ret_6_fu_256_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_2 <= ret_6_fu_256_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(state_bstate_n_bits_held_write_assign_reg_97, ap_CS_fsm_state3, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_3 <= state_bstate_n_bits_held_write_assign_reg_97;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(phi_ln49_reg_108, ap_CS_fsm_state3, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_4 <= phi_ln49_reg_108;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    bStream_address0 <= zext_ln5_fu_181_p1(3 - 1 downto 0);

    bStream_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bStream_ce0 <= ap_const_logic_1;
        else 
            bStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1076_fu_244_p2 <= "1" when (unsigned(ret_fu_233_p3) < unsigned(baeState_0_constprop)) else "0";
    icmp_ln13_fu_151_p2 <= "1" when (state_2_1_read = ap_const_lv8_0) else "0";
    or_ln1543_fu_228_p2 <= (val_reg_126 or shl_ln_reg_325);
    retVal_11_fu_171_p2 <= std_logic_vector(shift_right(unsigned(zext_ln14_fu_157_p1),to_integer(unsigned('0' & sext_ln14_fu_167_p1(31-1 downto 0)))));
    retVal_12_fu_177_p1 <= retVal_11_fu_171_p2(1 - 1 downto 0);
    retVal_fu_211_p3 <= (ap_const_lv1_0 & zext_ln42_fu_207_p1);
    ret_6_fu_256_p3 <= 
        ret_fu_233_p3 when (icmp_ln1076_fu_244_p2(0) = '1') else 
        sub_ln229_fu_250_p2;
    ret_fu_233_p3 <= (tmp_s_reg_369 & or_ln1543_fu_228_p2);
        sext_ln14_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_161_p2),32));

    shl_ln_fu_139_p3 <= (trunc_ln1543_fu_135_p1 & ap_const_lv1_0);
    sub_ln229_fu_250_p2 <= std_logic_vector(unsigned(ret_fu_233_p3) - unsigned(baeState_0_constprop));
    tmp_fu_199_p3 <= bStream_q0(7 downto 7);
    trunc_ln1543_fu_135_p1 <= state_1_read(8 - 1 downto 0);
    xor_ln44_fu_264_p2 <= (icmp_ln1076_fu_244_p2 xor ap_const_lv1_1);
    zext_ln11_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_12_reg_334),9));
    zext_ln13_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_1_read),9));
    zext_ln14_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_2_2_read),32));
    zext_ln42_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_199_p3),8));
    zext_ln5_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),64));
    zext_ln95_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln44_fu_264_p2),32));
end behav;
