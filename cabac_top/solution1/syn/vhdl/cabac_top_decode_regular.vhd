-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_decode_regular is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctxTables_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ctxTables_ce0 : OUT STD_LOGIC;
    ctxTables_we0 : OUT STD_LOGIC;
    ctxTables_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctxTables_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    baeState_0_constprop_i : IN STD_LOGIC_VECTOR (31 downto 0);
    baeState_0_constprop_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    baeState_0_constprop_o_ap_vld : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cabac_top_decode_regular is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lpsTable_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lpsTable_ce0 : STD_LOGIC;
    signal lpsTable_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal transMPS_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transMPS_ce0 : STD_LOGIC;
    signal transMPS_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transLPS_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal transLPS_ce0 : STD_LOGIC;
    signal transLPS_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ctxTables_addr_reg_387 : STD_LOGIC_VECTOR (8 downto 0);
    signal ctxState_reg_392 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal valMps_fu_218_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal valMps_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ivlLpsRange_reg_411 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln34_1_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_1_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln229_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln229_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1076_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_idle : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_ready : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_ce0 : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out_ap_vld : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out_ap_vld : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out_ap_vld : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out_ap_vld : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out_ap_vld : STD_LOGIC;
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld : STD_LOGIC;
    signal write_flag2_0_reg_145 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln229_1_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal binVal_0_reg_177 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_187 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal write_flag2_1_loc_fu_56 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal pState_fu_222_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal qRangeIdx_fu_236_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        write_flag2_0 : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_41 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bStream_ce0 : OUT STD_LOGIC;
        bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_held_aligned_word_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_held_aligned_word_0_out_ap_vld : OUT STD_LOGIC;
        state_bstate_n_bits_held_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_bstate_n_bits_held_0_out_ap_vld : OUT STD_LOGIC;
        write_flag2_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        write_flag2_1_out_ap_vld : OUT STD_LOGIC;
        state_bstate_currIdx_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_bstate_currIdx_0_out_ap_vld : OUT STD_LOGIC;
        state_ivlOffset_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        state_ivlOffset_1_out_ap_vld : OUT STD_LOGIC;
        baeState_0_constprop : OUT STD_LOGIC_VECTOR (31 downto 0);
        baeState_0_constprop_ap_vld : OUT STD_LOGIC );
    end component;


    component cabac_top_decode_regular_lpsTable_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_decode_regular_transMPS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component cabac_top_decode_regular_transLPS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    lpsTable_U : component cabac_top_decode_regular_lpsTable_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lpsTable_address0,
        ce0 => lpsTable_ce0,
        q0 => lpsTable_q0);

    transMPS_U : component cabac_top_decode_regular_transMPS_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transMPS_address0,
        ce0 => transMPS_ce0,
        q0 => transMPS_q0);

    transLPS_U : component cabac_top_decode_regular_transLPS_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => transLPS_address0,
        ce0 => transLPS_ce0,
        q0 => transLPS_q0);

    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196 : component cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start,
        ap_done => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done,
        ap_idle => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_idle,
        ap_ready => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_ready,
        p_read5 => p_read5,
        p_read4 => p_read4,
        write_flag2_0 => write_flag2_0_reg_145,
        p_read1 => p_read1,
        empty_41 => empty_54_reg_167,
        empty => empty_reg_157,
        bStream_address0 => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_address0,
        bStream_ce0 => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_ce0,
        bStream_q0 => bStream_q0,
        state_bstate_held_aligned_word_0_out => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out,
        state_bstate_held_aligned_word_0_out_ap_vld => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out_ap_vld,
        state_bstate_n_bits_held_0_out => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out,
        state_bstate_n_bits_held_0_out_ap_vld => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out_ap_vld,
        write_flag2_1_out => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out,
        write_flag2_1_out_ap_vld => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out_ap_vld,
        state_bstate_currIdx_0_out => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out,
        state_bstate_currIdx_0_out_ap_vld => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out_ap_vld,
        state_ivlOffset_1_out => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out,
        state_ivlOffset_1_out_ap_vld => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out_ap_vld,
        baeState_0_constprop => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop,
        baeState_0_constprop_ap_vld => grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_ready = ap_const_logic_1)) then 
                    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    binVal_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((icmp_ln1076_reg_449 = ap_const_lv1_0)) then 
                    binVal_0_reg_177 <= xor_ln40_fu_290_p2;
                elsif ((icmp_ln1076_reg_449 = ap_const_lv1_1)) then 
                    binVal_0_reg_177 <= valMps_reg_397;
                end if;
            end if; 
        end if;
    end process;

    empty_54_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((icmp_ln1076_reg_449 = ap_const_lv1_0)) then 
                    empty_54_reg_167 <= sub_ln229_1_fu_295_p2;
                elsif ((icmp_ln1076_reg_449 = ap_const_lv1_1)) then 
                    empty_54_reg_167 <= p_read;
                end if;
            end if; 
        end if;
    end process;

    empty_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((icmp_ln1076_reg_449 = ap_const_lv1_0)) then 
                    empty_reg_157 <= zext_ln34_1_reg_438;
                elsif ((icmp_ln1076_reg_449 = ap_const_lv1_1)) then 
                    empty_reg_157 <= sub_ln229_reg_443;
                end if;
            end if; 
        end if;
    end process;

    storemerge_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((icmp_ln1076_reg_449 = ap_const_lv1_0)) then 
                    storemerge_reg_187 <= transLPS_q0;
                elsif ((icmp_ln1076_reg_449 = ap_const_lv1_1)) then 
                    storemerge_reg_187 <= transMPS_q0;
                end if;
            end if; 
        end if;
    end process;

    write_flag2_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                if ((icmp_ln1076_reg_449 = ap_const_lv1_0)) then 
                    write_flag2_0_reg_145 <= ap_const_lv1_1;
                elsif ((icmp_ln1076_reg_449 = ap_const_lv1_1)) then 
                    write_flag2_0_reg_145 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ctxState_reg_392 <= ctxTables_q0;
                valMps_reg_397 <= valMps_fu_218_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln1076_reg_449 <= icmp_ln1076_fu_273_p2;
                sub_ln229_reg_443 <= sub_ln229_fu_262_p2;
                    zext_ln34_1_reg_438(7 downto 0) <= zext_ln34_1_fu_259_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ivlLpsRange_reg_411 <= lpsTable_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out_ap_vld = ap_const_logic_1))) then
                write_flag2_1_loc_fu_56 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out;
            end if;
        end if;
    end process;
    zext_ln34_1_reg_438(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done)
    begin
        if ((grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out;
    ap_return_1 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out;
    ap_return_2 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out;
    ap_return_3 <= binVal_0_reg_177;
    ap_return_4 <= select_ln65_fu_320_p3;
    bStream_address0 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_address0;
    bStream_ce0 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_ce0;

    baeState_0_constprop_o_assign_proc : process(baeState_0_constprop_i, ap_CS_fsm_state4, zext_ln34_1_fu_259_p1, sub_ln229_fu_262_p2, icmp_ln1076_fu_273_p2, grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop, grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1076_fu_273_p2 = ap_const_lv1_0))) then 
            baeState_0_constprop_o <= zext_ln34_1_fu_259_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            baeState_0_constprop_o <= sub_ln229_fu_262_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld = ap_const_logic_1))) then 
            baeState_0_constprop_o <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop;
        else 
            baeState_0_constprop_o <= baeState_0_constprop_i;
        end if; 
    end process;


    baeState_0_constprop_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, icmp_ln1076_fu_273_p2, grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1076_fu_273_p2 = ap_const_lv1_0)))) then 
            baeState_0_constprop_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            baeState_0_constprop_o_ap_vld <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld;
        else 
            baeState_0_constprop_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ctxTables_addr_reg_387 <= ap_const_lv64_1(9 - 1 downto 0);

    ctxTables_address0_assign_proc : process(ap_CS_fsm_state1, ctxTables_addr_reg_387, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctxTables_address0 <= ctxTables_addr_reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctxTables_address0 <= ap_const_lv64_1(9 - 1 downto 0);
        else 
            ctxTables_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    ctxTables_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done = ap_const_logic_1)))) then 
            ctxTables_ce0 <= ap_const_logic_1;
        else 
            ctxTables_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ctxTables_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_reg_187),8));

    ctxTables_we0_assign_proc : process(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done = ap_const_logic_1))) then 
            ctxTables_we0 <= ap_const_logic_1;
        else 
            ctxTables_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg;
    icmp_ln1076_fu_273_p2 <= "1" when (unsigned(sub_ln229_fu_262_p2) > unsigned(p_read)) else "0";
    lpsTable_address0 <= zext_ln34_fu_254_p1(8 - 1 downto 0);

    lpsTable_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            lpsTable_ce0 <= ap_const_logic_1;
        else 
            lpsTable_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pState_fu_222_p4 <= ctxTables_q0(6 downto 1);
    qRangeIdx_fu_236_p4 <= baeState_0_constprop_i(7 downto 6);
    select_ln65_fu_320_p3 <= 
        grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out when (write_flag2_1_loc_fu_56(0) = '1') else 
        p_read;
    sub_ln229_1_fu_295_p2 <= std_logic_vector(unsigned(p_read) - unsigned(sub_ln229_reg_443));
    sub_ln229_fu_262_p2 <= std_logic_vector(unsigned(baeState_0_constprop_i) - unsigned(zext_ln34_1_fu_259_p1));
    tmp_fu_246_p3 <= (pState_fu_222_p4 & qRangeIdx_fu_236_p4);
    transLPS_address0 <= zext_ln24_fu_279_p1(7 - 1 downto 0);

    transLPS_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            transLPS_ce0 <= ap_const_logic_1;
        else 
            transLPS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    transMPS_address0 <= zext_ln24_fu_279_p1(7 - 1 downto 0);

    transMPS_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            transMPS_ce0 <= ap_const_logic_1;
        else 
            transMPS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    valMps_fu_218_p1 <= ctxTables_q0(1 - 1 downto 0);
    xor_ln40_fu_290_p2 <= (valMps_reg_397 xor ap_const_lv1_1);
    zext_ln24_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctxState_reg_392),64));
    zext_ln34_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ivlLpsRange_reg_411),32));
    zext_ln34_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_246_p3),64));
end behav;
