-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_sao_top_Pipeline_VITIS_LOOP_213_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_SaoTypeIdx_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoTypeIdx33_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoTypeIdx34_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoEOClass35_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoEOClass36_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_sao_band_position_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoEOClass_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_sao_band_position37_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_sao_band_position38_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read34 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read35 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read36 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read37 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read38 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read39 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read40 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read41 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read42 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read43 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read44 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read48 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read49 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read50 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read45 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read46 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read47 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoOffsetVal_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_SaoOffsetVal_ce0 : OUT STD_LOGIC;
    out_SaoOffsetVal_we0 : OUT STD_LOGIC;
    out_SaoOffsetVal_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_SaoOffsetVal_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_SaoOffsetVal_ce1 : OUT STD_LOGIC;
    out_SaoOffsetVal_we1 : OUT STD_LOGIC;
    out_SaoOffsetVal_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_SaoTypeIdx_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_SaoTypeIdx_6_out_ap_vld : OUT STD_LOGIC;
    out_SaoTypeIdx33_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_SaoTypeIdx33_6_out_ap_vld : OUT STD_LOGIC;
    out_SaoTypeIdx34_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_SaoTypeIdx34_6_out_ap_vld : OUT STD_LOGIC;
    out_SaoEOClass35_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_SaoEOClass35_6_out_ap_vld : OUT STD_LOGIC;
    out_SaoEOClass36_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_SaoEOClass36_6_out_ap_vld : OUT STD_LOGIC;
    out_sao_band_position_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_sao_band_position_6_out_ap_vld : OUT STD_LOGIC;
    out_SaoEOClass_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_SaoEOClass_6_out_ap_vld : OUT STD_LOGIC;
    out_sao_band_position37_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_sao_band_position37_6_out_ap_vld : OUT STD_LOGIC;
    out_sao_band_position38_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_sao_band_position38_6_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_sao_top_Pipeline_VITIS_LOOP_213_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln213_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal i_1_reg_855 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln213_fu_541_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln213_reg_862 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln216_fu_559_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln216_reg_867 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_581_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_874 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_593_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_631_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_643_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_893 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_655_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_898 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_667_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_903 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln216_1_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln218_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln219_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln220_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_132 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_sao_band_position38_6_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_sao_band_position37_6_fu_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_SaoEOClass_6_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_sao_band_position_6_fu_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_SaoEOClass36_6_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_SaoEOClass35_6_fu_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_SaoTypeIdx34_6_fu_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_SaoTypeIdx33_6_fu_164 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_SaoTypeIdx_6_fu_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_605_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_618_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal tmp_1_fu_551_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln216_fu_547_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln217_fu_570_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln218_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln219_fu_689_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln220_fu_699_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_8_1_1_U154 : component cabac_top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => p_read27,
        din1 => p_read28,
        din2 => p_read29,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_3_fu_581_p5);

    mux_32_8_1_1_U155 : component cabac_top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => p_read45,
        din1 => p_read46,
        din2 => p_read47,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_s_fu_593_p5);

    mux_32_16_1_1_U156 : component cabac_top_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => p_read30,
        din1 => p_read31,
        din2 => p_read32,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_2_fu_605_p5);

    mux_32_16_1_1_U157 : component cabac_top_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => p_read33,
        din1 => p_read34,
        din2 => p_read35,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_4_fu_618_p5);

    mux_32_16_1_1_U158 : component cabac_top_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => p_read36,
        din1 => p_read37,
        din2 => p_read38,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_5_fu_631_p5);

    mux_32_16_1_1_U159 : component cabac_top_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => p_read39,
        din1 => p_read40,
        din2 => p_read41,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_6_fu_643_p5);

    mux_32_16_1_1_U160 : component cabac_top_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => p_read42,
        din1 => p_read43,
        din2 => p_read44,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_7_fu_655_p5);

    mux_32_8_1_1_U161 : component cabac_top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => p_read48,
        din1 => p_read49,
        din2 => p_read50,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_8_fu_667_p5);

    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_132 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_fu_132 <= add_ln213_reg_862;
            end if; 
        end if;
    end process;

    out_SaoEOClass35_6_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_SaoEOClass35_6_fu_156 <= out_SaoEOClass35_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (i_1_reg_855 = ap_const_lv2_1))) then 
                out_SaoEOClass35_6_fu_156 <= tmp_s_reg_881;
            end if; 
        end if;
    end process;

    out_SaoEOClass36_6_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_SaoEOClass36_6_fu_152 <= out_SaoEOClass36_5;
            elsif ((not((i_1_reg_855 = ap_const_lv2_1)) and not((i_1_reg_855 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_SaoEOClass36_6_fu_152 <= tmp_s_reg_881;
            end if; 
        end if;
    end process;

    out_SaoEOClass_6_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_SaoEOClass_6_fu_144 <= out_SaoEOClass_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (i_1_reg_855 = ap_const_lv2_0))) then 
                out_SaoEOClass_6_fu_144 <= tmp_s_reg_881;
            end if; 
        end if;
    end process;

    out_SaoTypeIdx33_6_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_SaoTypeIdx33_6_fu_164 <= out_SaoTypeIdx33_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (i_1_reg_855 = ap_const_lv2_1))) then 
                out_SaoTypeIdx33_6_fu_164 <= tmp_3_reg_874;
            end if; 
        end if;
    end process;

    out_SaoTypeIdx34_6_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_SaoTypeIdx34_6_fu_160 <= out_SaoTypeIdx34_5;
            elsif ((not((i_1_reg_855 = ap_const_lv2_1)) and not((i_1_reg_855 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_SaoTypeIdx34_6_fu_160 <= tmp_3_reg_874;
            end if; 
        end if;
    end process;

    out_SaoTypeIdx_6_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_SaoTypeIdx_6_fu_168 <= out_SaoTypeIdx_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (i_1_reg_855 = ap_const_lv2_0))) then 
                out_SaoTypeIdx_6_fu_168 <= tmp_3_reg_874;
            end if; 
        end if;
    end process;

    out_sao_band_position37_6_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_sao_band_position37_6_fu_140 <= out_sao_band_position37_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (i_1_reg_855 = ap_const_lv2_1))) then 
                out_sao_band_position37_6_fu_140 <= tmp_8_reg_903;
            end if; 
        end if;
    end process;

    out_sao_band_position38_6_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_sao_band_position38_6_fu_136 <= out_sao_band_position38_5;
            elsif ((not((i_1_reg_855 = ap_const_lv2_1)) and not((i_1_reg_855 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_sao_band_position38_6_fu_136 <= tmp_8_reg_903;
            end if; 
        end if;
    end process;

    out_sao_band_position_6_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                out_sao_band_position_6_fu_148 <= out_sao_band_position_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (i_1_reg_855 = ap_const_lv2_0))) then 
                out_sao_band_position_6_fu_148 <= tmp_8_reg_903;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln213_reg_862 <= add_ln213_fu_541_p2;
                i_1_reg_855 <= ap_sig_allocacmp_i_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln216_reg_867 <= add_ln216_fu_559_p2;
                tmp_3_reg_874 <= tmp_3_fu_581_p5;
                tmp_5_reg_888 <= tmp_5_fu_631_p5;
                tmp_6_reg_893 <= tmp_6_fu_643_p5;
                tmp_7_reg_898 <= tmp_7_fu_655_p5;
                tmp_8_reg_903 <= tmp_8_fu_667_p5;
                tmp_s_reg_881 <= tmp_s_fu_593_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln213_fu_541_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    add_ln216_fu_559_p2 <= std_logic_vector(unsigned(tmp_1_fu_551_p3) + unsigned(zext_ln216_fu_547_p1));
    add_ln217_fu_570_p2 <= std_logic_vector(unsigned(add_ln216_fu_559_p2) + unsigned(ap_const_lv4_1));
    add_ln218_fu_679_p2 <= std_logic_vector(unsigned(add_ln216_reg_867) + unsigned(ap_const_lv4_2));
    add_ln219_fu_689_p2 <= std_logic_vector(unsigned(add_ln216_reg_867) + unsigned(ap_const_lv4_3));
    add_ln220_fu_699_p2 <= std_logic_vector(unsigned(add_ln216_reg_867) + unsigned(ap_const_lv4_4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_132, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_132;
        end if; 
    end process;

    icmp_ln213_fu_535_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
    out_SaoEOClass35_6_out <= out_SaoEOClass35_6_fu_156;

    out_SaoEOClass35_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoEOClass35_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_SaoEOClass35_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_SaoEOClass36_6_out <= out_SaoEOClass36_6_fu_152;

    out_SaoEOClass36_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoEOClass36_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_SaoEOClass36_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_SaoEOClass_6_out <= out_SaoEOClass_6_fu_144;

    out_SaoEOClass_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoEOClass_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_SaoEOClass_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_SaoOffsetVal_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_CS_fsm_state3, zext_ln217_fu_576_p1, ap_CS_fsm_state2, zext_ln219_fu_694_p1, zext_ln220_fu_704_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_SaoOffsetVal_address0 <= zext_ln220_fu_704_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_SaoOffsetVal_address0 <= zext_ln219_fu_694_p1(4 - 1 downto 0);
        elsif (((icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoOffsetVal_address0 <= zext_ln217_fu_576_p1(4 - 1 downto 0);
        else 
            out_SaoOffsetVal_address0 <= "XXXX";
        end if; 
    end process;


    out_SaoOffsetVal_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, zext_ln216_1_fu_565_p1, zext_ln218_fu_684_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_SaoOffsetVal_address1 <= zext_ln218_fu_684_p1(4 - 1 downto 0);
        elsif (((icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoOffsetVal_address1 <= zext_ln216_1_fu_565_p1(4 - 1 downto 0);
        else 
            out_SaoOffsetVal_address1 <= "XXXX";
        end if; 
    end process;


    out_SaoOffsetVal_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_SaoOffsetVal_ce0 <= ap_const_logic_1;
        else 
            out_SaoOffsetVal_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_SaoOffsetVal_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_SaoOffsetVal_ce1 <= ap_const_logic_1;
        else 
            out_SaoOffsetVal_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_SaoOffsetVal_d0_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_CS_fsm_state3, tmp_6_reg_893, tmp_7_reg_898, ap_CS_fsm_state2, tmp_4_fu_618_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_SaoOffsetVal_d0 <= tmp_7_reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_SaoOffsetVal_d0 <= tmp_6_reg_893;
        elsif (((icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoOffsetVal_d0 <= tmp_4_fu_618_p5;
        else 
            out_SaoOffsetVal_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_SaoOffsetVal_d1_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, tmp_5_reg_888, ap_CS_fsm_state2, tmp_2_fu_605_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_SaoOffsetVal_d1 <= tmp_5_reg_888;
        elsif (((icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoOffsetVal_d1 <= tmp_2_fu_605_p5;
        else 
            out_SaoOffsetVal_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_SaoOffsetVal_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_SaoOffsetVal_we0 <= ap_const_logic_1;
        else 
            out_SaoOffsetVal_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_SaoOffsetVal_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_CS_fsm_state2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_SaoOffsetVal_we1 <= ap_const_logic_1;
        else 
            out_SaoOffsetVal_we1 <= ap_const_logic_0;
        end if; 
    end process;

    out_SaoTypeIdx33_6_out <= out_SaoTypeIdx33_6_fu_164;

    out_SaoTypeIdx33_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoTypeIdx33_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_SaoTypeIdx33_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_SaoTypeIdx34_6_out <= out_SaoTypeIdx34_6_fu_160;

    out_SaoTypeIdx34_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoTypeIdx34_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_SaoTypeIdx34_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_SaoTypeIdx_6_out <= out_SaoTypeIdx_6_fu_168;

    out_SaoTypeIdx_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_SaoTypeIdx_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_SaoTypeIdx_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_sao_band_position37_6_out <= out_sao_band_position37_6_fu_140;

    out_sao_band_position37_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_sao_band_position37_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_sao_band_position37_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_sao_band_position38_6_out <= out_sao_band_position38_6_fu_136;

    out_sao_band_position38_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_sao_band_position38_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_sao_band_position38_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_sao_band_position_6_out <= out_sao_band_position_6_fu_148;

    out_sao_band_position_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln213_fu_535_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln213_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_sao_band_position_6_out_ap_vld <= ap_const_logic_1;
        else 
            out_sao_band_position_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_551_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv2_0);
    zext_ln216_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln216_fu_559_p2),64));
    zext_ln216_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),4));
    zext_ln217_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln217_fu_570_p2),64));
    zext_ln218_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln218_fu_679_p2),64));
    zext_ln219_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln219_fu_689_p2),64));
    zext_ln220_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln220_fu_699_p2),64));
end behav;
