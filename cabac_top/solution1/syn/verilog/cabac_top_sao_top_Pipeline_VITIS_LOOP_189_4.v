// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_sao_top_Pipeline_VITIS_LOOP_189_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln188,
        sao_offset_abs_address0,
        sao_offset_abs_ce0,
        sao_offset_abs_q0,
        sao_offset_sign_address0,
        sao_offset_sign_ce0,
        sao_offset_sign_q0,
        add_ln188,
        out_SaoOffsetVal_address0,
        out_SaoOffsetVal_ce0,
        out_SaoOffsetVal_we0,
        out_SaoOffsetVal_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] zext_ln188;
output  [3:0] sao_offset_abs_address0;
output   sao_offset_abs_ce0;
input  [7:0] sao_offset_abs_q0;
output  [3:0] sao_offset_sign_address0;
output   sao_offset_sign_ce0;
input  [0:0] sao_offset_sign_q0;
input  [3:0] add_ln188;
output  [3:0] out_SaoOffsetVal_address0;
output   out_SaoOffsetVal_ce0;
output   out_SaoOffsetVal_we0;
output  [15:0] out_SaoOffsetVal_d0;

reg ap_idle;
reg sao_offset_abs_ce0;
reg sao_offset_sign_ce0;
reg out_SaoOffsetVal_ce0;
reg out_SaoOffsetVal_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln189_fu_103_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln193_fu_109_p2;
reg   [2:0] add_ln193_reg_186;
reg   [2:0] add_ln193_reg_186_pp0_iter1_reg;
wire   [63:0] zext_ln193_1_fu_125_p1;
reg   [63:0] zext_ln193_1_reg_191;
reg   [7:0] sao_offset_abs_load_reg_206;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln193_3_fu_143_p1;
reg   [2:0] i_fu_40;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_3;
wire   [3:0] zext_ln193_fu_115_p1;
wire   [3:0] add_ln193_1_fu_119_p2;
wire   [3:0] zext_ln193_2_fu_135_p1;
wire   [3:0] add_ln193_2_fu_138_p2;
wire   [8:0] zext_ln191_fu_148_p1;
wire   [8:0] sub_ln191_fu_151_p2;
wire   [8:0] select_ln190_fu_157_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln189_fu_103_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_40 <= add_ln193_fu_109_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_40 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln193_reg_186 <= add_ln193_fu_109_p2;
        add_ln193_reg_186_pp0_iter1_reg <= add_ln193_reg_186;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        sao_offset_abs_load_reg_206 <= sao_offset_abs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln189_fu_103_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln193_1_reg_191[3 : 0] <= zext_ln193_1_fu_125_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln189_fu_103_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_SaoOffsetVal_ce0 = 1'b1;
    end else begin
        out_SaoOffsetVal_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_SaoOffsetVal_we0 = 1'b1;
    end else begin
        out_SaoOffsetVal_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sao_offset_abs_ce0 = 1'b1;
    end else begin
        sao_offset_abs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sao_offset_sign_ce0 = 1'b1;
    end else begin
        sao_offset_sign_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln193_1_fu_119_p2 = (zext_ln188 + zext_ln193_fu_115_p1);

assign add_ln193_2_fu_138_p2 = (add_ln188 + zext_ln193_2_fu_135_p1);

assign add_ln193_fu_109_p2 = (ap_sig_allocacmp_i_3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln189_fu_103_p2 = ((ap_sig_allocacmp_i_3 == 3'd4) ? 1'b1 : 1'b0);

assign out_SaoOffsetVal_address0 = zext_ln193_3_fu_143_p1;

assign out_SaoOffsetVal_d0 = $signed(select_ln190_fu_157_p3);

assign sao_offset_abs_address0 = zext_ln193_1_fu_125_p1;

assign sao_offset_sign_address0 = zext_ln193_1_reg_191;

assign select_ln190_fu_157_p3 = ((sao_offset_sign_q0[0:0] == 1'b1) ? sub_ln191_fu_151_p2 : zext_ln191_fu_148_p1);

assign sub_ln191_fu_151_p2 = (9'd0 - zext_ln191_fu_148_p1);

assign zext_ln191_fu_148_p1 = sao_offset_abs_load_reg_206;

assign zext_ln193_1_fu_125_p1 = add_ln193_1_fu_119_p2;

assign zext_ln193_2_fu_135_p1 = add_ln193_reg_186_pp0_iter1_reg;

assign zext_ln193_3_fu_143_p1 = add_ln193_2_fu_138_p2;

assign zext_ln193_fu_115_p1 = ap_sig_allocacmp_i_3;

always @ (posedge ap_clk) begin
    zext_ln193_1_reg_191[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //cabac_top_sao_top_Pipeline_VITIS_LOOP_189_4
