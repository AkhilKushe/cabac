// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_sao_top_Pipeline_VITIS_LOOP_54_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_bstate_currIdx_5,
        state_bstate_n_bits_held_5,
        state_bstate_held_aligned_word_5,
        state_ivlOffset_5,
        baeState_0_constprop_load,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        p_out,
        p_out_ap_vld,
        state_bstate_currIdx_7_out,
        state_bstate_currIdx_7_out_ap_vld,
        state_bstate_n_bits_held_7_out,
        state_bstate_n_bits_held_7_out_ap_vld,
        state_bstate_held_aligned_word_7_out,
        state_bstate_held_aligned_word_7_out_ap_vld,
        ret_1_out,
        ret_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_bstate_currIdx_5;
input  [7:0] state_bstate_n_bits_held_5;
input  [7:0] state_bstate_held_aligned_word_5;
input  [30:0] state_ivlOffset_5;
input  [31:0] baeState_0_constprop_load;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [7:0] p_out;
output   p_out_ap_vld;
output  [31:0] state_bstate_currIdx_7_out;
output   state_bstate_currIdx_7_out_ap_vld;
output  [7:0] state_bstate_n_bits_held_7_out;
output   state_bstate_n_bits_held_7_out_ap_vld;
output  [7:0] state_bstate_held_aligned_word_7_out;
output   state_bstate_held_aligned_word_7_out_ap_vld;
output  [31:0] ret_1_out;
output   ret_1_out_ap_vld;

reg ap_idle;
reg bStream_ce0;
reg p_out_ap_vld;
reg state_bstate_currIdx_7_out_ap_vld;
reg state_bstate_n_bits_held_7_out_ap_vld;
reg state_bstate_held_aligned_word_7_out_ap_vld;
reg ret_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [0:0] and_ln57_fu_396_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [30:0] p_in_load_reg_468;
wire   [7:0] empty_45_fu_219_p1;
reg   [7:0] empty_45_reg_473;
wire   [8:0] shl_ln_fu_227_p3;
reg   [8:0] shl_ln_reg_478;
wire   [8:0] zext_ln13_fu_235_p1;
reg   [8:0] zext_ln13_reg_483;
wire   [0:0] icmp_ln13_fu_239_p2;
reg   [0:0] icmp_ln13_reg_488;
wire   [31:0] add_ln56_fu_245_p2;
reg   [31:0] add_ln56_reg_492;
wire   [8:0] zext_ln11_fu_312_p1;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [8:0] retVal_fu_328_p3;
reg   [22:0] tmp_s_reg_513;
reg   [8:0] ap_phi_reg_pp0_iter0_val_reg_176;
wire   [63:0] zext_ln5_fu_265_p1;
reg   [31:0] empty_fu_78;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_p_load;
reg   [30:0] p_in_fu_82;
wire   [30:0] trunc_ln76_fu_381_p1;
reg   [30:0] ap_sig_allocacmp_p_in_load;
reg   [7:0] state_bstate_n_bits_held_6_fu_86;
wire   [7:0] add_ln16_fu_251_p2;
reg   [7:0] ap_sig_allocacmp_state_bstate_n_bits_held_6_load;
reg   [7:0] aligned_word_fu_90;
reg   [31:0] state_bstate_currIdx_6_fu_94;
wire   [31:0] add_ln6_fu_270_p2;
reg   [31:0] ap_sig_allocacmp_state_bstate_currIdx_6_load;
wire   [31:0] ret_3_fu_372_p3;
wire   [7:0] trunc_ln1543_fu_223_p1;
wire   [8:0] add_ln14_fu_289_p2;
wire   [31:0] zext_ln14_fu_298_p1;
wire  signed [31:0] sext_ln14_fu_294_p1;
wire   [31:0] retVal_5_fu_302_p2;
wire   [0:0] retVal_6_fu_308_p1;
wire   [0:0] tmp_fu_316_p3;
wire   [7:0] zext_ln42_fu_324_p1;
wire   [8:0] or_ln1543_fu_350_p2;
wire   [31:0] ret_fu_355_p3;
wire   [0:0] icmp_ln1076_fu_362_p2;
wire   [31:0] sub_ln229_fu_367_p2;
wire   [0:0] icmp_ln57_fu_391_p2;
wire   [0:0] binVal_fu_385_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        aligned_word_fu_90 <= state_bstate_held_aligned_word_5;
    end else if (((icmp_ln13_reg_488 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        aligned_word_fu_90 <= bStream_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln13_reg_488 == 1'd0)) begin
                        ap_phi_reg_pp0_iter0_val_reg_176[0] <= zext_ln11_fu_312_p1[0];
        end else if ((icmp_ln13_reg_488 == 1'd1)) begin
                        ap_phi_reg_pp0_iter0_val_reg_176[0] <= retVal_fu_328_p3[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        empty_fu_78 <= 32'd0;
    end else if (((1'd1 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        empty_fu_78 <= add_ln56_reg_492;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        p_in_fu_82 <= state_ivlOffset_5;
    end else if (((1'd1 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        p_in_fu_82 <= trunc_ln76_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln13_fu_239_p2 == 1'd1)) begin
            state_bstate_currIdx_6_fu_94 <= add_ln6_fu_270_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            state_bstate_currIdx_6_fu_94 <= state_bstate_currIdx_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln13_fu_239_p2 == 1'd1)) begin
            state_bstate_n_bits_held_6_fu_86 <= 8'd7;
        end else if ((icmp_ln13_fu_239_p2 == 1'd0)) begin
            state_bstate_n_bits_held_6_fu_86 <= add_ln16_fu_251_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            state_bstate_n_bits_held_6_fu_86 <= state_bstate_n_bits_held_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln56_reg_492 <= add_ln56_fu_245_p2;
        empty_45_reg_473 <= empty_45_fu_219_p1;
        icmp_ln13_reg_488 <= icmp_ln13_fu_239_p2;
        p_in_load_reg_468 <= ap_sig_allocacmp_p_in_load;
        shl_ln_reg_478[8 : 1] <= shl_ln_fu_227_p3[8 : 1];
        zext_ln13_reg_483[7 : 0] <= zext_ln13_fu_235_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_s_reg_513 <= {{p_in_load_reg_468[30:8]}};
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_p_in_load = state_ivlOffset_5;
    end else begin
        ap_sig_allocacmp_p_in_load = p_in_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_p_load = 32'd0;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_78;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_state_bstate_currIdx_6_load = state_bstate_currIdx_5;
    end else begin
        ap_sig_allocacmp_state_bstate_currIdx_6_load = state_bstate_currIdx_6_fu_94;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_state_bstate_n_bits_held_6_load = state_bstate_n_bits_held_5;
    end else begin
        ap_sig_allocacmp_state_bstate_n_bits_held_6_load = state_bstate_n_bits_held_6_fu_86;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bStream_ce0 = 1'b1;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        ret_1_out_ap_vld = 1'b1;
    end else begin
        ret_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        state_bstate_currIdx_7_out_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        state_bstate_held_aligned_word_7_out_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln57_fu_396_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        state_bstate_n_bits_held_7_out_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_289_p2 = ($signed(zext_ln13_reg_483) + $signed(9'd511));

assign add_ln16_fu_251_p2 = ($signed(ap_sig_allocacmp_state_bstate_n_bits_held_6_load) + $signed(8'd255));

assign add_ln56_fu_245_p2 = (ap_sig_allocacmp_p_load + 32'd1);

assign add_ln6_fu_270_p2 = (ap_sig_allocacmp_state_bstate_currIdx_6_load + 32'd1);

assign and_ln57_fu_396_p2 = (icmp_ln57_fu_391_p2 & binVal_fu_385_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bStream_address0 = zext_ln5_fu_265_p1;

assign binVal_fu_385_p2 = (icmp_ln1076_fu_362_p2 ^ 1'd1);

assign empty_45_fu_219_p1 = ap_sig_allocacmp_p_load[7:0];

assign icmp_ln1076_fu_362_p2 = ((ret_fu_355_p3 < baeState_0_constprop_load) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_239_p2 = ((ap_sig_allocacmp_state_bstate_n_bits_held_6_load == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_391_p2 = ((add_ln56_reg_492 < 32'd5) ? 1'b1 : 1'b0);

assign or_ln1543_fu_350_p2 = (shl_ln_reg_478 | ap_phi_reg_pp0_iter0_val_reg_176);

assign p_out = empty_45_reg_473;

assign retVal_5_fu_302_p2 = zext_ln14_fu_298_p1 >> sext_ln14_fu_294_p1;

assign retVal_6_fu_308_p1 = retVal_5_fu_302_p2[0:0];

assign retVal_fu_328_p3 = {{1'd0}, {zext_ln42_fu_324_p1}};

assign ret_1_out = ret_3_fu_372_p3;

assign ret_3_fu_372_p3 = ((icmp_ln1076_fu_362_p2[0:0] == 1'b1) ? ret_fu_355_p3 : sub_ln229_fu_367_p2);

assign ret_fu_355_p3 = {{tmp_s_reg_513}, {or_ln1543_fu_350_p2}};

assign sext_ln14_fu_294_p1 = $signed(add_ln14_fu_289_p2);

assign shl_ln_fu_227_p3 = {{trunc_ln1543_fu_223_p1}, {1'd0}};

assign state_bstate_currIdx_7_out = state_bstate_currIdx_6_fu_94;

assign state_bstate_held_aligned_word_7_out = aligned_word_fu_90;

assign state_bstate_n_bits_held_7_out = state_bstate_n_bits_held_6_fu_86;

assign sub_ln229_fu_367_p2 = (ret_fu_355_p3 - baeState_0_constprop_load);

assign tmp_fu_316_p3 = bStream_q0[32'd7];

assign trunc_ln1543_fu_223_p1 = ap_sig_allocacmp_p_in_load[7:0];

assign trunc_ln76_fu_381_p1 = ret_3_fu_372_p3[30:0];

assign zext_ln11_fu_312_p1 = retVal_6_fu_308_p1;

assign zext_ln13_fu_235_p1 = ap_sig_allocacmp_state_bstate_n_bits_held_6_load;

assign zext_ln14_fu_298_p1 = aligned_word_fu_90;

assign zext_ln42_fu_324_p1 = tmp_fu_316_p3;

assign zext_ln5_fu_265_p1 = ap_sig_allocacmp_state_bstate_currIdx_6_load;

always @ (posedge ap_clk) begin
    shl_ln_reg_478[0] <= 1'b0;
    zext_ln13_reg_483[8] <= 1'b0;
    ap_phi_reg_pp0_iter0_val_reg_176[8:1] <= 8'b00000000;
end

endmodule //cabac_top_sao_top_Pipeline_VITIS_LOOP_54_1
