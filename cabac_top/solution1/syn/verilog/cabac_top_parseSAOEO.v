// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_parseSAOEO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_ivlOffset_V_read,
        state_bstate_currIdx_read,
        state_bstate_n_bits_held_read,
        state_bstate_held_aligned_word_read,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        baeState_0_constprop,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_ivlOffset_V_read;
input  [31:0] state_bstate_currIdx_read;
input  [7:0] state_bstate_n_bits_held_read;
input  [7:0] state_bstate_held_aligned_word_read;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
input  [31:0] baeState_0_constprop;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [31:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bStream_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] add_ln83_fu_196_p2;
reg   [1:0] add_ln83_reg_461;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln13_fu_206_p2;
reg   [0:0] icmp_ln13_reg_466;
wire   [0:0] icmp_ln80_fu_190_p2;
wire   [0:0] retVal_16_fu_232_p1;
reg   [0:0] retVal_16_reg_470;
wire   [8:0] zext_ln11_fu_293_p1;
wire    ap_CS_fsm_state3;
wire   [8:0] retVal_fu_308_p3;
reg   [8:0] val_reg_129;
wire   [63:0] zext_ln5_fu_247_p1;
reg   [1:0] binIdx_fu_68;
reg   [31:0] symbolVal_write_assign_fu_72;
wire   [31:0] or_ln_fu_394_p3;
wire    ap_CS_fsm_state4;
reg   [31:0] state_ivlOffset_0_fu_76;
wire   [31:0] ret_7_fu_376_p3;
reg   [7:0] state_bstate_n_bits_held_0_fu_80;
wire   [7:0] add_ln16_fu_236_p2;
reg   [7:0] state_bstate_held_aligned_word_0_fu_84;
reg   [31:0] state_bstate_currIdx_0_fu_88;
wire   [31:0] add_ln6_fu_252_p2;
wire   [8:0] zext_ln13_fu_202_p1;
wire   [8:0] add_ln14_fu_216_p2;
wire   [31:0] zext_ln14_fu_212_p1;
wire  signed [31:0] sext_ln14_fu_222_p1;
wire   [31:0] retVal_15_fu_226_p2;
wire   [0:0] tmp_fu_296_p3;
wire   [7:0] zext_ln42_fu_304_p1;
wire   [7:0] trunc_ln1543_fu_330_p1;
wire   [8:0] shl_ln_fu_334_p3;
wire   [22:0] tmp_s_fu_348_p4;
wire   [8:0] or_ln1543_fu_342_p2;
wire   [31:0] ret_fu_358_p3;
wire   [0:0] icmp_ln1076_fu_366_p2;
wire   [31:0] sub_ln229_fu_371_p2;
wire   [30:0] trunc_ln82_fu_390_p1;
wire   [0:0] binVal_fu_384_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        binIdx_fu_68 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        binIdx_fu_68 <= add_ln83_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_bstate_currIdx_0_fu_88 <= state_bstate_currIdx_read;
    end else if (((icmp_ln80_fu_190_p2 == 1'd0) & (icmp_ln13_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        state_bstate_currIdx_0_fu_88 <= add_ln6_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_bstate_held_aligned_word_0_fu_84 <= state_bstate_held_aligned_word_read;
    end else if (((icmp_ln13_reg_466 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        state_bstate_held_aligned_word_0_fu_84 <= bStream_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_bstate_n_bits_held_0_fu_80 <= state_bstate_n_bits_held_read;
    end else if (((icmp_ln80_fu_190_p2 == 1'd0) & (icmp_ln13_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        state_bstate_n_bits_held_0_fu_80 <= add_ln16_fu_236_p2;
    end else if (((icmp_ln13_reg_466 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        state_bstate_n_bits_held_0_fu_80 <= 8'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_ivlOffset_0_fu_76 <= state_ivlOffset_V_read;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_ivlOffset_0_fu_76 <= ret_7_fu_376_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        symbolVal_write_assign_fu_72 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        symbolVal_write_assign_fu_72 <= or_ln_fu_394_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((icmp_ln13_reg_466 == 1'd0)) begin
                        val_reg_129[0] <= zext_ln11_fu_293_p1[0];
        end else if ((icmp_ln13_reg_466 == 1'd1)) begin
                        val_reg_129[0] <= retVal_fu_308_p3[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln83_reg_461 <= add_ln83_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln13_reg_466 <= icmp_ln13_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_190_p2 == 1'd0) & (icmp_ln13_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        retVal_16_reg_470 <= retVal_16_fu_232_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln80_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bStream_ce0 = 1'b1;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln80_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_216_p2 = ($signed(zext_ln13_fu_202_p1) + $signed(9'd511));

assign add_ln16_fu_236_p2 = ($signed(state_bstate_n_bits_held_0_fu_80) + $signed(8'd255));

assign add_ln6_fu_252_p2 = (state_bstate_currIdx_0_fu_88 + 32'd1);

assign add_ln83_fu_196_p2 = (binIdx_fu_68 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return_0 = state_ivlOffset_0_fu_76;

assign ap_return_1 = state_bstate_currIdx_0_fu_88;

assign ap_return_2 = state_bstate_n_bits_held_0_fu_80;

assign ap_return_3 = state_bstate_held_aligned_word_0_fu_84;

assign ap_return_4 = symbolVal_write_assign_fu_72;

assign bStream_address0 = zext_ln5_fu_247_p1;

assign binVal_fu_384_p2 = (icmp_ln1076_fu_366_p2 ^ 1'd1);

assign icmp_ln1076_fu_366_p2 = ((ret_fu_358_p3 < baeState_0_constprop) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_206_p2 = ((state_bstate_n_bits_held_0_fu_80 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_190_p2 = ((binIdx_fu_68 == 2'd2) ? 1'b1 : 1'b0);

assign or_ln1543_fu_342_p2 = (val_reg_129 | shl_ln_fu_334_p3);

assign or_ln_fu_394_p3 = {{trunc_ln82_fu_390_p1}, {binVal_fu_384_p2}};

assign retVal_15_fu_226_p2 = zext_ln14_fu_212_p1 >> sext_ln14_fu_222_p1;

assign retVal_16_fu_232_p1 = retVal_15_fu_226_p2[0:0];

assign retVal_fu_308_p3 = {{1'd0}, {zext_ln42_fu_304_p1}};

assign ret_7_fu_376_p3 = ((icmp_ln1076_fu_366_p2[0:0] == 1'b1) ? ret_fu_358_p3 : sub_ln229_fu_371_p2);

assign ret_fu_358_p3 = {{tmp_s_fu_348_p4}, {or_ln1543_fu_342_p2}};

assign sext_ln14_fu_222_p1 = $signed(add_ln14_fu_216_p2);

assign shl_ln_fu_334_p3 = {{trunc_ln1543_fu_330_p1}, {1'd0}};

assign sub_ln229_fu_371_p2 = (ret_fu_358_p3 - baeState_0_constprop);

assign tmp_fu_296_p3 = bStream_q0[32'd7];

assign tmp_s_fu_348_p4 = {{state_ivlOffset_0_fu_76[30:8]}};

assign trunc_ln1543_fu_330_p1 = state_ivlOffset_0_fu_76[7:0];

assign trunc_ln82_fu_390_p1 = symbolVal_write_assign_fu_72[30:0];

assign zext_ln11_fu_293_p1 = retVal_16_reg_470;

assign zext_ln13_fu_202_p1 = state_bstate_n_bits_held_0_fu_80;

assign zext_ln14_fu_212_p1 = state_bstate_held_aligned_word_0_fu_84;

assign zext_ln42_fu_304_p1 = tmp_fu_296_p3;

assign zext_ln5_fu_247_p1 = state_bstate_currIdx_0_fu_88;

always @ (posedge ap_clk) begin
    val_reg_129[8:1] <= 8'b00000000;
end

endmodule //cabac_top_parseSAOEO
