// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_regular (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read4,
        p_read5,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        ctxTables_address0,
        ctxTables_ce0,
        ctxTables_we0,
        ctxTables_d0,
        ctxTables_q0,
        baeState_0_constprop_i,
        baeState_0_constprop_o,
        baeState_0_constprop_o_ap_vld,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] p_read4;
input  [7:0] p_read5;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [8:0] ctxTables_address0;
output   ctxTables_ce0;
output   ctxTables_we0;
output  [7:0] ctxTables_d0;
input  [7:0] ctxTables_q0;
input  [31:0] baeState_0_constprop_i;
output  [31:0] baeState_0_constprop_o;
output   baeState_0_constprop_o_ap_vld;
output  [31:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [0:0] ap_return_3;
output  [31:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] ctxTables_address0;
reg ctxTables_ce0;
reg ctxTables_we0;
reg[31:0] baeState_0_constprop_o;
reg baeState_0_constprop_o_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] lpsTable_address0;
reg    lpsTable_ce0;
wire   [7:0] lpsTable_q0;
wire   [6:0] transMPS_address0;
reg    transMPS_ce0;
wire   [6:0] transMPS_q0;
wire   [6:0] transLPS_address0;
reg    transLPS_ce0;
wire   [6:0] transLPS_q0;
wire   [8:0] ctxTables_addr_reg_387;
reg   [7:0] ctxState_reg_392;
wire    ap_CS_fsm_state2;
wire   [0:0] valMps_fu_218_p1;
reg   [0:0] valMps_reg_397;
reg   [7:0] ivlLpsRange_reg_411;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] zext_ln34_1_fu_259_p1;
reg   [31:0] zext_ln34_1_reg_438;
wire   [31:0] sub_ln229_fu_262_p2;
reg   [31:0] sub_ln229_reg_443;
wire   [0:0] icmp_ln1076_fu_273_p2;
reg   [0:0] icmp_ln1076_reg_449;
wire   [0:0] xor_ln40_fu_290_p2;
wire    ap_CS_fsm_state5;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_idle;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_ready;
wire   [2:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_address0;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_ce0;
wire   [7:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out_ap_vld;
wire   [7:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out_ap_vld;
wire   [0:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out_ap_vld;
wire   [31:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out_ap_vld;
wire   [31:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out_ap_vld;
wire   [31:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld;
reg   [0:0] write_flag2_0_reg_145;
reg   [31:0] empty_reg_157;
reg   [31:0] empty_54_reg_167;
wire   [31:0] sub_ln229_1_fu_295_p2;
reg   [0:0] binVal_0_reg_177;
reg   [6:0] storemerge_reg_187;
reg    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [0:0] write_flag2_1_loc_fu_56;
wire   [63:0] zext_ln34_fu_254_p1;
wire   [63:0] zext_ln24_fu_279_p1;
wire    ap_CS_fsm_state7;
wire   [5:0] pState_fu_222_p4;
wire   [1:0] qRangeIdx_fu_236_p4;
wire   [7:0] tmp_fu_246_p3;
wire   [31:0] select_ln65_fu_320_p3;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg = 1'b0;
end

cabac_top_decode_regular_lpsTable_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lpsTable_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpsTable_address0),
    .ce0(lpsTable_ce0),
    .q0(lpsTable_q0)
);

cabac_top_decode_regular_transMPS_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
transMPS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transMPS_address0),
    .ce0(transMPS_ce0),
    .q0(transMPS_q0)
);

cabac_top_decode_regular_transLPS_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
transLPS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transLPS_address0),
    .ce0(transLPS_ce0),
    .q0(transLPS_q0)
);

cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1 grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start),
    .ap_done(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done),
    .ap_idle(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_idle),
    .ap_ready(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_ready),
    .p_read5(p_read5),
    .p_read4(p_read4),
    .write_flag2_0(write_flag2_0_reg_145),
    .p_read1(p_read1),
    .empty_41(empty_54_reg_167),
    .empty(empty_reg_157),
    .bStream_address0(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_address0),
    .bStream_ce0(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_ce0),
    .bStream_q0(bStream_q0),
    .state_bstate_held_aligned_word_0_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out),
    .state_bstate_held_aligned_word_0_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out_ap_vld),
    .state_bstate_n_bits_held_0_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out),
    .state_bstate_n_bits_held_0_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out_ap_vld),
    .write_flag2_1_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out),
    .write_flag2_1_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out_ap_vld),
    .state_bstate_currIdx_0_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out),
    .state_bstate_currIdx_0_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out_ap_vld),
    .state_ivlOffset_1_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out),
    .state_ivlOffset_1_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out_ap_vld),
    .baeState_0_constprop(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop),
    .baeState_0_constprop_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg <= 1'b1;
        end else if ((grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_ready == 1'b1)) begin
            grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln1076_reg_449 == 1'd0)) begin
            binVal_0_reg_177 <= xor_ln40_fu_290_p2;
        end else if ((icmp_ln1076_reg_449 == 1'd1)) begin
            binVal_0_reg_177 <= valMps_reg_397;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln1076_reg_449 == 1'd0)) begin
            empty_54_reg_167 <= sub_ln229_1_fu_295_p2;
        end else if ((icmp_ln1076_reg_449 == 1'd1)) begin
            empty_54_reg_167 <= p_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln1076_reg_449 == 1'd0)) begin
            empty_reg_157 <= zext_ln34_1_reg_438;
        end else if ((icmp_ln1076_reg_449 == 1'd1)) begin
            empty_reg_157 <= sub_ln229_reg_443;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln1076_reg_449 == 1'd0)) begin
            storemerge_reg_187 <= transLPS_q0;
        end else if ((icmp_ln1076_reg_449 == 1'd1)) begin
            storemerge_reg_187 <= transMPS_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((icmp_ln1076_reg_449 == 1'd0)) begin
            write_flag2_0_reg_145 <= 1'd1;
        end else if ((icmp_ln1076_reg_449 == 1'd1)) begin
            write_flag2_0_reg_145 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctxState_reg_392 <= ctxTables_q0;
        valMps_reg_397 <= valMps_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln1076_reg_449 <= icmp_ln1076_fu_273_p2;
        sub_ln229_reg_443 <= sub_ln229_fu_262_p2;
        zext_ln34_1_reg_438[7 : 0] <= zext_ln34_1_fu_259_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ivlLpsRange_reg_411 <= lpsTable_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out_ap_vld == 1'b1))) begin
        write_flag2_1_loc_fu_56 <= grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_write_flag2_1_out;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1076_fu_273_p2 == 1'd0))) begin
        baeState_0_constprop_o = zext_ln34_1_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        baeState_0_constprop_o = sub_ln229_fu_262_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld == 1'b1))) begin
        baeState_0_constprop_o = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop;
    end else begin
        baeState_0_constprop_o = baeState_0_constprop_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln1076_fu_273_p2 == 1'd0)))) begin
        baeState_0_constprop_o_ap_vld = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        baeState_0_constprop_o_ap_vld = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_baeState_0_constprop_ap_vld;
    end else begin
        baeState_0_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ctxTables_address0 = ctxTables_addr_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctxTables_address0 = 64'd1;
    end else begin
        ctxTables_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done == 1'b1)))) begin
        ctxTables_ce0 = 1'b1;
    end else begin
        ctxTables_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done == 1'b1))) begin
        ctxTables_we0 = 1'b1;
    end else begin
        ctxTables_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lpsTable_ce0 = 1'b1;
    end else begin
        lpsTable_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        transLPS_ce0 = 1'b1;
    end else begin
        transLPS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        transMPS_ce0 = 1'b1;
    end else begin
        transMPS_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return_0 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_currIdx_0_out;

assign ap_return_1 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_n_bits_held_0_out;

assign ap_return_2 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_bstate_held_aligned_word_0_out;

assign ap_return_3 = binVal_0_reg_177;

assign ap_return_4 = select_ln65_fu_320_p3;

assign bStream_address0 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_address0;

assign bStream_ce0 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_bStream_ce0;

assign ctxTables_addr_reg_387 = 64'd1;

assign ctxTables_d0 = storemerge_reg_187;

assign grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_ap_start_reg;

assign icmp_ln1076_fu_273_p2 = ((sub_ln229_fu_262_p2 > p_read) ? 1'b1 : 1'b0);

assign lpsTable_address0 = zext_ln34_fu_254_p1;

assign pState_fu_222_p4 = {{ctxTables_q0[6:1]}};

assign qRangeIdx_fu_236_p4 = {{baeState_0_constprop_i[7:6]}};

assign select_ln65_fu_320_p3 = ((write_flag2_1_loc_fu_56[0:0] == 1'b1) ? grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_196_state_ivlOffset_1_out : p_read);

assign sub_ln229_1_fu_295_p2 = (p_read - sub_ln229_reg_443);

assign sub_ln229_fu_262_p2 = (baeState_0_constprop_i - zext_ln34_1_fu_259_p1);

assign tmp_fu_246_p3 = {{pState_fu_222_p4}, {qRangeIdx_fu_236_p4}};

assign transLPS_address0 = zext_ln24_fu_279_p1;

assign transMPS_address0 = zext_ln24_fu_279_p1;

assign valMps_fu_218_p1 = ctxTables_q0[0:0];

assign xor_ln40_fu_290_p2 = (valMps_reg_397 ^ 1'd1);

assign zext_ln24_fu_279_p1 = ctxState_reg_392;

assign zext_ln34_1_fu_259_p1 = ivlLpsRange_reg_411;

assign zext_ln34_fu_254_p1 = tmp_fu_246_p3;

always @ (posedge ap_clk) begin
    zext_ln34_1_reg_438[31:8] <= 24'b000000000000000000000000;
end

endmodule //cabac_top_decode_regular
