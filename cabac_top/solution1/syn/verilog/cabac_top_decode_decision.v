// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_decision (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mode_offset,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        ctxTables_address0,
        ctxTables_ce0,
        ctxTables_we0,
        ctxTables_d0,
        ctxTables_q0,
        baeState_0_constprop_i,
        baeState_0_constprop_o,
        baeState_0_constprop_o_ap_vld,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] mode_offset;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [8:0] ctxTables_address0;
output   ctxTables_ce0;
output   ctxTables_we0;
output  [7:0] ctxTables_d0;
input  [7:0] ctxTables_q0;
input  [31:0] baeState_0_constprop_i;
output  [31:0] baeState_0_constprop_o;
output   baeState_0_constprop_o_ap_vld;
output  [31:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [0:0] ap_return_3;
output  [31:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] bStream_address0;
reg bStream_ce0;
reg[31:0] baeState_0_constprop_o;
reg baeState_0_constprop_o_ap_vld;
reg[31:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[0:0] ap_return_3;
reg[31:0] ap_return_4;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] mode_offset_read_read_fu_88_p2;
wire   [0:0] retVal_24_fu_247_p1;
reg   [0:0] retVal_24_reg_438;
wire   [0:0] icmp_ln13_fu_221_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln11_fu_276_p1;
wire    ap_CS_fsm_state3;
wire   [7:0] add_ln16_fu_279_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln6_fu_284_p2;
wire   [8:0] retVal_fu_301_p3;
wire    grp_decode_regular_fu_193_ap_start;
wire    grp_decode_regular_fu_193_ap_done;
wire    grp_decode_regular_fu_193_ap_idle;
wire    grp_decode_regular_fu_193_ap_ready;
wire   [2:0] grp_decode_regular_fu_193_bStream_address0;
wire    grp_decode_regular_fu_193_bStream_ce0;
wire   [8:0] grp_decode_regular_fu_193_ctxTables_address0;
wire    grp_decode_regular_fu_193_ctxTables_ce0;
wire    grp_decode_regular_fu_193_ctxTables_we0;
wire   [7:0] grp_decode_regular_fu_193_ctxTables_d0;
wire   [31:0] grp_decode_regular_fu_193_baeState_0_constprop_o;
wire    grp_decode_regular_fu_193_baeState_0_constprop_o_ap_vld;
wire   [31:0] grp_decode_regular_fu_193_ap_return_0;
wire   [7:0] grp_decode_regular_fu_193_ap_return_1;
wire   [7:0] grp_decode_regular_fu_193_ap_return_2;
wire   [0:0] grp_decode_regular_fu_193_ap_return_3;
wire   [31:0] grp_decode_regular_fu_193_ap_return_4;
reg   [31:0] state_bstate_currIdx_0_reg_107;
reg   [7:0] state_bstate_n_bits_held_0_reg_116;
reg   [7:0] state_bstate_held_aligned_word_0_reg_127;
reg   [8:0] val_reg_136;
reg   [31:0] ap_phi_mux_state_bstate_currIdx_1_phi_fu_148_p4;
reg   [31:0] state_bstate_currIdx_1_reg_145;
wire    ap_CS_fsm_state5;
reg   [7:0] ap_phi_mux_state_bstate_n_bits_held_1_phi_fu_158_p4;
reg   [7:0] state_bstate_n_bits_held_1_reg_155;
reg   [7:0] ap_phi_mux_state_bstate_held_aligned_word_1_phi_fu_168_p4;
reg   [7:0] state_bstate_held_aligned_word_1_reg_165;
wire   [0:0] xor_ln76_fu_359_p2;
reg   [0:0] ap_phi_mux_binVal_1_phi_fu_178_p4;
reg   [0:0] binVal_1_reg_175;
wire   [31:0] ret_9_fu_366_p3;
reg   [31:0] ap_phi_mux_state_ivlOffset_1_phi_fu_187_p4;
reg   [31:0] state_ivlOffset_1_reg_184;
reg    grp_decode_regular_fu_193_ap_start_reg;
wire   [63:0] zext_ln5_fu_251_p1;
wire   [8:0] zext_ln13_fu_217_p1;
wire   [8:0] add_ln14_fu_231_p2;
wire   [31:0] zext_ln14_fu_227_p1;
wire  signed [31:0] sext_ln14_fu_237_p1;
wire   [31:0] retVal_23_fu_241_p2;
wire   [0:0] tmp_fu_289_p3;
wire   [7:0] zext_ln42_fu_297_p1;
wire   [7:0] trunc_ln1543_fu_309_p1;
wire   [8:0] shl_ln_fu_312_p3;
wire   [22:0] tmp_s_fu_326_p4;
wire   [8:0] or_ln1543_fu_320_p2;
wire   [31:0] ret_fu_335_p3;
wire   [0:0] icmp_ln1076_fu_347_p2;
wire   [31:0] sub_ln229_fu_353_p2;
reg   [31:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [0:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_decode_regular_fu_193_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 1'd0;
#0 ap_return_4_preg = 32'd0;
end

cabac_top_decode_regular grp_decode_regular_fu_193(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_regular_fu_193_ap_start),
    .ap_done(grp_decode_regular_fu_193_ap_done),
    .ap_idle(grp_decode_regular_fu_193_ap_idle),
    .ap_ready(grp_decode_regular_fu_193_ap_ready),
    .p_read(p_read),
    .p_read1(p_read1),
    .p_read4(p_read2),
    .p_read5(p_read3),
    .bStream_address0(grp_decode_regular_fu_193_bStream_address0),
    .bStream_ce0(grp_decode_regular_fu_193_bStream_ce0),
    .bStream_q0(bStream_q0),
    .ctxTables_address0(grp_decode_regular_fu_193_ctxTables_address0),
    .ctxTables_ce0(grp_decode_regular_fu_193_ctxTables_ce0),
    .ctxTables_we0(grp_decode_regular_fu_193_ctxTables_we0),
    .ctxTables_d0(grp_decode_regular_fu_193_ctxTables_d0),
    .ctxTables_q0(ctxTables_q0),
    .baeState_0_constprop_i(baeState_0_constprop_i),
    .baeState_0_constprop_o(grp_decode_regular_fu_193_baeState_0_constprop_o),
    .baeState_0_constprop_o_ap_vld(grp_decode_regular_fu_193_baeState_0_constprop_o_ap_vld),
    .ap_return_0(grp_decode_regular_fu_193_ap_return_0),
    .ap_return_1(grp_decode_regular_fu_193_ap_return_1),
    .ap_return_2(grp_decode_regular_fu_193_ap_return_2),
    .ap_return_3(grp_decode_regular_fu_193_ap_return_3),
    .ap_return_4(grp_decode_regular_fu_193_ap_return_4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_0_preg <= ap_phi_mux_state_bstate_currIdx_1_phi_fu_148_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_1_preg <= ap_phi_mux_state_bstate_n_bits_held_1_phi_fu_158_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_2_preg <= ap_phi_mux_state_bstate_held_aligned_word_1_phi_fu_168_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_3_preg <= ap_phi_mux_binVal_1_phi_fu_178_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_4_preg <= ap_phi_mux_state_ivlOffset_1_phi_fu_187_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_regular_fu_193_ap_start_reg <= 1'b0;
    end else begin
        if (((mode_offset_read_read_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_decode_regular_fu_193_ap_start_reg <= 1'b1;
        end else if ((grp_decode_regular_fu_193_ap_ready == 1'b1)) begin
            grp_decode_regular_fu_193_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_ap_done == 1'b1))) begin
        binVal_1_reg_175 <= grp_decode_regular_fu_193_ap_return_3;
    end else if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        binVal_1_reg_175 <= xor_ln76_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_bstate_currIdx_0_reg_107 <= p_read1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_bstate_currIdx_0_reg_107 <= add_ln6_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_ap_done == 1'b1))) begin
        state_bstate_currIdx_1_reg_145 <= grp_decode_regular_fu_193_ap_return_0;
    end else if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_bstate_currIdx_1_reg_145 <= state_bstate_currIdx_0_reg_107;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_bstate_held_aligned_word_0_reg_127 <= p_read3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_bstate_held_aligned_word_0_reg_127 <= bStream_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_ap_done == 1'b1))) begin
        state_bstate_held_aligned_word_1_reg_165 <= grp_decode_regular_fu_193_ap_return_2;
    end else if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_bstate_held_aligned_word_1_reg_165 <= state_bstate_held_aligned_word_0_reg_127;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_bstate_n_bits_held_0_reg_116 <= add_ln16_fu_279_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_bstate_n_bits_held_0_reg_116 <= 8'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_ap_done == 1'b1))) begin
        state_bstate_n_bits_held_1_reg_155 <= grp_decode_regular_fu_193_ap_return_1;
    end else if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_bstate_n_bits_held_1_reg_155 <= state_bstate_n_bits_held_0_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_ap_done == 1'b1))) begin
        state_ivlOffset_1_reg_184 <= grp_decode_regular_fu_193_ap_return_4;
    end else if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_ivlOffset_1_reg_184 <= ret_9_fu_366_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
                val_reg_136[0] <= zext_ln11_fu_276_p1[0];
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
                val_reg_136[0] <= retVal_fu_301_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_221_p2 == 1'd0) & (mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        retVal_24_reg_438 <= retVal_24_fu_247_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_decode_regular_fu_193_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_binVal_1_phi_fu_178_p4 = xor_ln76_fu_359_p2;
    end else begin
        ap_phi_mux_binVal_1_phi_fu_178_p4 = binVal_1_reg_175;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_state_bstate_currIdx_1_phi_fu_148_p4 = state_bstate_currIdx_0_reg_107;
    end else begin
        ap_phi_mux_state_bstate_currIdx_1_phi_fu_148_p4 = state_bstate_currIdx_1_reg_145;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_state_bstate_held_aligned_word_1_phi_fu_168_p4 = state_bstate_held_aligned_word_0_reg_127;
    end else begin
        ap_phi_mux_state_bstate_held_aligned_word_1_phi_fu_168_p4 = state_bstate_held_aligned_word_1_reg_165;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_state_bstate_n_bits_held_1_phi_fu_158_p4 = state_bstate_n_bits_held_0_reg_116;
    end else begin
        ap_phi_mux_state_bstate_n_bits_held_1_phi_fu_158_p4 = state_bstate_n_bits_held_1_reg_155;
    end
end

always @ (*) begin
    if (((mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_state_ivlOffset_1_phi_fu_187_p4 = ret_9_fu_366_p3;
    end else begin
        ap_phi_mux_state_ivlOffset_1_phi_fu_187_p4 = state_ivlOffset_1_reg_184;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_0 = ap_phi_mux_state_bstate_currIdx_1_phi_fu_148_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_1 = ap_phi_mux_state_bstate_n_bits_held_1_phi_fu_158_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_2 = ap_phi_mux_state_bstate_held_aligned_word_1_phi_fu_168_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_3 = ap_phi_mux_binVal_1_phi_fu_178_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_4 = ap_phi_mux_state_ivlOffset_1_phi_fu_187_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_221_p2 == 1'd1) & (mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        bStream_address0 = zext_ln5_fu_251_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bStream_address0 = grp_decode_regular_fu_193_bStream_address0;
    end else begin
        bStream_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_221_p2 == 1'd1) & (mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bStream_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bStream_ce0 = grp_decode_regular_fu_193_bStream_ce0;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_baeState_0_constprop_o_ap_vld == 1'b1))) begin
        baeState_0_constprop_o = grp_decode_regular_fu_193_baeState_0_constprop_o;
    end else begin
        baeState_0_constprop_o = baeState_0_constprop_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        baeState_0_constprop_o_ap_vld = grp_decode_regular_fu_193_baeState_0_constprop_o_ap_vld;
    end else begin
        baeState_0_constprop_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln13_fu_221_p2 == 1'd1) & (mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((icmp_ln13_fu_221_p2 == 1'd0) & (mode_offset_read_read_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((mode_offset_read_read_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_decode_regular_fu_193_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_231_p2 = ($signed(zext_ln13_fu_217_p1) + $signed(9'd511));

assign add_ln16_fu_279_p2 = ($signed(p_read2) + $signed(8'd255));

assign add_ln6_fu_284_p2 = (p_read1 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ctxTables_address0 = grp_decode_regular_fu_193_ctxTables_address0;

assign ctxTables_ce0 = grp_decode_regular_fu_193_ctxTables_ce0;

assign ctxTables_d0 = grp_decode_regular_fu_193_ctxTables_d0;

assign ctxTables_we0 = grp_decode_regular_fu_193_ctxTables_we0;

assign grp_decode_regular_fu_193_ap_start = grp_decode_regular_fu_193_ap_start_reg;

assign icmp_ln1076_fu_347_p2 = ((ret_fu_335_p3 < baeState_0_constprop_i) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_221_p2 = ((p_read2 == 8'd0) ? 1'b1 : 1'b0);

assign mode_offset_read_read_fu_88_p2 = mode_offset;

assign or_ln1543_fu_320_p2 = (val_reg_136 | shl_ln_fu_312_p3);

assign retVal_23_fu_241_p2 = zext_ln14_fu_227_p1 >> sext_ln14_fu_237_p1;

assign retVal_24_fu_247_p1 = retVal_23_fu_241_p2[0:0];

assign retVal_fu_301_p3 = {{1'd0}, {zext_ln42_fu_297_p1}};

assign ret_9_fu_366_p3 = ((icmp_ln1076_fu_347_p2[0:0] == 1'b1) ? ret_fu_335_p3 : sub_ln229_fu_353_p2);

assign ret_fu_335_p3 = {{tmp_s_fu_326_p4}, {or_ln1543_fu_320_p2}};

assign sext_ln14_fu_237_p1 = $signed(add_ln14_fu_231_p2);

assign shl_ln_fu_312_p3 = {{trunc_ln1543_fu_309_p1}, {1'd0}};

assign sub_ln229_fu_353_p2 = (ret_fu_335_p3 - baeState_0_constprop_i);

assign tmp_fu_289_p3 = bStream_q0[32'd7];

assign tmp_s_fu_326_p4 = {{p_read[30:8]}};

assign trunc_ln1543_fu_309_p1 = p_read[7:0];

assign xor_ln76_fu_359_p2 = (icmp_ln1076_fu_347_p2 ^ 1'd1);

assign zext_ln11_fu_276_p1 = retVal_24_reg_438;

assign zext_ln13_fu_217_p1 = p_read2;

assign zext_ln14_fu_227_p1 = p_read3;

assign zext_ln42_fu_297_p1 = tmp_fu_289_p3;

assign zext_ln5_fu_251_p1 = p_read1;

always @ (posedge ap_clk) begin
    val_reg_136[8:1] <= 8'b00000000;
end

endmodule //cabac_top_decode_decision
