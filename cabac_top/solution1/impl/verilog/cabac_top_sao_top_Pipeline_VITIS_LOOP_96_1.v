// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_sao_top_Pipeline_VITIS_LOOP_96_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_bstate_currIdx_8_reload,
        state_bstate_n_bits_held_8_reload,
        state_bstate_held_aligned_word_8_reload,
        state_ivlOffset_6_reload,
        p_reload7,
        p_reload8,
        p_reload9,
        baeState_0_constprop_load,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        state_bstate_currIdx_11_out,
        state_bstate_currIdx_11_out_ap_vld,
        state_bstate_n_bits_held_11_out,
        state_bstate_n_bits_held_11_out_ap_vld,
        state_bstate_held_aligned_word_11_out,
        state_bstate_held_aligned_word_11_out_ap_vld,
        state_ivlOffset_8_out,
        state_ivlOffset_8_out_ap_vld,
        symbolVal_4_out,
        symbolVal_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_bstate_currIdx_8_reload;
input  [7:0] state_bstate_n_bits_held_8_reload;
input  [7:0] state_bstate_held_aligned_word_8_reload;
input  [31:0] state_ivlOffset_6_reload;
input  [7:0] p_reload7;
input  [7:0] p_reload8;
input  [30:0] p_reload9;
input  [31:0] baeState_0_constprop_load;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [31:0] state_bstate_currIdx_11_out;
output   state_bstate_currIdx_11_out_ap_vld;
output  [7:0] state_bstate_n_bits_held_11_out;
output   state_bstate_n_bits_held_11_out_ap_vld;
output  [7:0] state_bstate_held_aligned_word_11_out;
output   state_bstate_held_aligned_word_11_out_ap_vld;
output  [31:0] state_ivlOffset_8_out;
output   state_ivlOffset_8_out_ap_vld;
output  [7:0] symbolVal_4_out;
output   symbolVal_4_out_ap_vld;

reg ap_idle;
reg bStream_ce0;
reg state_bstate_currIdx_11_out_ap_vld;
reg state_bstate_n_bits_held_11_out_ap_vld;
reg state_bstate_held_aligned_word_11_out_ap_vld;
reg state_ivlOffset_8_out_ap_vld;
reg symbolVal_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln96_fu_285_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln96_reg_612;
reg   [0:0] icmp_ln96_reg_612_pp0_iter2_reg;
reg   [7:0] p_load17_reg_616;
wire   [0:0] icmp_ln13_fu_300_p2;
reg   [0:0] icmp_ln13_reg_621;
wire   [8:0] zext_ln11_fu_376_p1;
wire   [8:0] retVal_fu_392_p3;
wire   [8:0] ap_phi_reg_pp0_iter0_val_reg_228;
reg   [8:0] ap_phi_reg_pp0_iter1_val_reg_228;
reg   [8:0] ap_phi_reg_pp0_iter2_val_reg_228;
reg   [8:0] ap_phi_reg_pp0_iter3_val_reg_228;
wire   [63:0] zext_ln5_fu_320_p1;
wire    ap_block_pp0_stage0;
reg   [29:0] symbolVal_4_fu_96;
wire   [29:0] or_ln_cast_cast_fu_500_p3;
wire    ap_loop_init;
reg   [30:0] p_in72_fu_100;
wire   [30:0] trunc_ln76_fu_486_p1;
reg   [7:0] empty_fu_104;
wire   [7:0] add_ln16_fu_306_p2;
reg   [2:0] binIdx_fu_108;
wire   [2:0] add_ln99_fu_291_p2;
reg   [31:0] ret_fu_112;
wire   [31:0] ret_2_fu_478_p3;
reg   [7:0] state_bstate_n_bits_held_11_fu_116;
reg   [7:0] aligned_word_fu_120;
reg   [7:0] aligned_word_1_fu_124;
reg   [31:0] state_bstate_currIdx_11_fu_128;
wire   [31:0] add_ln6_fu_325_p2;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] zext_ln13_fu_349_p1;
wire   [8:0] add_ln14_fu_356_p2;
wire   [31:0] zext_ln14_fu_352_p1;
wire  signed [31:0] sext_ln14_fu_362_p1;
wire   [31:0] retVal_1_fu_366_p2;
wire   [0:0] retVal_2_fu_372_p1;
wire   [0:0] tmp_fu_380_p3;
wire   [7:0] zext_ln42_fu_388_p1;
wire   [7:0] trunc_ln1543_fu_429_p1;
wire   [8:0] shl_ln1543_1_fu_433_p3;
wire   [22:0] tmp_s_fu_450_p4;
wire   [8:0] or_ln1543_fu_444_p2;
wire   [31:0] ret_1_fu_460_p3;
wire   [0:0] icmp_ln1076_fu_468_p2;
wire   [31:0] sub_ln229_fu_473_p2;
wire   [28:0] trunc_ln99_fu_496_p1;
wire   [0:0] binVal_fu_490_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_398;
reg    ap_condition_402;
reg    ap_condition_405;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            aligned_word_1_fu_124 <= state_bstate_held_aligned_word_8_reload;
        end else if ((1'b1 == ap_condition_398)) begin
            aligned_word_1_fu_124 <= bStream_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            aligned_word_fu_120 <= p_reload7;
        end else if ((1'b1 == ap_condition_398)) begin
            aligned_word_fu_120 <= bStream_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln13_reg_621 == 1'd0) & (icmp_ln96_reg_612 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_val_reg_228 <= zext_ln11_fu_376_p1;
        end else if (((icmp_ln13_reg_621 == 1'd1) & (icmp_ln96_reg_612 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_val_reg_228 <= retVal_fu_392_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_val_reg_228 <= ap_phi_reg_pp0_iter2_val_reg_228;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            binIdx_fu_108 <= 3'd0;
        end else if (((icmp_ln96_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            binIdx_fu_108 <= add_ln99_fu_291_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_104 <= p_reload8;
        end else if ((1'b1 == ap_condition_405)) begin
            empty_fu_104 <= 8'd7;
        end else if ((1'b1 == ap_condition_402)) begin
            empty_fu_104 <= add_ln16_fu_306_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            p_in72_fu_100 <= p_reload9;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd0))) begin
            p_in72_fu_100 <= trunc_ln76_fu_486_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            ret_fu_112 <= state_ivlOffset_6_reload;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd0))) begin
            ret_fu_112 <= ret_2_fu_478_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_currIdx_11_fu_128 <= state_bstate_currIdx_8_reload;
        end else if ((1'b1 == ap_condition_405)) begin
            state_bstate_currIdx_11_fu_128 <= add_ln6_fu_325_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            state_bstate_n_bits_held_11_fu_116 <= state_bstate_n_bits_held_8_reload;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln96_reg_612 == 1'd0))) begin
            state_bstate_n_bits_held_11_fu_116 <= empty_fu_104;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            symbolVal_4_fu_96 <= 30'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd0))) begin
            symbolVal_4_fu_96 <= or_ln_cast_cast_fu_500_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln96_reg_612 <= icmp_ln96_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_reg_228 <= ap_phi_reg_pp0_iter0_val_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_val_reg_228 <= ap_phi_reg_pp0_iter1_val_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_285_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_621 <= icmp_ln13_fu_300_p2;
        p_load17_reg_616 <= empty_fu_104;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln96_reg_612_pp0_iter2_reg <= icmp_ln96_reg_612;
    end
end

always @ (*) begin
    if (((icmp_ln96_fu_285_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bStream_ce0 = 1'b1;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd1))) begin
        state_bstate_currIdx_11_out_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd1))) begin
        state_bstate_held_aligned_word_11_out_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd1))) begin
        state_bstate_n_bits_held_11_out_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd1))) begin
        state_ivlOffset_8_out_ap_vld = 1'b1;
    end else begin
        state_ivlOffset_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln96_reg_612_pp0_iter2_reg == 1'd1))) begin
        symbolVal_4_out_ap_vld = 1'b1;
    end else begin
        symbolVal_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_356_p2 = ($signed(zext_ln13_fu_349_p1) + $signed(9'd511));

assign add_ln16_fu_306_p2 = ($signed(empty_fu_104) + $signed(8'd255));

assign add_ln6_fu_325_p2 = (state_bstate_currIdx_11_fu_128 + 32'd1);

assign add_ln99_fu_291_p2 = (binIdx_fu_108 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_398 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln13_reg_621 == 1'd1) & (icmp_ln96_reg_612 == 1'd0));
end

always @ (*) begin
    ap_condition_402 = ((icmp_ln96_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln13_fu_300_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_405 = ((icmp_ln96_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln13_fu_300_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_val_reg_228 = 'bx;

assign bStream_address0 = zext_ln5_fu_320_p1;

assign binVal_fu_490_p2 = (icmp_ln1076_fu_468_p2 ^ 1'd1);

assign icmp_ln1076_fu_468_p2 = ((ret_1_fu_460_p3 < baeState_0_constprop_load) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_300_p2 = ((empty_fu_104 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_285_p2 = ((binIdx_fu_108 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln1543_fu_444_p2 = (shl_ln1543_1_fu_433_p3 | ap_phi_reg_pp0_iter3_val_reg_228);

assign or_ln_cast_cast_fu_500_p3 = {{trunc_ln99_fu_496_p1}, {binVal_fu_490_p2}};

assign retVal_1_fu_366_p2 = zext_ln14_fu_352_p1 >> sext_ln14_fu_362_p1;

assign retVal_2_fu_372_p1 = retVal_1_fu_366_p2[0:0];

assign retVal_fu_392_p3 = {{1'd0}, {zext_ln42_fu_388_p1}};

assign ret_1_fu_460_p3 = {{tmp_s_fu_450_p4}, {or_ln1543_fu_444_p2}};

assign ret_2_fu_478_p3 = ((icmp_ln1076_fu_468_p2[0:0] == 1'b1) ? ret_1_fu_460_p3 : sub_ln229_fu_473_p2);

assign sext_ln14_fu_362_p1 = $signed(add_ln14_fu_356_p2);

assign shl_ln1543_1_fu_433_p3 = {{trunc_ln1543_fu_429_p1}, {1'd0}};

assign state_bstate_currIdx_11_out = state_bstate_currIdx_11_fu_128;

assign state_bstate_held_aligned_word_11_out = aligned_word_1_fu_124;

assign state_bstate_n_bits_held_11_out = state_bstate_n_bits_held_11_fu_116;

assign state_ivlOffset_8_out = ret_fu_112;

assign sub_ln229_fu_473_p2 = (ret_1_fu_460_p3 - baeState_0_constprop_load);

assign symbolVal_4_out = symbolVal_4_fu_96[7:0];

assign tmp_fu_380_p3 = bStream_q0[32'd7];

assign tmp_s_fu_450_p4 = {{p_in72_fu_100[30:8]}};

assign trunc_ln1543_fu_429_p1 = p_in72_fu_100[7:0];

assign trunc_ln76_fu_486_p1 = ret_2_fu_478_p3[30:0];

assign trunc_ln99_fu_496_p1 = symbolVal_4_fu_96[28:0];

assign zext_ln11_fu_376_p1 = retVal_2_fu_372_p1;

assign zext_ln13_fu_349_p1 = p_load17_reg_616;

assign zext_ln14_fu_352_p1 = aligned_word_fu_120;

assign zext_ln42_fu_388_p1 = tmp_fu_380_p3;

assign zext_ln5_fu_320_p1 = state_bstate_currIdx_11_fu_128;

endmodule //cabac_top_sao_top_Pipeline_VITIS_LOOP_96_1
