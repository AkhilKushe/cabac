// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_sao_top_Pipeline_VITIS_LOOP_38_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_ivlCurrRange_6,
        state_bstate_currIdx_6,
        state_bstate_n_bits_held_6,
        state_bstate_held_aligned_word_6,
        state_ivlOffset_6,
        init_1,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        bStream_address1,
        bStream_ce1,
        bStream_q1,
        symbolVal_7_out,
        symbolVal_7_out_ap_vld,
        state_ivlCurrRange_ret4_out,
        state_ivlCurrRange_ret4_out_ap_vld,
        state_ivlOffset_ret5_out,
        state_ivlOffset_ret5_out_ap_vld,
        state_bstate_currIdx_ret4_out,
        state_bstate_currIdx_ret4_out_ap_vld,
        state_bstate_n_bits_held_ret4_out,
        state_bstate_n_bits_held_ret4_out_ap_vld,
        state_bstate_held_aligned_word_ret5_out,
        state_bstate_held_aligned_word_ret5_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_ivlCurrRange_6;
input  [31:0] state_bstate_currIdx_6;
input  [7:0] state_bstate_n_bits_held_6;
input  [7:0] state_bstate_held_aligned_word_6;
input  [30:0] state_ivlOffset_6;
input  [0:0] init_1;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [2:0] bStream_address1;
output   bStream_ce1;
input  [7:0] bStream_q1;
output  [31:0] symbolVal_7_out;
output   symbolVal_7_out_ap_vld;
output  [31:0] state_ivlCurrRange_ret4_out;
output   state_ivlCurrRange_ret4_out_ap_vld;
output  [31:0] state_ivlOffset_ret5_out;
output   state_ivlOffset_ret5_out_ap_vld;
output  [31:0] state_bstate_currIdx_ret4_out;
output   state_bstate_currIdx_ret4_out_ap_vld;
output  [7:0] state_bstate_n_bits_held_ret4_out;
output   state_bstate_n_bits_held_ret4_out_ap_vld;
output  [7:0] state_bstate_held_aligned_word_ret5_out;
output   state_bstate_held_aligned_word_ret5_out_ap_vld;

reg ap_idle;
reg symbolVal_7_out_ap_vld;
reg state_ivlCurrRange_ret4_out_ap_vld;
reg state_ivlOffset_ret5_out_ap_vld;
reg state_bstate_currIdx_ret4_out_ap_vld;
reg state_bstate_n_bits_held_ret4_out_ap_vld;
reg state_bstate_held_aligned_word_ret5_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [0:0] and_ln42_fu_240_p2;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] init_assign_7_reg_123;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [31:0] symbolVal_load_reg_352;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [31:0] symbolVal_4_fu_201_p2;
reg   [31:0] symbolVal_4_reg_357;
wire    grp_decode_decision_fu_135_ap_start;
wire    grp_decode_decision_fu_135_ap_done;
wire    grp_decode_decision_fu_135_ap_idle;
wire    grp_decode_decision_fu_135_ap_ready;
wire   [2:0] grp_decode_decision_fu_135_bStream_address0;
wire    grp_decode_decision_fu_135_bStream_ce0;
wire   [2:0] grp_decode_decision_fu_135_bStream_address1;
wire    grp_decode_decision_fu_135_bStream_ce1;
wire   [31:0] grp_decode_decision_fu_135_ap_return_0;
wire   [31:0] grp_decode_decision_fu_135_ap_return_1;
wire   [31:0] grp_decode_decision_fu_135_ap_return_2;
wire   [7:0] grp_decode_decision_fu_135_ap_return_3;
wire   [7:0] grp_decode_decision_fu_135_ap_return_4;
wire   [0:0] grp_decode_decision_fu_135_ap_return_5;
wire    ap_loop_init;
reg    grp_decode_decision_fu_135_ap_start_reg;
reg   [4:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] symbolVal_fu_56;
reg   [30:0] state_ivlOffset_7_in_fu_60;
wire   [30:0] trunc_ln39_fu_215_p1;
reg   [7:0] state_bstate_held_aligned_word_7_fu_64;
reg   [7:0] state_bstate_n_bits_held_7_fu_68;
reg   [31:0] state_bstate_currIdx_7_fu_72;
reg   [31:0] state_ivlCurrRange_7_fu_76;
wire   [0:0] icmp_ln42_fu_235_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_ST_fsm_state1_blk;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_ST_fsm_state2_blk;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_decode_decision_fu_135_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_decode_decision grp_decode_decision_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_decision_fu_135_ap_start),
    .ap_done(grp_decode_decision_fu_135_ap_done),
    .ap_idle(grp_decode_decision_fu_135_ap_idle),
    .ap_ready(grp_decode_decision_fu_135_ap_ready),
    .ap_ce(1'b1),
    .init(init_assign_7_reg_123),
    .p_read(state_ivlCurrRange_7_fu_76),
    .p_read1(state_ivlOffset_7_in_fu_60),
    .p_read2(state_bstate_currIdx_7_fu_72),
    .p_read3(state_bstate_n_bits_held_7_fu_68),
    .p_read4(state_bstate_held_aligned_word_7_fu_64),
    .bStream_address0(grp_decode_decision_fu_135_bStream_address0),
    .bStream_ce0(grp_decode_decision_fu_135_bStream_ce0),
    .bStream_q0(bStream_q0),
    .bStream_address1(grp_decode_decision_fu_135_bStream_address1),
    .bStream_ce1(grp_decode_decision_fu_135_bStream_ce1),
    .bStream_q1(bStream_q1),
    .ap_return_0(grp_decode_decision_fu_135_ap_return_0),
    .ap_return_1(grp_decode_decision_fu_135_ap_return_1),
    .ap_return_2(grp_decode_decision_fu_135_ap_return_2),
    .ap_return_3(grp_decode_decision_fu_135_ap_return_3),
    .ap_return_4(grp_decode_decision_fu_135_ap_return_4),
    .ap_return_5(grp_decode_decision_fu_135_ap_return_5)
);

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_decision_fu_135_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_decode_decision_fu_135_ap_start_reg <= 1'b1;
        end else if ((grp_decode_decision_fu_135_ap_ready == 1'b1)) begin
            grp_decode_decision_fu_135_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        init_assign_7_reg_123 <= 1'd0;
    end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        init_assign_7_reg_123 <= init_1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        state_bstate_currIdx_7_fu_72 <= state_bstate_currIdx_6;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        state_bstate_currIdx_7_fu_72 <= grp_decode_decision_fu_135_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        state_bstate_held_aligned_word_7_fu_64 <= state_bstate_held_aligned_word_6;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        state_bstate_held_aligned_word_7_fu_64 <= grp_decode_decision_fu_135_ap_return_4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        state_bstate_n_bits_held_7_fu_68 <= state_bstate_n_bits_held_6;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        state_bstate_n_bits_held_7_fu_68 <= grp_decode_decision_fu_135_ap_return_3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        state_ivlCurrRange_7_fu_76 <= state_ivlCurrRange_6;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        state_ivlCurrRange_7_fu_76 <= grp_decode_decision_fu_135_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        state_ivlOffset_7_in_fu_60 <= state_ivlOffset_6;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        state_ivlOffset_7_in_fu_60 <= trunc_ln39_fu_215_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        symbolVal_fu_56 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == and_ln42_fu_240_p2))) begin
        symbolVal_fu_56 <= symbolVal_4_reg_357;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        symbolVal_4_reg_357 <= symbolVal_4_fu_201_p2;
        symbolVal_load_reg_352 <= symbolVal_fu_56;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        state_bstate_currIdx_ret4_out_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_ret4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        state_bstate_held_aligned_word_ret5_out_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_ret5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        state_bstate_n_bits_held_ret4_out_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_ret4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        state_ivlCurrRange_ret4_out_ap_vld = 1'b1;
    end else begin
        state_ivlCurrRange_ret4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        state_ivlOffset_ret5_out_ap_vld = 1'b1;
    end else begin
        state_ivlOffset_ret5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln42_fu_240_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        symbolVal_7_out_ap_vld = 1'b1;
    end else begin
        symbolVal_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln42_fu_240_p2 = (icmp_ln42_fu_235_p2 & grp_decode_decision_fu_135_ap_return_5);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

assign bStream_address0 = grp_decode_decision_fu_135_bStream_address0;

assign bStream_address1 = grp_decode_decision_fu_135_bStream_address1;

assign bStream_ce0 = grp_decode_decision_fu_135_bStream_ce0;

assign bStream_ce1 = grp_decode_decision_fu_135_bStream_ce1;

assign grp_decode_decision_fu_135_ap_start = grp_decode_decision_fu_135_ap_start_reg;

assign icmp_ln42_fu_235_p2 = ((symbolVal_4_reg_357 < 32'd5) ? 1'b1 : 1'b0);

assign state_bstate_currIdx_ret4_out = grp_decode_decision_fu_135_ap_return_2;

assign state_bstate_held_aligned_word_ret5_out = grp_decode_decision_fu_135_ap_return_4;

assign state_bstate_n_bits_held_ret4_out = grp_decode_decision_fu_135_ap_return_3;

assign state_ivlCurrRange_ret4_out = grp_decode_decision_fu_135_ap_return_0;

assign state_ivlOffset_ret5_out = grp_decode_decision_fu_135_ap_return_1;

assign symbolVal_4_fu_201_p2 = (symbolVal_fu_56 + 32'd1);

assign symbolVal_7_out = symbolVal_load_reg_352;

assign trunc_ln39_fu_215_p1 = grp_decode_decision_fu_135_ap_return_1[30:0];

endmodule //cabac_top_sao_top_Pipeline_VITIS_LOOP_38_1
