// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_decision_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_offset,
        mode_offset,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        bStream_address1,
        bStream_ce1,
        bStream_q1,
        ctxTables_address0,
        ctxTables_ce0,
        ctxTables_we0,
        ctxTables_d0,
        ctxTables_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] init_offset;
input  [0:0] mode_offset;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [2:0] bStream_address1;
output   bStream_ce1;
input  [7:0] bStream_q1;
output  [8:0] ctxTables_address0;
output   ctxTables_ce0;
output   ctxTables_we0;
output  [7:0] ctxTables_d0;
input  [7:0] ctxTables_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [0:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] bStream_address0;
reg bStream_ce0;
reg bStream_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[0:0] ap_return_4;
reg[31:0] ap_return_5;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] mode_offset_read_read_fu_102_p2;
wire   [0:0] init_offset_read_read_fu_108_p2;
wire   [8:0] zext_ln13_fu_346_p1;
reg   [8:0] zext_ln13_reg_584;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln14_fu_356_p1;
reg   [31:0] zext_ln14_reg_592;
wire   [0:0] icmp_ln13_fu_350_p2;
wire   [8:0] zext_ln11_1_fu_513_p1;
wire    ap_CS_fsm_state5;
wire   [7:0] add_ln16_fu_517_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] add_ln6_fu_523_p2;
wire   [8:0] retVal_7_fu_533_p3;
wire    grp_decode_regular_fu_301_ap_start;
wire    grp_decode_regular_fu_301_ap_done;
wire    grp_decode_regular_fu_301_ap_idle;
wire    grp_decode_regular_fu_301_ap_ready;
wire   [2:0] grp_decode_regular_fu_301_bStream_address0;
wire    grp_decode_regular_fu_301_bStream_ce0;
wire   [8:0] grp_decode_regular_fu_301_ctxTables_address0;
wire    grp_decode_regular_fu_301_ctxTables_ce0;
wire    grp_decode_regular_fu_301_ctxTables_we0;
wire   [7:0] grp_decode_regular_fu_301_ctxTables_d0;
wire   [31:0] grp_decode_regular_fu_301_ap_return_0;
wire   [31:0] grp_decode_regular_fu_301_ap_return_1;
wire   [7:0] grp_decode_regular_fu_301_ap_return_2;
wire   [7:0] grp_decode_regular_fu_301_ap_return_3;
wire   [0:0] grp_decode_regular_fu_301_ap_return_4;
wire   [31:0] grp_decode_regular_fu_301_ap_return_5;
reg   [31:0] state_ivlCurrRange_0_reg_149;
reg   [31:0] ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4;
reg   [31:0] state_bstate_currIdx_0_reg_160;
reg   [7:0] ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4;
reg   [7:0] state_bstate_n_bits_held_0_reg_171;
reg   [7:0] ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4;
reg   [7:0] state_bstate_held_aligned_word_0_reg_182;
wire   [31:0] zext_ln11_fu_341_p1;
reg   [31:0] state_ivlOffset_0_reg_193;
reg   [31:0] state_bstate_currIdx_1_reg_203;
reg   [7:0] state_bstate_n_bits_held_1_reg_213;
reg   [7:0] state_bstate_held_aligned_word_1_reg_224;
reg   [8:0] val_reg_234;
reg   [31:0] ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4;
wire    ap_CS_fsm_state4;
reg    ap_block_state4_on_subcall_done;
reg   [31:0] ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4;
reg   [7:0] ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4;
reg   [7:0] ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4;
wire   [0:0] xor_ln76_fu_443_p2;
reg   [0:0] ap_phi_mux_binVal_1_phi_fu_286_p4;
wire   [31:0] ret_2_fu_450_p3;
reg   [31:0] ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4;
reg    grp_decode_regular_fu_301_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln5_fu_360_p1;
wire   [0:0] grp_fu_325_p3;
wire   [8:0] retVal_5_fu_333_p3;
wire   [7:0] trunc_ln1543_fu_395_p1;
wire   [8:0] shl_ln_fu_399_p3;
wire   [22:0] tmp_s_fu_413_p4;
wire   [8:0] or_ln1543_fu_407_p2;
wire   [31:0] ret_fu_423_p3;
wire   [0:0] icmp_ln1076_fu_431_p2;
wire   [31:0] sub_ln229_fu_437_p2;
wire   [8:0] add_ln14_fu_495_p2;
wire  signed [31:0] sext_ln14_fu_500_p1;
wire   [31:0] retVal_9_fu_504_p2;
wire   [0:0] retVal_10_fu_509_p1;
wire   [7:0] zext_ln42_fu_529_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [0:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_decode_regular_fu_301_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 1'd0;
#0 ap_return_5_preg = 32'd0;
end

cabac_top_decode_regular grp_decode_regular_fu_301(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_regular_fu_301_ap_start),
    .ap_done(grp_decode_regular_fu_301_ap_done),
    .ap_idle(grp_decode_regular_fu_301_ap_idle),
    .ap_ready(grp_decode_regular_fu_301_ap_ready),
    .p_read(state_ivlCurrRange_0_reg_149),
    .p_read1(state_ivlOffset_0_reg_193),
    .p_read4(state_bstate_currIdx_0_reg_160),
    .p_read5(state_bstate_n_bits_held_0_reg_171),
    .p_read6(state_bstate_held_aligned_word_0_reg_182),
    .bStream_address0(grp_decode_regular_fu_301_bStream_address0),
    .bStream_ce0(grp_decode_regular_fu_301_bStream_ce0),
    .bStream_q0(bStream_q0),
    .ctxTables_address0(grp_decode_regular_fu_301_ctxTables_address0),
    .ctxTables_ce0(grp_decode_regular_fu_301_ctxTables_ce0),
    .ctxTables_we0(grp_decode_regular_fu_301_ctxTables_we0),
    .ctxTables_d0(grp_decode_regular_fu_301_ctxTables_d0),
    .ctxTables_q0(ctxTables_q0),
    .ap_return_0(grp_decode_regular_fu_301_ap_return_0),
    .ap_return_1(grp_decode_regular_fu_301_ap_return_1),
    .ap_return_2(grp_decode_regular_fu_301_ap_return_2),
    .ap_return_3(grp_decode_regular_fu_301_ap_return_3),
    .ap_return_4(grp_decode_regular_fu_301_ap_return_4),
    .ap_return_5(grp_decode_regular_fu_301_ap_return_5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_return_0_preg <= ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_return_1_preg <= ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_return_2_preg <= ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_return_3_preg <= ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_return_4_preg <= ap_phi_mux_binVal_1_phi_fu_286_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_return_5_preg <= ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_regular_fu_301_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_decode_regular_fu_301_ap_start_reg <= 1'b1;
        end else if ((grp_decode_regular_fu_301_ap_ready == 1'b1)) begin
            grp_decode_regular_fu_301_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_bstate_currIdx_0_reg_160 <= p_read2;
    end else if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        state_bstate_currIdx_0_reg_160 <= 32'd2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_bstate_currIdx_1_reg_203 <= state_bstate_currIdx_0_reg_160;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_bstate_currIdx_1_reg_203 <= add_ln6_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_bstate_held_aligned_word_0_reg_182 <= p_read4;
    end else if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        state_bstate_held_aligned_word_0_reg_182 <= bStream_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_bstate_held_aligned_word_1_reg_224 <= state_bstate_held_aligned_word_0_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_bstate_held_aligned_word_1_reg_224 <= bStream_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_bstate_n_bits_held_0_reg_171 <= p_read3;
    end else if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        state_bstate_n_bits_held_0_reg_171 <= 8'd7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_bstate_n_bits_held_1_reg_213 <= add_ln16_fu_517_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_bstate_n_bits_held_1_reg_213 <= 8'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_ivlCurrRange_0_reg_149 <= p_read;
    end else if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        state_ivlCurrRange_0_reg_149 <= 32'd510;
    end
end

always @ (posedge ap_clk) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_ivlOffset_0_reg_193 <= p_read1;
    end else if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        state_ivlOffset_0_reg_193 <= zext_ln11_fu_341_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
                val_reg_234[0] <= zext_ln11_1_fu_513_p1[0];
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
                val_reg_234[0] <= retVal_7_fu_533_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((mode_offset_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_584[7 : 0] <= zext_ln13_fu_346_p1[7 : 0];
        zext_ln14_reg_592[7 : 0] <= zext_ln14_fu_356_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((mode_offset == 1'd0)) begin
            ap_phi_mux_binVal_1_phi_fu_286_p4 = grp_decode_regular_fu_301_ap_return_4;
        end else if ((mode_offset_read_read_fu_102_p2 == 1'd1)) begin
            ap_phi_mux_binVal_1_phi_fu_286_p4 = xor_ln76_fu_443_p2;
        end else begin
            ap_phi_mux_binVal_1_phi_fu_286_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_binVal_1_phi_fu_286_p4 = 'bx;
    end
end

always @ (*) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4 = 32'd2;
    end else begin
        ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4 = state_bstate_currIdx_0_reg_160;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((mode_offset == 1'd0)) begin
            ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 = grp_decode_regular_fu_301_ap_return_1;
        end else if ((mode_offset_read_read_fu_102_p2 == 1'd1)) begin
            ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 = state_bstate_currIdx_1_reg_203;
        end else begin
            ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 = 'bx;
    end
end

always @ (*) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4 = bStream_q0;
    end else begin
        ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4 = state_bstate_held_aligned_word_0_reg_182;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((mode_offset == 1'd0)) begin
            ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 = grp_decode_regular_fu_301_ap_return_3;
        end else if ((mode_offset_read_read_fu_102_p2 == 1'd1)) begin
            ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 = state_bstate_held_aligned_word_1_reg_224;
        end else begin
            ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 = 'bx;
    end
end

always @ (*) begin
    if (((init_offset_read_read_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 = 8'd7;
    end else begin
        ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 = state_bstate_n_bits_held_0_reg_171;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((mode_offset == 1'd0)) begin
            ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 = grp_decode_regular_fu_301_ap_return_2;
        end else if ((mode_offset_read_read_fu_102_p2 == 1'd1)) begin
            ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 = state_bstate_n_bits_held_1_reg_213;
        end else begin
            ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((mode_offset == 1'd0)) begin
            ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 = grp_decode_regular_fu_301_ap_return_0;
        end else if ((mode_offset_read_read_fu_102_p2 == 1'd1)) begin
            ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 = state_ivlCurrRange_0_reg_149;
        end else begin
            ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((mode_offset == 1'd0)) begin
            ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 = grp_decode_regular_fu_301_ap_return_5;
        end else if ((mode_offset_read_read_fu_102_p2 == 1'd1)) begin
            ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 = ret_2_fu_450_p3;
        end else begin
            ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_return_0 = ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_return_1 = ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_return_2 = ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_return_3 = ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_return_4 = ap_phi_mux_binVal_1_phi_fu_286_p4;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_return_5 = ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bStream_address0 = zext_ln5_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bStream_address0 = 64'd1;
    end else if (((mode_offset == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        bStream_address0 = grp_decode_regular_fu_301_bStream_address0;
    end else begin
        bStream_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        bStream_ce0 = 1'b1;
    end else if (((mode_offset == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        bStream_ce0 = grp_decode_regular_fu_301_bStream_ce0;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bStream_ce1 = 1'b1;
    end else begin
        bStream_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_350_p2 == 1'd1) & (mode_offset_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln13_fu_350_p2 == 1'd0) & (mode_offset_read_read_fu_102_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_495_p2 = ($signed(zext_ln13_reg_584) + $signed(9'd511));

assign add_ln16_fu_517_p2 = ($signed(state_bstate_n_bits_held_0_reg_171) + $signed(8'd255));

assign add_ln6_fu_523_p2 = (state_bstate_currIdx_0_reg_160 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((mode_offset == 1'd0) & (grp_decode_regular_fu_301_ap_done == 1'b0));
end

assign bStream_address1 = 64'd0;

assign ctxTables_address0 = grp_decode_regular_fu_301_ctxTables_address0;

assign ctxTables_ce0 = grp_decode_regular_fu_301_ctxTables_ce0;

assign ctxTables_d0 = grp_decode_regular_fu_301_ctxTables_d0;

assign ctxTables_we0 = grp_decode_regular_fu_301_ctxTables_we0;

assign grp_decode_regular_fu_301_ap_start = grp_decode_regular_fu_301_ap_start_reg;

assign grp_fu_325_p3 = bStream_q0[32'd7];

assign icmp_ln1076_fu_431_p2 = ((ret_fu_423_p3 < state_ivlCurrRange_0_reg_149) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_350_p2 = ((ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 == 8'd0) ? 1'b1 : 1'b0);

assign init_offset_read_read_fu_108_p2 = init_offset;

assign mode_offset_read_read_fu_102_p2 = mode_offset;

assign or_ln1543_fu_407_p2 = (val_reg_234 | shl_ln_fu_399_p3);

assign retVal_10_fu_509_p1 = retVal_9_fu_504_p2[0:0];

assign retVal_5_fu_333_p3 = {{bStream_q1}, {grp_fu_325_p3}};

assign retVal_7_fu_533_p3 = {{1'd0}, {zext_ln42_fu_529_p1}};

assign retVal_9_fu_504_p2 = zext_ln14_reg_592 >> sext_ln14_fu_500_p1;

assign ret_2_fu_450_p3 = ((icmp_ln1076_fu_431_p2[0:0] == 1'b1) ? ret_fu_423_p3 : sub_ln229_fu_437_p2);

assign ret_fu_423_p3 = {{tmp_s_fu_413_p4}, {or_ln1543_fu_407_p2}};

assign sext_ln14_fu_500_p1 = $signed(add_ln14_fu_495_p2);

assign shl_ln_fu_399_p3 = {{trunc_ln1543_fu_395_p1}, {1'd0}};

assign sub_ln229_fu_437_p2 = (ret_fu_423_p3 - state_ivlCurrRange_0_reg_149);

assign tmp_s_fu_413_p4 = {{state_ivlOffset_0_reg_193[30:8]}};

assign trunc_ln1543_fu_395_p1 = state_ivlOffset_0_reg_193[7:0];

assign xor_ln76_fu_443_p2 = (icmp_ln1076_fu_431_p2 ^ 1'd1);

assign zext_ln11_1_fu_513_p1 = retVal_10_fu_509_p1;

assign zext_ln11_fu_341_p1 = retVal_5_fu_333_p3;

assign zext_ln13_fu_346_p1 = ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4;

assign zext_ln14_fu_356_p1 = ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4;

assign zext_ln42_fu_529_p1 = grp_fu_325_p3;

assign zext_ln5_fu_360_p1 = ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4;

always @ (posedge ap_clk) begin
    zext_ln13_reg_584[8] <= 1'b0;
    zext_ln14_reg_592[31:8] <= 24'b000000000000000000000000;
    val_reg_234[8:1] <= 8'b00000000;
end

endmodule //cabac_top_decode_decision_1
