// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_stream_init_buffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        streamCtxRAM1_din,
        streamCtxRAM1_full_n,
        streamCtxRAM1_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] streamCtxRAM1_din;
input   streamCtxRAM1_full_n;
output   streamCtxRAM1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg streamCtxRAM1_write;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] I_FRAME_INIT_VALS_address0;
reg    I_FRAME_INIT_VALS_ce0;
wire   [7:0] I_FRAME_INIT_VALS_q0;
reg    streamCtxRAM1_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln41_fu_109_p2;
wire   [3:0] trunc_ln12_fu_126_p1;
reg   [3:0] trunc_ln12_reg_290;
wire    ap_CS_fsm_state3;
reg   [7:0] trunc_ln_reg_295;
wire   [8:0] add_ln14_3_fu_206_p2;
reg   [8:0] add_ln14_3_reg_300;
wire    ap_CS_fsm_state4;
wire   [6:0] initState_fu_234_p3;
reg   [6:0] initState_reg_306;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_reg_312;
wire   [63:0] zext_ln41_fu_104_p1;
reg   [2:0] i_fu_72;
wire   [2:0] add_ln41_fu_115_p2;
wire   [3:0] tmp_1_fu_130_p4;
wire   [10:0] and_ln_fu_140_p3;
wire   [8:0] and_ln14_1_fu_152_p3;
wire   [11:0] zext_ln14_2_fu_160_p1;
wire   [11:0] add_ln14_1_fu_164_p2;
wire   [11:0] zext_ln14_1_fu_148_p1;
wire   [11:0] add_ln14_fu_170_p2;
wire   [6:0] shl_ln_fu_186_p3;
wire  signed [8:0] sext_ln14_fu_197_p1;
wire   [8:0] add_ln14_2_fu_200_p2;
wire   [8:0] zext_ln14_fu_193_p1;
wire   [0:0] icmp_ln6_fu_212_p2;
wire   [8:0] select_ln6_fu_217_p3;
wire   [0:0] icmp_ln12_fu_228_p2;
wire   [6:0] trunc_ln11_fu_224_p1;
wire   [6:0] xor_ln16_fu_250_p2;
wire   [6:0] sub_ln16_fu_255_p2;
wire   [6:0] select_ln16_fu_260_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

cabac_top_stream_init_buffer_I_FRAME_INIT_VALS_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
I_FRAME_INIT_VALS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(I_FRAME_INIT_VALS_address0),
    .ce0(I_FRAME_INIT_VALS_ce0),
    .q0(I_FRAME_INIT_VALS_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_72 <= 3'd0;
    end else if (((icmp_ln41_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_72 <= add_ln41_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln14_3_reg_300[8 : 1] <= add_ln14_3_fu_206_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        initState_reg_306 <= initState_fu_234_p3;
        tmp_reg_312 <= initState_fu_234_p3[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln12_reg_290 <= trunc_ln12_fu_126_p1;
        trunc_ln_reg_295 <= {{add_ln14_fu_170_p2[11:4]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        I_FRAME_INIT_VALS_ce0 = 1'b1;
    end else begin
        I_FRAME_INIT_VALS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((streamCtxRAM1_full_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln41_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        streamCtxRAM1_blk_n = streamCtxRAM1_full_n;
    end else begin
        streamCtxRAM1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((streamCtxRAM1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        streamCtxRAM1_write = 1'b1;
    end else begin
        streamCtxRAM1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln41_fu_109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((streamCtxRAM1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_FRAME_INIT_VALS_address0 = zext_ln41_fu_104_p1;

assign add_ln14_1_fu_164_p2 = ($signed(zext_ln14_2_fu_160_p1) + $signed(12'd2656));

assign add_ln14_2_fu_200_p2 = ($signed(sext_ln14_fu_197_p1) + $signed(9'd496));

assign add_ln14_3_fu_206_p2 = (add_ln14_2_fu_200_p2 + zext_ln14_fu_193_p1);

assign add_ln14_fu_170_p2 = (add_ln14_1_fu_164_p2 + zext_ln14_1_fu_148_p1);

assign add_ln41_fu_115_p2 = (i_fu_72 + 3'd1);

assign and_ln14_1_fu_152_p3 = {{tmp_1_fu_130_p4}, {5'd0}};

assign and_ln_fu_140_p3 = {{tmp_1_fu_130_p4}, {7'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign icmp_ln12_fu_228_p2 = ((select_ln6_fu_217_p3 < 9'd126) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_109_p2 = ((i_fu_72 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_212_p2 = (($signed(add_ln14_3_reg_300) < $signed(9'd1)) ? 1'b1 : 1'b0);

assign initState_fu_234_p3 = ((icmp_ln12_fu_228_p2[0:0] == 1'b1) ? trunc_ln11_fu_224_p1 : 7'd126);

assign select_ln16_fu_260_p3 = ((tmp_reg_312[0:0] == 1'b1) ? xor_ln16_fu_250_p2 : sub_ln16_fu_255_p2);

assign select_ln6_fu_217_p3 = ((icmp_ln6_fu_212_p2[0:0] == 1'b1) ? 9'd1 : add_ln14_3_reg_300);

assign sext_ln14_fu_197_p1 = $signed(trunc_ln_reg_295);

assign shl_ln_fu_186_p3 = {{trunc_ln12_reg_290}, {3'd0}};

assign streamCtxRAM1_din = {{select_ln16_fu_260_p3}, {tmp_reg_312}};

assign sub_ln16_fu_255_p2 = (7'd63 - initState_reg_306);

assign tmp_1_fu_130_p4 = {{I_FRAME_INIT_VALS_q0[7:4]}};

assign trunc_ln11_fu_224_p1 = select_ln6_fu_217_p3[6:0];

assign trunc_ln12_fu_126_p1 = I_FRAME_INIT_VALS_q0[3:0];

assign xor_ln16_fu_250_p2 = (initState_reg_306 ^ 7'd64);

assign zext_ln14_1_fu_148_p1 = and_ln_fu_140_p3;

assign zext_ln14_2_fu_160_p1 = and_ln14_1_fu_152_p3;

assign zext_ln14_fu_193_p1 = shl_ln_fu_186_p3;

assign zext_ln41_fu_104_p1 = i_fu_72;

always @ (posedge ap_clk) begin
    add_ln14_3_reg_300[0] <= 1'b0;
end

endmodule //cabac_top_stream_init_buffer
