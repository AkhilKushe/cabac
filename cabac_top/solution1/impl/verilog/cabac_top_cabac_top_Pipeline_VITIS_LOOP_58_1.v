// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_cabac_top_Pipeline_VITIS_LOOP_58_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bst_fifo_dout,
        bst_fifo_empty_n,
        bst_fifo_read,
        bitOut_TREADY,
        bitOut_TDATA,
        bitOut_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] bst_fifo_dout;
input   bst_fifo_empty_n;
output   bst_fifo_read;
input   bitOut_TREADY;
output  [31:0] bitOut_TDATA;
output   bitOut_TVALID;

reg ap_idle;
reg bst_fifo_read;
reg bitOut_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln58_reg_317;
reg   [0:0] icmp_ln13_reg_326;
reg    ap_predicate_op34_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_121_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    bitOut_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    bst_fifo_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln58_reg_317_pp0_iter1_reg;
reg   [0:0] icmp_ln58_reg_317_pp0_iter2_reg;
reg   [7:0] bState_n_bits_held_load_reg_321;
reg   [7:0] bState_n_bits_held_load_reg_321_pp0_iter1_reg;
reg   [7:0] bState_n_bits_held_load_reg_321_pp0_iter2_reg;
wire   [0:0] icmp_ln13_fu_140_p2;
reg   [0:0] icmp_ln13_reg_326_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_326_pp0_iter2_reg;
wire   [1:0] xor_ln22_fu_146_p2;
reg   [1:0] xor_ln22_reg_330;
reg   [1:0] xor_ln22_reg_330_pp0_iter1_reg;
reg   [1:0] xor_ln22_reg_330_pp0_iter2_reg;
wire   [2:0] next_n_held_bits_fu_156_p2;
reg   [2:0] next_n_held_bits_reg_335;
reg   [2:0] next_n_held_bits_reg_335_pp0_iter1_reg;
wire   [7:0] add_ln14_fu_171_p2;
reg   [7:0] add_ln14_reg_340;
reg   [7:0] add_ln14_reg_340_pp0_iter1_reg;
reg   [7:0] add_ln14_reg_340_pp0_iter2_reg;
reg   [7:0] retVal_6_reg_345;
reg   [7:0] bState_held_aligned_word_load_reg_351;
wire   [31:0] lshr_ln42_fu_200_p2;
reg   [31:0] lshr_ln42_reg_357;
reg   [20:0] tmp_1_reg_362;
reg   [31:0] ap_phi_mux_bitVal_phi_fu_96_p4;
wire   [31:0] zext_ln11_fu_290_p1;
wire   [31:0] ap_phi_reg_pp0_iter3_bitVal_reg_93;
wire   [31:0] retVal_5_fu_269_p3;
reg   [3:0] i_fu_68;
wire   [3:0] i_3_fu_127_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [7:0] bState_n_bits_held_fu_72;
wire   [7:0] zext_ln40_1_fu_162_p1;
reg   [7:0] ap_sig_allocacmp_bState_n_bits_held_load;
reg   [7:0] bState_held_aligned_word_fu_76;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] empty_27_fu_136_p1;
wire   [2:0] zext_ln24_fu_152_p1;
wire   [31:0] aligned_word_fu_190_p3;
wire   [31:0] zext_ln40_fu_197_p1;
wire   [9:0] zext_ln13_fu_220_p1;
wire   [9:0] shl_ln23_fu_226_p2;
wire   [7:0] trunc_ln23_fu_232_p1;
wire   [7:0] xor_ln23_fu_236_p2;
wire   [7:0] retVal_2_fu_242_p2;
wire   [10:0] zext_ln11_1_fu_247_p1;
wire   [10:0] zext_ln24_1_fu_251_p1;
wire   [10:0] trunc_ln42_fu_260_p1;
wire   [10:0] retVal_3_fu_254_p2;
wire   [10:0] or_ln42_fu_263_p2;
wire   [31:0] zext_ln23_fu_223_p1;
wire   [31:0] zext_ln14_fu_277_p1;
wire   [31:0] retVal_fu_280_p2;
wire   [2:0] retVal_1_fu_286_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_335;
reg    ap_condition_339;
reg    ap_condition_342;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            bState_held_aligned_word_fu_76 <= 8'd0;
        end else if ((1'b1 == ap_condition_335)) begin
            bState_held_aligned_word_fu_76 <= retVal_6_reg_345;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_342)) begin
            bState_n_bits_held_fu_72 <= add_ln14_fu_171_p2;
        end else if ((1'b1 == ap_condition_339)) begin
            bState_n_bits_held_fu_72 <= zext_ln40_1_fu_162_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            bState_n_bits_held_fu_72 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= i_3_fu_127_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_121_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_fu_140_p2 == 1'd1))) begin
        add_ln14_reg_340 <= add_ln14_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln14_reg_340_pp0_iter1_reg <= add_ln14_reg_340;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        bState_n_bits_held_load_reg_321_pp0_iter1_reg <= bState_n_bits_held_load_reg_321;
        icmp_ln13_reg_326_pp0_iter1_reg <= icmp_ln13_reg_326;
        icmp_ln58_reg_317 <= icmp_ln58_fu_121_p2;
        icmp_ln58_reg_317_pp0_iter1_reg <= icmp_ln58_reg_317;
        next_n_held_bits_reg_335_pp0_iter1_reg <= next_n_held_bits_reg_335;
        xor_ln22_reg_330_pp0_iter1_reg <= xor_ln22_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln14_reg_340_pp0_iter2_reg <= add_ln14_reg_340_pp0_iter1_reg;
        bState_n_bits_held_load_reg_321_pp0_iter2_reg <= bState_n_bits_held_load_reg_321_pp0_iter1_reg;
        icmp_ln13_reg_326_pp0_iter2_reg <= icmp_ln13_reg_326_pp0_iter1_reg;
        icmp_ln58_reg_317_pp0_iter2_reg <= icmp_ln58_reg_317_pp0_iter1_reg;
        xor_ln22_reg_330_pp0_iter2_reg <= xor_ln22_reg_330_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_reg_317_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bState_held_aligned_word_load_reg_351 <= bState_held_aligned_word_fu_76;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_121_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bState_n_bits_held_load_reg_321 <= ap_sig_allocacmp_bState_n_bits_held_load;
        icmp_ln13_reg_326 <= icmp_ln13_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_reg_317_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln13_reg_326_pp0_iter1_reg == 1'd0))) begin
        lshr_ln42_reg_357 <= lshr_ln42_fu_200_p2;
        tmp_1_reg_362 <= {{lshr_ln42_fu_200_p2[31:11]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_121_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_fu_140_p2 == 1'd0))) begin
        next_n_held_bits_reg_335 <= next_n_held_bits_fu_156_p2;
        xor_ln22_reg_330 <= xor_ln22_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op34_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        retVal_6_reg_345 <= bst_fifo_dout;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_121_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln58_reg_317_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln13_reg_326_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_bitVal_phi_fu_96_p4 = retVal_5_fu_269_p3;
        end else if ((icmp_ln13_reg_326_pp0_iter2_reg == 1'd1)) begin
            ap_phi_mux_bitVal_phi_fu_96_p4 = zext_ln11_fu_290_p1;
        end else begin
            ap_phi_mux_bitVal_phi_fu_96_p4 = ap_phi_reg_pp0_iter3_bitVal_reg_93;
        end
    end else begin
        ap_phi_mux_bitVal_phi_fu_96_p4 = ap_phi_reg_pp0_iter3_bitVal_reg_93;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bState_n_bits_held_load = 8'd0;
    end else begin
        ap_sig_allocacmp_bState_n_bits_held_load = bState_n_bits_held_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bitOut_TDATA_blk_n = bitOut_TREADY;
    end else begin
        bitOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        bitOut_TVALID = 1'b1;
    end else begin
        bitOut_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op34_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bst_fifo_blk_n = bst_fifo_empty_n;
    end else begin
        bst_fifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op34_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bst_fifo_read = 1'b1;
    end else begin
        bst_fifo_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_171_p2 = ($signed(ap_sig_allocacmp_bState_n_bits_held_load) + $signed(8'd253));

assign aligned_word_fu_190_p3 = {{24'd0}, {retVal_6_reg_345}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((bitOut_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op34_read_state2 == 1'b1) & (bst_fifo_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((bitOut_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op34_read_state2 == 1'b1) & (bst_fifo_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((bitOut_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_predicate_op34_read_state2 == 1'b1) & (bst_fifo_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op34_read_state2 == 1'b1) & (bst_fifo_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (bitOut_TREADY == 1'b0);
end

always @ (*) begin
    ap_condition_335 = ((icmp_ln58_reg_317_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln13_reg_326_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_339 = ((icmp_ln58_fu_121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_140_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_342 = ((icmp_ln58_fu_121_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln13_fu_140_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter3_bitVal_reg_93 = 'bx;

always @ (*) begin
    ap_predicate_op34_read_state2 = ((icmp_ln13_reg_326 == 1'd0) & (icmp_ln58_reg_317 == 1'd0));
end

assign bitOut_TDATA = ap_phi_mux_bitVal_phi_fu_96_p4;

assign empty_27_fu_136_p1 = ap_sig_allocacmp_bState_n_bits_held_load[1:0];

assign i_3_fu_127_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign icmp_ln13_fu_140_p2 = ((ap_sig_allocacmp_bState_n_bits_held_load > 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_121_p2 = ((ap_sig_allocacmp_i_2 == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln42_fu_200_p2 = aligned_word_fu_190_p3 >> zext_ln40_fu_197_p1;

assign next_n_held_bits_fu_156_p2 = (3'd0 - zext_ln24_fu_152_p1);

assign or_ln42_fu_263_p2 = (trunc_ln42_fu_260_p1 | retVal_3_fu_254_p2);

assign retVal_1_fu_286_p1 = retVal_fu_280_p2[2:0];

assign retVal_2_fu_242_p2 = (xor_ln23_fu_236_p2 & bState_held_aligned_word_load_reg_351);

assign retVal_3_fu_254_p2 = zext_ln11_1_fu_247_p1 << zext_ln24_1_fu_251_p1;

assign retVal_5_fu_269_p3 = {{tmp_1_reg_362}, {or_ln42_fu_263_p2}};

assign retVal_fu_280_p2 = zext_ln23_fu_223_p1 >> zext_ln14_fu_277_p1;

assign shl_ln23_fu_226_p2 = 10'd255 << zext_ln13_fu_220_p1;

assign trunc_ln23_fu_232_p1 = shl_ln23_fu_226_p2[7:0];

assign trunc_ln42_fu_260_p1 = lshr_ln42_reg_357[10:0];

assign xor_ln22_fu_146_p2 = (empty_27_fu_136_p1 ^ 2'd3);

assign xor_ln23_fu_236_p2 = (trunc_ln23_fu_232_p1 ^ 8'd255);

assign zext_ln11_1_fu_247_p1 = retVal_2_fu_242_p2;

assign zext_ln11_fu_290_p1 = retVal_1_fu_286_p1;

assign zext_ln13_fu_220_p1 = bState_n_bits_held_load_reg_321_pp0_iter2_reg;

assign zext_ln14_fu_277_p1 = add_ln14_reg_340_pp0_iter2_reg;

assign zext_ln23_fu_223_p1 = bState_held_aligned_word_load_reg_351;

assign zext_ln24_1_fu_251_p1 = xor_ln22_reg_330_pp0_iter2_reg;

assign zext_ln24_fu_152_p1 = xor_ln22_fu_146_p2;

assign zext_ln40_1_fu_162_p1 = next_n_held_bits_fu_156_p2;

assign zext_ln40_fu_197_p1 = next_n_held_bits_reg_335_pp0_iter1_reg;

endmodule //cabac_top_cabac_top_Pipeline_VITIS_LOOP_58_1
