// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_cabac_top_Pipeline_VITIS_LOOP_63_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bitOut_TREADY,
        tempBst_0_01_reload,
        tempBst_1_02_reload,
        tempBst_2_03_reload,
        tempBst_3_04_reload,
        bitOut_TDATA,
        bitOut_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   bitOut_TREADY;
input  [7:0] tempBst_0_01_reload;
input  [7:0] tempBst_1_02_reload;
input  [7:0] tempBst_2_03_reload;
input  [7:0] tempBst_3_04_reload;
output  [31:0] bitOut_TDATA;
output   bitOut_TVALID;

reg ap_idle;
reg bitOut_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln63_fu_138_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    bitOut_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] bState_n_bits_held_load_reg_403;
reg   [7:0] bState_n_bits_held_load_reg_403_pp0_iter1_reg;
wire   [0:0] icmp_ln13_fu_153_p2;
reg   [0:0] icmp_ln13_reg_409;
reg   [0:0] icmp_ln13_reg_409_pp0_iter1_reg;
wire   [7:0] sub_ln22_fu_165_p2;
reg   [7:0] sub_ln22_reg_416;
wire   [2:0] next_n_held_bits_fu_175_p2;
reg   [2:0] next_n_held_bits_reg_421;
reg   [7:0] bState_held_aligned_word_load_reg_426;
wire   [31:0] retVal_5_fu_284_p2;
reg   [31:0] retVal_5_reg_431;
reg   [3:0] i_fu_68;
wire   [3:0] i_3_fu_144_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [31:0] bState_currIdx_fu_72;
wire   [31:0] bState_currIdx_2_fu_297_p3;
reg   [7:0] bState_n_bits_held_fu_76;
wire   [7:0] bState_n_bits_held_1_fu_185_p3;
reg   [7:0] ap_sig_allocacmp_bState_n_bits_held_load;
reg   [7:0] bState_held_aligned_word_fu_80;
wire   [7:0] bState_held_aligned_word_2_fu_290_p3;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] trunc_ln24_fu_171_p1;
wire   [7:0] add_ln14_1_fu_159_p2;
wire   [7:0] zext_ln40_1_fu_181_p1;
wire   [31:0] zext_ln13_fu_209_p1;
wire   [31:0] shl_ln23_fu_212_p2;
wire   [7:0] trunc_ln23_fu_218_p1;
wire   [7:0] xor_ln23_fu_222_p2;
wire   [7:0] retVal_2_fu_228_p2;
wire   [31:0] zext_ln11_1_fu_234_p1;
wire   [31:0] zext_ln24_fu_238_p1;
wire   [1:0] retVal_7_fu_251_p5;
wire   [7:0] retVal_7_fu_251_p6;
wire   [31:0] aligned_word_fu_267_p3;
wire   [31:0] zext_ln40_fu_275_p1;
wire   [31:0] lshr_ln42_fu_278_p2;
wire   [31:0] retVal_3_fu_241_p2;
wire   [31:0] bState_currIdx_1_fu_261_p2;
wire   [8:0] zext_ln13_1_fu_314_p1;
wire   [8:0] add_ln14_fu_320_p2;
wire   [31:0] zext_ln23_fu_317_p1;
wire  signed [31:0] sext_ln14_fu_326_p1;
wire   [31:0] retVal_fu_330_p2;
wire   [2:0] retVal_1_fu_336_p1;
wire   [31:0] zext_ln11_fu_340_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U13(
    .din0(tempBst_0_01_reload),
    .din1(tempBst_1_02_reload),
    .din2(tempBst_2_03_reload),
    .din3(tempBst_3_04_reload),
    .din4(retVal_7_fu_251_p5),
    .dout(retVal_7_fu_251_p6)
);

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bState_currIdx_fu_72 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bState_currIdx_fu_72 <= bState_currIdx_2_fu_297_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            bState_held_aligned_word_fu_80 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            bState_held_aligned_word_fu_80 <= bState_held_aligned_word_2_fu_290_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln63_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            bState_n_bits_held_fu_76 <= bState_n_bits_held_1_fu_185_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            bState_n_bits_held_fu_76 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln63_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= i_3_fu_144_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        bState_held_aligned_word_load_reg_426 <= bState_held_aligned_word_fu_80;
        bState_n_bits_held_load_reg_403_pp0_iter1_reg <= bState_n_bits_held_load_reg_403;
        icmp_ln13_reg_409_pp0_iter1_reg <= icmp_ln13_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_138_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bState_n_bits_held_load_reg_403 <= ap_sig_allocacmp_bState_n_bits_held_load;
        icmp_ln13_reg_409 <= icmp_ln13_fu_153_p2;
        next_n_held_bits_reg_421 <= next_n_held_bits_fu_175_p2;
        sub_ln22_reg_416 <= sub_ln22_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_reg_409 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        retVal_5_reg_431 <= retVal_5_fu_284_p2;
    end
end

always @ (*) begin
    if (((icmp_ln63_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_bState_n_bits_held_load = 8'd0;
    end else begin
        ap_sig_allocacmp_bState_n_bits_held_load = bState_n_bits_held_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bitOut_TDATA_blk_n = bitOut_TREADY;
    end else begin
        bitOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bitOut_TVALID = 1'b1;
    end else begin
        bitOut_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_159_p2 = ($signed(ap_sig_allocacmp_bState_n_bits_held_load) + $signed(8'd253));

assign add_ln14_fu_320_p2 = ($signed(zext_ln13_1_fu_314_p1) + $signed(9'd509));

assign aligned_word_fu_267_p3 = {{24'd0}, {retVal_7_fu_251_p6}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((bitOut_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((bitOut_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((bitOut_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (bitOut_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bState_currIdx_1_fu_261_p2 = (bState_currIdx_fu_72 + 32'd1);

assign bState_currIdx_2_fu_297_p3 = ((icmp_ln13_reg_409[0:0] == 1'b1) ? bState_currIdx_fu_72 : bState_currIdx_1_fu_261_p2);

assign bState_held_aligned_word_2_fu_290_p3 = ((icmp_ln13_reg_409[0:0] == 1'b1) ? bState_held_aligned_word_fu_80 : retVal_7_fu_251_p6);

assign bState_n_bits_held_1_fu_185_p3 = ((icmp_ln13_fu_153_p2[0:0] == 1'b1) ? add_ln14_1_fu_159_p2 : zext_ln40_1_fu_181_p1);

assign bitOut_TDATA = ((icmp_ln13_reg_409_pp0_iter1_reg[0:0] == 1'b1) ? zext_ln11_fu_340_p1 : retVal_5_reg_431);

assign i_3_fu_144_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign icmp_ln13_fu_153_p2 = ((ap_sig_allocacmp_bState_n_bits_held_load > 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_138_p2 = ((ap_sig_allocacmp_i_2 == 4'd10) ? 1'b1 : 1'b0);

assign lshr_ln42_fu_278_p2 = aligned_word_fu_267_p3 >> zext_ln40_fu_275_p1;

assign next_n_held_bits_fu_175_p2 = (3'd0 - trunc_ln24_fu_171_p1);

assign retVal_1_fu_336_p1 = retVal_fu_330_p2[2:0];

assign retVal_2_fu_228_p2 = (xor_ln23_fu_222_p2 & bState_held_aligned_word_fu_80);

assign retVal_3_fu_241_p2 = zext_ln11_1_fu_234_p1 << zext_ln24_fu_238_p1;

assign retVal_5_fu_284_p2 = (retVal_3_fu_241_p2 | lshr_ln42_fu_278_p2);

assign retVal_7_fu_251_p5 = bState_currIdx_fu_72[1:0];

assign retVal_fu_330_p2 = zext_ln23_fu_317_p1 >> sext_ln14_fu_326_p1;

assign sext_ln14_fu_326_p1 = $signed(add_ln14_fu_320_p2);

assign shl_ln23_fu_212_p2 = 32'd255 << zext_ln13_fu_209_p1;

assign sub_ln22_fu_165_p2 = (8'd3 - ap_sig_allocacmp_bState_n_bits_held_load);

assign trunc_ln23_fu_218_p1 = shl_ln23_fu_212_p2[7:0];

assign trunc_ln24_fu_171_p1 = sub_ln22_fu_165_p2[2:0];

assign xor_ln23_fu_222_p2 = (trunc_ln23_fu_218_p1 ^ 8'd255);

assign zext_ln11_1_fu_234_p1 = retVal_2_fu_228_p2;

assign zext_ln11_fu_340_p1 = retVal_1_fu_336_p1;

assign zext_ln13_1_fu_314_p1 = bState_n_bits_held_load_reg_403_pp0_iter1_reg;

assign zext_ln13_fu_209_p1 = bState_n_bits_held_load_reg_403;

assign zext_ln23_fu_317_p1 = bState_held_aligned_word_load_reg_426;

assign zext_ln24_fu_238_p1 = sub_ln22_reg_416;

assign zext_ln40_1_fu_181_p1 = next_n_held_bits_fu_175_p2;

assign zext_ln40_fu_275_p1 = next_n_held_bits_reg_421;

endmodule //cabac_top_cabac_top_Pipeline_VITIS_LOOP_63_2
