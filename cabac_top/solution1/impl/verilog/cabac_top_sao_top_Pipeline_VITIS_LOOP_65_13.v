// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_sao_top_Pipeline_VITIS_LOOP_65_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        init_1,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        bStream_address1,
        bStream_ce1,
        bStream_q1,
        state_ivlCurrRange_12_out_i,
        state_ivlCurrRange_12_out_o,
        state_ivlCurrRange_12_out_o_ap_vld,
        state_bstate_currIdx_12_out_i,
        state_bstate_currIdx_12_out_o,
        state_bstate_currIdx_12_out_o_ap_vld,
        state_bstate_n_bits_held_12_out_i,
        state_bstate_n_bits_held_12_out_o,
        state_bstate_n_bits_held_12_out_o_ap_vld,
        state_bstate_held_aligned_word_12_out_i,
        state_bstate_held_aligned_word_12_out_o,
        state_bstate_held_aligned_word_12_out_o_ap_vld,
        state_ivlOffset_12_out_i,
        state_ivlOffset_12_out_o,
        state_ivlOffset_12_out_o_ap_vld,
        sao_out_sao_eo_class_chroma_0_out_i,
        sao_out_sao_eo_class_chroma_0_out_o,
        sao_out_sao_eo_class_chroma_0_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] init_1;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [2:0] bStream_address1;
output   bStream_ce1;
input  [7:0] bStream_q1;
input  [31:0] state_ivlCurrRange_12_out_i;
output  [31:0] state_ivlCurrRange_12_out_o;
output   state_ivlCurrRange_12_out_o_ap_vld;
input  [31:0] state_bstate_currIdx_12_out_i;
output  [31:0] state_bstate_currIdx_12_out_o;
output   state_bstate_currIdx_12_out_o_ap_vld;
input  [7:0] state_bstate_n_bits_held_12_out_i;
output  [7:0] state_bstate_n_bits_held_12_out_o;
output   state_bstate_n_bits_held_12_out_o_ap_vld;
input  [7:0] state_bstate_held_aligned_word_12_out_i;
output  [7:0] state_bstate_held_aligned_word_12_out_o;
output   state_bstate_held_aligned_word_12_out_o_ap_vld;
input  [31:0] state_ivlOffset_12_out_i;
output  [31:0] state_ivlOffset_12_out_o;
output   state_ivlOffset_12_out_o_ap_vld;
input  [31:0] sao_out_sao_eo_class_chroma_0_out_i;
output  [31:0] sao_out_sao_eo_class_chroma_0_out_o;
output   sao_out_sao_eo_class_chroma_0_out_o_ap_vld;

reg ap_idle;
reg[31:0] state_ivlCurrRange_12_out_o;
reg state_ivlCurrRange_12_out_o_ap_vld;
reg[31:0] state_bstate_currIdx_12_out_o;
reg state_bstate_currIdx_12_out_o_ap_vld;
reg[7:0] state_bstate_n_bits_held_12_out_o;
reg state_bstate_n_bits_held_12_out_o_ap_vld;
reg[7:0] state_bstate_held_aligned_word_12_out_o;
reg state_bstate_held_aligned_word_12_out_o_ap_vld;
reg[31:0] state_ivlOffset_12_out_o;
reg state_ivlOffset_12_out_o_ap_vld;
reg[31:0] sao_out_sao_eo_class_chroma_0_out_o;
reg sao_out_sao_eo_class_chroma_0_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln65_reg_231;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] init_assign_10_reg_58;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln65_fu_97_p2;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    grp_decode_decision_fu_70_ap_start;
wire    grp_decode_decision_fu_70_ap_done;
wire    grp_decode_decision_fu_70_ap_idle;
wire    grp_decode_decision_fu_70_ap_ready;
wire   [30:0] grp_decode_decision_fu_70_p_read1;
wire   [2:0] grp_decode_decision_fu_70_bStream_address0;
wire    grp_decode_decision_fu_70_bStream_ce0;
wire   [2:0] grp_decode_decision_fu_70_bStream_address1;
wire    grp_decode_decision_fu_70_bStream_ce1;
wire   [31:0] grp_decode_decision_fu_70_ap_return_0;
wire   [31:0] grp_decode_decision_fu_70_ap_return_1;
wire   [31:0] grp_decode_decision_fu_70_ap_return_2;
wire   [7:0] grp_decode_decision_fu_70_ap_return_3;
wire   [7:0] grp_decode_decision_fu_70_ap_return_4;
wire   [0:0] grp_decode_decision_fu_70_ap_return_5;
wire    ap_loop_init;
reg    grp_decode_decision_fu_70_ap_start_reg;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
wire   [31:0] symbolVal_fu_175_p3;
reg   [1:0] binIdx_1_fu_48;
wire   [1:0] add_ln69_fu_103_p2;
reg   [1:0] ap_sig_allocacmp_binIdx;
wire   [30:0] trunc_ln67_fu_171_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_322;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_decode_decision_fu_70_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_decode_decision grp_decode_decision_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_decision_fu_70_ap_start),
    .ap_done(grp_decode_decision_fu_70_ap_done),
    .ap_idle(grp_decode_decision_fu_70_ap_idle),
    .ap_ready(grp_decode_decision_fu_70_ap_ready),
    .ap_ce(1'b1),
    .init(init_assign_10_reg_58),
    .p_read(state_ivlCurrRange_12_out_i),
    .p_read1(grp_decode_decision_fu_70_p_read1),
    .p_read2(state_bstate_currIdx_12_out_i),
    .p_read3(state_bstate_n_bits_held_12_out_i),
    .p_read4(state_bstate_held_aligned_word_12_out_i),
    .bStream_address0(grp_decode_decision_fu_70_bStream_address0),
    .bStream_ce0(grp_decode_decision_fu_70_bStream_ce0),
    .bStream_q0(bStream_q0),
    .bStream_address1(grp_decode_decision_fu_70_bStream_address1),
    .bStream_ce1(grp_decode_decision_fu_70_bStream_ce1),
    .bStream_q1(bStream_q1),
    .ap_return_0(grp_decode_decision_fu_70_ap_return_0),
    .ap_return_1(grp_decode_decision_fu_70_ap_return_1),
    .ap_return_2(grp_decode_decision_fu_70_ap_return_2),
    .ap_return_3(grp_decode_decision_fu_70_ap_return_3),
    .ap_return_4(grp_decode_decision_fu_70_ap_return_4),
    .ap_return_5(grp_decode_decision_fu_70_ap_return_5)
);

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_decision_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_97_p2 == 1'd0))) begin
            grp_decode_decision_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_decode_decision_fu_70_ap_ready == 1'b1)) begin
            grp_decode_decision_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_fu_97_p2 == 1'd0))) begin
            binIdx_1_fu_48 <= add_ln69_fu_103_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            binIdx_1_fu_48 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            init_assign_10_reg_58 <= init_1;
        end else if ((1'b1 == ap_condition_322)) begin
            init_assign_10_reg_58 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln65_reg_231 <= icmp_ln65_fu_97_p2;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_binIdx = 2'd0;
    end else begin
        ap_sig_allocacmp_binIdx = binIdx_1_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sao_out_sao_eo_class_chroma_0_out_o = 32'd0;
        end else if (((icmp_ln65_reg_231 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            sao_out_sao_eo_class_chroma_0_out_o = symbolVal_fu_175_p3;
        end else begin
            sao_out_sao_eo_class_chroma_0_out_o = sao_out_sao_eo_class_chroma_0_out_i;
        end
    end else begin
        sao_out_sao_eo_class_chroma_0_out_o = sao_out_sao_eo_class_chroma_0_out_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)) | ((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        sao_out_sao_eo_class_chroma_0_out_o_ap_vld = 1'b1;
    end else begin
        sao_out_sao_eo_class_chroma_0_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_currIdx_12_out_o = grp_decode_decision_fu_70_ap_return_2;
    end else begin
        state_bstate_currIdx_12_out_o = state_bstate_currIdx_12_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_currIdx_12_out_o_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_12_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_held_aligned_word_12_out_o = grp_decode_decision_fu_70_ap_return_4;
    end else begin
        state_bstate_held_aligned_word_12_out_o = state_bstate_held_aligned_word_12_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_held_aligned_word_12_out_o_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_12_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_n_bits_held_12_out_o = grp_decode_decision_fu_70_ap_return_3;
    end else begin
        state_bstate_n_bits_held_12_out_o = state_bstate_n_bits_held_12_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_n_bits_held_12_out_o_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_12_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ivlCurrRange_12_out_o = grp_decode_decision_fu_70_ap_return_0;
    end else begin
        state_ivlCurrRange_12_out_o = state_ivlCurrRange_12_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ivlCurrRange_12_out_o_ap_vld = 1'b1;
    end else begin
        state_ivlCurrRange_12_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ivlOffset_12_out_o = grp_decode_decision_fu_70_ap_return_1;
    end else begin
        state_ivlOffset_12_out_o = state_ivlOffset_12_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ivlOffset_12_out_o_ap_vld = 1'b1;
    end else begin
        state_ivlOffset_12_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_fu_103_p2 = (ap_sig_allocacmp_binIdx + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_322 = ((icmp_ln65_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bStream_address0 = grp_decode_decision_fu_70_bStream_address0;

assign bStream_address1 = grp_decode_decision_fu_70_bStream_address1;

assign bStream_ce0 = grp_decode_decision_fu_70_bStream_ce0;

assign bStream_ce1 = grp_decode_decision_fu_70_bStream_ce1;

assign grp_decode_decision_fu_70_ap_start = grp_decode_decision_fu_70_ap_start_reg;

assign grp_decode_decision_fu_70_p_read1 = state_ivlOffset_12_out_i[30:0];

assign icmp_ln65_fu_97_p2 = ((ap_sig_allocacmp_binIdx == 2'd2) ? 1'b1 : 1'b0);

assign symbolVal_fu_175_p3 = {{trunc_ln67_fu_171_p1}, {grp_decode_decision_fu_70_ap_return_5}};

assign trunc_ln67_fu_171_p1 = sao_out_sao_eo_class_chroma_0_out_i[30:0];

endmodule //cabac_top_sao_top_Pipeline_VITIS_LOOP_65_13
