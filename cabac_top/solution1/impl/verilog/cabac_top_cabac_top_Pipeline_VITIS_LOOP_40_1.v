// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        streamCtxRAM_din,
        streamCtxRAM_full_n,
        streamCtxRAM_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] streamCtxRAM_din;
input   streamCtxRAM_full_n;
output   streamCtxRAM_write;

reg ap_idle;
reg streamCtxRAM_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln40_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] I_FRAME_INIT_VALS_address0;
reg    I_FRAME_INIT_VALS_ce0;
wire   [7:0] I_FRAME_INIT_VALS_q0;
reg    streamCtxRAM_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln12_fu_132_p1;
reg   [3:0] trunc_ln12_reg_297;
reg   [7:0] trunc_ln_reg_302;
wire   [8:0] add_ln14_3_fu_212_p2;
reg   [8:0] add_ln14_3_reg_307;
wire   [6:0] initState_fu_240_p3;
reg   [6:0] initState_reg_313;
reg   [0:0] tmp_reg_319;
wire   [63:0] i_cast_fu_122_p1;
reg   [2:0] i_fu_78;
wire   [2:0] add_ln40_fu_116_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] tmp_2_fu_136_p4;
wire   [10:0] and_ln_fu_146_p3;
wire   [8:0] and_ln14_1_fu_158_p3;
wire   [11:0] zext_ln14_2_fu_166_p1;
wire   [11:0] add_ln14_1_fu_170_p2;
wire   [11:0] zext_ln14_1_fu_154_p1;
wire   [11:0] add_ln14_fu_176_p2;
wire   [6:0] shl_ln_fu_192_p3;
wire  signed [8:0] sext_ln14_fu_203_p1;
wire   [8:0] add_ln14_2_fu_206_p2;
wire   [8:0] zext_ln14_fu_199_p1;
wire   [0:0] icmp_ln8_fu_218_p2;
wire   [8:0] select_ln8_fu_223_p3;
wire   [0:0] icmp_ln14_fu_234_p2;
wire   [6:0] trunc_ln13_fu_230_p1;
wire   [6:0] xor_ln16_fu_256_p2;
wire   [6:0] sub_ln16_fu_261_p2;
wire   [6:0] select_ln16_fu_266_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_I_FRAME_INIT_VALS_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
I_FRAME_INIT_VALS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(I_FRAME_INIT_VALS_address0),
    .ce0(I_FRAME_INIT_VALS_ce0),
    .q0(I_FRAME_INIT_VALS_q0)
);

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln40_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_78 <= add_ln40_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_78 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln14_3_reg_307[8 : 1] <= add_ln14_3_fu_212_p2[8 : 1];
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        initState_reg_313 <= initState_fu_240_p3;
        tmp_reg_319 <= initState_fu_240_p3[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        trunc_ln12_reg_297 <= trunc_ln12_fu_132_p1;
        trunc_ln_reg_302 <= {{add_ln14_fu_176_p2[11:4]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        I_FRAME_INIT_VALS_ce0 = 1'b1;
    end else begin
        I_FRAME_INIT_VALS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        streamCtxRAM_blk_n = streamCtxRAM_full_n;
    end else begin
        streamCtxRAM_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        streamCtxRAM_write = 1'b1;
    end else begin
        streamCtxRAM_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_FRAME_INIT_VALS_address0 = i_cast_fu_122_p1;

assign add_ln14_1_fu_170_p2 = ($signed(zext_ln14_2_fu_166_p1) + $signed(12'd2656));

assign add_ln14_2_fu_206_p2 = ($signed(sext_ln14_fu_203_p1) + $signed(9'd496));

assign add_ln14_3_fu_212_p2 = (add_ln14_2_fu_206_p2 + zext_ln14_fu_199_p1);

assign add_ln14_fu_176_p2 = (add_ln14_1_fu_170_p2 + zext_ln14_1_fu_154_p1);

assign add_ln40_fu_116_p2 = (ap_sig_allocacmp_i_2 + 3'd1);

assign and_ln14_1_fu_158_p3 = {{tmp_2_fu_136_p4}, {5'd0}};

assign and_ln_fu_146_p3 = {{tmp_2_fu_136_p4}, {7'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((streamCtxRAM_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((streamCtxRAM_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((streamCtxRAM_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (streamCtxRAM_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_cast_fu_122_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln14_fu_234_p2 = ((select_ln8_fu_223_p3 < 9'd126) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_110_p2 = ((ap_sig_allocacmp_i_2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_218_p2 = (($signed(add_ln14_3_reg_307) < $signed(9'd1)) ? 1'b1 : 1'b0);

assign initState_fu_240_p3 = ((icmp_ln14_fu_234_p2[0:0] == 1'b1) ? trunc_ln13_fu_230_p1 : 7'd126);

assign select_ln16_fu_266_p3 = ((tmp_reg_319[0:0] == 1'b1) ? xor_ln16_fu_256_p2 : sub_ln16_fu_261_p2);

assign select_ln8_fu_223_p3 = ((icmp_ln8_fu_218_p2[0:0] == 1'b1) ? 9'd1 : add_ln14_3_reg_307);

assign sext_ln14_fu_203_p1 = $signed(trunc_ln_reg_302);

assign shl_ln_fu_192_p3 = {{trunc_ln12_reg_297}, {3'd0}};

assign streamCtxRAM_din = {{select_ln16_fu_266_p3}, {tmp_reg_319}};

assign sub_ln16_fu_261_p2 = (7'd63 - initState_reg_313);

assign tmp_2_fu_136_p4 = {{I_FRAME_INIT_VALS_q0[7:4]}};

assign trunc_ln12_fu_132_p1 = I_FRAME_INIT_VALS_q0[3:0];

assign trunc_ln13_fu_230_p1 = select_ln8_fu_223_p3[6:0];

assign xor_ln16_fu_256_p2 = (initState_reg_313 ^ 7'd64);

assign zext_ln14_1_fu_154_p1 = and_ln_fu_146_p3;

assign zext_ln14_2_fu_166_p1 = and_ln14_1_fu_158_p3;

assign zext_ln14_fu_199_p1 = shl_ln_fu_192_p3;

always @ (posedge ap_clk) begin
    add_ln14_3_reg_307[0] <= 1'b0;
end

endmodule //cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1
