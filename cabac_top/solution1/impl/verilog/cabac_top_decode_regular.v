// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_regular (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read4,
        p_read5,
        p_read6,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        ctxTables_address0,
        ctxTables_ce0,
        ctxTables_we0,
        ctxTables_d0,
        ctxTables_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [8:0] ctxTables_address0;
output   ctxTables_ce0;
output   ctxTables_we0;
output  [7:0] ctxTables_d0;
input  [7:0] ctxTables_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [0:0] ap_return_4;
output  [31:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] ctxTables_address0;
reg ctxTables_ce0;
reg ctxTables_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] lpsTable_address0;
reg    lpsTable_ce0;
wire   [7:0] lpsTable_q0;
wire   [6:0] transMPS_address0;
reg    transMPS_ce0;
wire   [6:0] transMPS_q0;
wire   [6:0] transLPS_address0;
reg    transLPS_ce0;
wire   [6:0] transLPS_q0;
wire   [8:0] ctxTables_addr_reg_349;
wire    ap_CS_fsm_state2;
reg   [7:0] ctxState_reg_359;
wire   [31:0] zext_ln34_1_fu_201_p1;
reg   [31:0] zext_ln34_1_reg_370;
wire    ap_CS_fsm_state3;
wire   [31:0] sub_ln229_fu_205_p2;
reg   [31:0] sub_ln229_reg_375;
wire    ap_CS_fsm_state4;
wire   [0:0] xor_ln1076_1_fu_234_p2;
reg   [0:0] xor_ln1076_1_reg_407;
wire   [31:0] select_ln1076_fu_240_p3;
reg   [31:0] select_ln1076_reg_412;
wire   [31:0] select_ln1076_2_fu_260_p3;
reg   [31:0] select_ln1076_2_reg_417;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_done;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_idle;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_ready;
wire   [2:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_bStream_address0;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_bStream_ce0;
wire   [7:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_n_bits_held_0_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_n_bits_held_0_out_ap_vld;
wire   [7:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_held_aligned_word_0_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_held_aligned_word_0_out_ap_vld;
wire   [31:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_currIdx_0_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_currIdx_0_out_ap_vld;
wire   [31:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_phi_ln65_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_phi_ln65_out_ap_vld;
wire   [31:0] grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_ivlCurrRange_1_out;
wire    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_ivlCurrRange_1_out_ap_vld;
reg    grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln34_fu_196_p1;
wire   [63:0] zext_ln24_fu_210_p1;
wire    ap_CS_fsm_state6;
wire   [5:0] pState_fu_168_p4;
wire   [1:0] qRangeIdx_fu_178_p4;
wire   [7:0] tmp_fu_188_p3;
wire   [0:0] icmp_ln1076_fu_218_p2;
wire   [0:0] valMps_fu_215_p1;
wire   [0:0] xor_ln1076_fu_228_p2;
wire   [6:0] select_ln1076_1_fu_247_p3;
wire   [31:0] sub_ln229_1_fu_223_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start_reg = 1'b0;
end

cabac_top_decode_regular_lpsTable_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
lpsTable_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lpsTable_address0),
    .ce0(lpsTable_ce0),
    .q0(lpsTable_q0)
);

cabac_top_decode_regular_transMPS_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
transMPS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transMPS_address0),
    .ce0(transMPS_ce0),
    .q0(transMPS_q0)
);

cabac_top_decode_regular_transLPS_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
transLPS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(transLPS_address0),
    .ce0(transLPS_ce0),
    .q0(transLPS_q0)
);

cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1 grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start),
    .ap_done(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_done),
    .ap_idle(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_idle),
    .ap_ready(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_ready),
    .p_read5(p_read5),
    .p_read6(p_read6),
    .p_read4(p_read4),
    .select_ln1076_2(select_ln1076_2_reg_417),
    .select_ln1076(select_ln1076_reg_412),
    .bStream_address0(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_bStream_address0),
    .bStream_ce0(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_bStream_ce0),
    .bStream_q0(bStream_q0),
    .state_bstate_n_bits_held_0_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_n_bits_held_0_out),
    .state_bstate_n_bits_held_0_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_n_bits_held_0_out_ap_vld),
    .state_bstate_held_aligned_word_0_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_held_aligned_word_0_out),
    .state_bstate_held_aligned_word_0_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_held_aligned_word_0_out_ap_vld),
    .state_bstate_currIdx_0_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_currIdx_0_out),
    .state_bstate_currIdx_0_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_currIdx_0_out_ap_vld),
    .phi_ln65_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_phi_ln65_out),
    .phi_ln65_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_phi_ln65_out_ap_vld),
    .state_ivlCurrRange_1_out(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_ivlCurrRange_1_out),
    .state_ivlCurrRange_1_out_ap_vld(grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_ivlCurrRange_1_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start_reg <= 1'b1;
        end else if ((grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_ready == 1'b1)) begin
            grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctxState_reg_359 <= ctxTables_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln1076_2_reg_417 <= select_ln1076_2_fu_260_p3;
        select_ln1076_reg_412 <= select_ln1076_fu_240_p3;
        xor_ln1076_1_reg_407 <= xor_ln1076_1_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_ln229_reg_375 <= sub_ln229_fu_205_p2;
        zext_ln34_1_reg_370[7 : 0] <= zext_ln34_1_fu_201_p1[7 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctxTables_address0 = ctxTables_addr_reg_349;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctxTables_address0 = 64'd1;
    end else begin
        ctxTables_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ctxTables_ce0 = 1'b1;
    end else begin
        ctxTables_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctxTables_we0 = 1'b1;
    end else begin
        ctxTables_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lpsTable_ce0 = 1'b1;
    end else begin
        lpsTable_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        transLPS_ce0 = 1'b1;
    end else begin
        transLPS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        transMPS_ce0 = 1'b1;
    end else begin
        transMPS_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return_0 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_ivlCurrRange_1_out;

assign ap_return_1 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_currIdx_0_out;

assign ap_return_2 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_n_bits_held_0_out;

assign ap_return_3 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_state_bstate_held_aligned_word_0_out;

assign ap_return_4 = xor_ln1076_1_reg_407;

assign ap_return_5 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_phi_ln65_out;

assign bStream_address0 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_bStream_address0;

assign bStream_ce0 = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_bStream_ce0;

assign ctxTables_addr_reg_349 = 64'd1;

assign ctxTables_d0 = select_ln1076_1_fu_247_p3;

assign grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start = grp_decode_regular_Pipeline_VITIS_LOOP_53_1_fu_149_ap_start_reg;

assign icmp_ln1076_fu_218_p2 = ((sub_ln229_reg_375 > p_read1) ? 1'b1 : 1'b0);

assign lpsTable_address0 = zext_ln34_fu_196_p1;

assign pState_fu_168_p4 = {{ctxTables_q0[6:1]}};

assign qRangeIdx_fu_178_p4 = {{p_read[7:6]}};

assign select_ln1076_1_fu_247_p3 = ((icmp_ln1076_fu_218_p2[0:0] == 1'b1) ? transMPS_q0 : transLPS_q0);

assign select_ln1076_2_fu_260_p3 = ((icmp_ln1076_fu_218_p2[0:0] == 1'b1) ? p_read1 : sub_ln229_1_fu_223_p2);

assign select_ln1076_fu_240_p3 = ((icmp_ln1076_fu_218_p2[0:0] == 1'b1) ? sub_ln229_reg_375 : zext_ln34_1_reg_370);

assign sub_ln229_1_fu_223_p2 = (p_read1 - sub_ln229_reg_375);

assign sub_ln229_fu_205_p2 = (p_read - zext_ln34_1_fu_201_p1);

assign tmp_fu_188_p3 = {{pState_fu_168_p4}, {qRangeIdx_fu_178_p4}};

assign transLPS_address0 = zext_ln24_fu_210_p1;

assign transMPS_address0 = zext_ln24_fu_210_p1;

assign valMps_fu_215_p1 = ctxState_reg_359[0:0];

assign xor_ln1076_1_fu_234_p2 = (xor_ln1076_fu_228_p2 ^ valMps_fu_215_p1);

assign xor_ln1076_fu_228_p2 = (icmp_ln1076_fu_218_p2 ^ 1'd1);

assign zext_ln24_fu_210_p1 = ctxState_reg_359;

assign zext_ln34_1_fu_201_p1 = lpsTable_q0;

assign zext_ln34_fu_196_p1 = tmp_fu_188_p3;

always @ (posedge ap_clk) begin
    zext_ln34_1_reg_370[31:8] <= 24'b000000000000000000000000;
end

endmodule //cabac_top_decode_regular
