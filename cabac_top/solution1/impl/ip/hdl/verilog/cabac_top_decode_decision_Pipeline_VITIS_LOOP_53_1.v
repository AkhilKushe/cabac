// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_bstate_n_bits_held_read_assign,
        state_bstate_held_aligned_word_read_assign,
        state_bstate_currIdx_read_assign,
        select_ln1076_2,
        select_ln1076,
        bStream_load_2,
        bStream1_load_2,
        p_read,
        p_read1,
        state_bstate_n_bits_held_0_i_out,
        state_bstate_n_bits_held_0_i_out_ap_vld,
        state_bstate_held_aligned_word_0_i_out,
        state_bstate_held_aligned_word_0_i_out_ap_vld,
        state_bstate_currIdx_0_i_out,
        state_bstate_currIdx_0_i_out_ap_vld,
        phi_ln59_out,
        phi_ln59_out_ap_vld,
        state_ivlCurrRange_1_i_out,
        state_ivlCurrRange_1_i_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] state_bstate_n_bits_held_read_assign;
input  [7:0] state_bstate_held_aligned_word_read_assign;
input  [31:0] state_bstate_currIdx_read_assign;
input  [31:0] select_ln1076_2;
input  [31:0] select_ln1076;
input  [7:0] bStream_load_2;
input  [7:0] bStream1_load_2;
input  [7:0] p_read;
input  [7:0] p_read1;
output  [7:0] state_bstate_n_bits_held_0_i_out;
output   state_bstate_n_bits_held_0_i_out_ap_vld;
output  [7:0] state_bstate_held_aligned_word_0_i_out;
output   state_bstate_held_aligned_word_0_i_out_ap_vld;
output  [31:0] state_bstate_currIdx_0_i_out;
output   state_bstate_currIdx_0_i_out_ap_vld;
output  [31:0] phi_ln59_out;
output   phi_ln59_out_ap_vld;
output  [31:0] state_ivlCurrRange_1_i_out;
output   state_ivlCurrRange_1_i_out_ap_vld;

reg ap_idle;
reg state_bstate_n_bits_held_0_i_out_ap_vld;
reg state_bstate_held_aligned_word_0_i_out_ap_vld;
reg state_bstate_currIdx_0_i_out_ap_vld;
reg phi_ln59_out_ap_vld;
reg state_ivlCurrRange_1_i_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_fu_232_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] state_ivlCurrRange_1_i_fu_84;
wire   [31:0] shl_ln1026_fu_250_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] phi_ln59_fu_88;
wire   [31:0] ret_fu_422_p3;
reg   [31:0] state_bstate_currIdx_0_i_fu_92;
wire   [31:0] select_ln13_2_fu_378_p3;
reg   [7:0] state_bstate_held_aligned_word_0_i_fu_96;
wire   [7:0] retVal_3_fu_370_p3;
reg   [7:0] state_bstate_n_bits_held_0_i_fu_100;
wire   [7:0] select_ln13_fu_362_p3;
wire    ap_block_pp0_stage0_01001;
wire   [23:0] tmp_fu_222_p4;
wire   [31:0] zext_ln13_fu_256_p1;
wire   [31:0] shl_ln23_fu_274_p2;
wire   [7:0] trunc_ln23_fu_280_p1;
wire   [7:0] xor_ln23_fu_284_p2;
wire   [1:0] retVal_5_fu_300_p5;
wire   [7:0] retVal_5_fu_300_p6;
wire   [7:0] and_ln24_fu_290_p2;
wire   [0:0] tmp_1_fu_316_p3;
wire   [8:0] zext_ln13_1_fu_260_p1;
wire   [8:0] add_ln14_fu_332_p2;
wire   [31:0] zext_ln23_fu_270_p1;
wire  signed [31:0] sext_ln14_fu_338_p1;
wire   [31:0] retVal_1_fu_342_p2;
wire   [0:0] retVal_2_fu_348_p1;
wire   [0:0] icmp_ln13_fu_264_p2;
wire   [7:0] add_ln16_fu_356_p2;
wire   [31:0] add_ln6_fu_310_p2;
wire   [8:0] retVal_fu_324_p3;
wire   [8:0] zext_ln11_fu_352_p1;
wire   [7:0] trunc_ln1543_fu_394_p1;
wire   [8:0] shl_ln1543_1_fu_398_p3;
wire   [8:0] retVal_6_fu_386_p3;
wire   [22:0] tmp_4_fu_412_p4;
wire   [8:0] or_ln1543_fu_406_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U21(
    .din0(bStream_load_2),
    .din1(bStream1_load_2),
    .din2(p_read),
    .din3(p_read1),
    .din4(retVal_5_fu_300_p5),
    .dout(retVal_5_fu_300_p6)
);

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_ln59_fu_88 <= select_ln1076_2;
        end else if (((icmp_ln1072_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            phi_ln59_fu_88 <= ret_fu_422_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_currIdx_0_i_fu_92 <= state_bstate_currIdx_read_assign;
        end else if (((icmp_ln1072_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            state_bstate_currIdx_0_i_fu_92 <= select_ln13_2_fu_378_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_held_aligned_word_0_i_fu_96 <= state_bstate_held_aligned_word_read_assign;
        end else if (((icmp_ln1072_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            state_bstate_held_aligned_word_0_i_fu_96 <= retVal_3_fu_370_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_n_bits_held_0_i_fu_100 <= state_bstate_n_bits_held_read_assign;
        end else if (((icmp_ln1072_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            state_bstate_n_bits_held_0_i_fu_100 <= select_ln13_fu_362_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_ivlCurrRange_1_i_fu_84 <= select_ln1076;
        end else if (((icmp_ln1072_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            state_ivlCurrRange_1_i_fu_84 <= shl_ln1026_fu_250_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln59_out_ap_vld = 1'b1;
    end else begin
        phi_ln59_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_currIdx_0_i_out_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_0_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_held_aligned_word_0_i_out_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_0_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_bstate_n_bits_held_0_i_out_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_0_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ivlCurrRange_1_i_out_ap_vld = 1'b1;
    end else begin
        state_ivlCurrRange_1_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_332_p2 = ($signed(zext_ln13_1_fu_260_p1) + $signed(9'd511));

assign add_ln16_fu_356_p2 = ($signed(state_bstate_n_bits_held_0_i_fu_100) + $signed(8'd255));

assign add_ln6_fu_310_p2 = (state_bstate_currIdx_0_i_fu_92 + 32'd1);

assign and_ln24_fu_290_p2 = (xor_ln23_fu_284_p2 & state_bstate_held_aligned_word_0_i_fu_96);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln1072_fu_232_p2 = ((tmp_fu_222_p4 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_264_p2 = ((state_bstate_n_bits_held_0_i_fu_100 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln1543_fu_406_p2 = (shl_ln1543_1_fu_398_p3 | retVal_6_fu_386_p3);

assign phi_ln59_out = phi_ln59_fu_88;

assign retVal_1_fu_342_p2 = zext_ln23_fu_270_p1 >> sext_ln14_fu_338_p1;

assign retVal_2_fu_348_p1 = retVal_1_fu_342_p2[0:0];

assign retVal_3_fu_370_p3 = ((icmp_ln13_fu_264_p2[0:0] == 1'b1) ? retVal_5_fu_300_p6 : state_bstate_held_aligned_word_0_i_fu_96);

assign retVal_5_fu_300_p5 = state_bstate_currIdx_0_i_fu_92[1:0];

assign retVal_6_fu_386_p3 = ((icmp_ln13_fu_264_p2[0:0] == 1'b1) ? retVal_fu_324_p3 : zext_ln11_fu_352_p1);

assign retVal_fu_324_p3 = {{and_ln24_fu_290_p2}, {tmp_1_fu_316_p3}};

assign ret_fu_422_p3 = {{tmp_4_fu_412_p4}, {or_ln1543_fu_406_p2}};

assign select_ln13_2_fu_378_p3 = ((icmp_ln13_fu_264_p2[0:0] == 1'b1) ? add_ln6_fu_310_p2 : state_bstate_currIdx_0_i_fu_92);

assign select_ln13_fu_362_p3 = ((icmp_ln13_fu_264_p2[0:0] == 1'b1) ? 8'd7 : add_ln16_fu_356_p2);

assign sext_ln14_fu_338_p1 = $signed(add_ln14_fu_332_p2);

assign shl_ln1026_fu_250_p2 = state_ivlCurrRange_1_i_fu_84 << 32'd1;

assign shl_ln1543_1_fu_398_p3 = {{trunc_ln1543_fu_394_p1}, {1'd0}};

assign shl_ln23_fu_274_p2 = 32'd255 << zext_ln13_fu_256_p1;

assign state_bstate_currIdx_0_i_out = state_bstate_currIdx_0_i_fu_92;

assign state_bstate_held_aligned_word_0_i_out = state_bstate_held_aligned_word_0_i_fu_96;

assign state_bstate_n_bits_held_0_i_out = state_bstate_n_bits_held_0_i_fu_100;

assign state_ivlCurrRange_1_i_out = state_ivlCurrRange_1_i_fu_84;

assign tmp_1_fu_316_p3 = retVal_5_fu_300_p6[32'd7];

assign tmp_4_fu_412_p4 = {{phi_ln59_fu_88[30:8]}};

assign tmp_fu_222_p4 = {{state_ivlCurrRange_1_i_fu_84[31:8]}};

assign trunc_ln1543_fu_394_p1 = phi_ln59_fu_88[7:0];

assign trunc_ln23_fu_280_p1 = shl_ln23_fu_274_p2[7:0];

assign xor_ln23_fu_284_p2 = (trunc_ln23_fu_280_p1 ^ 8'd255);

assign zext_ln11_fu_352_p1 = retVal_2_fu_348_p1;

assign zext_ln13_1_fu_260_p1 = state_bstate_n_bits_held_0_i_fu_100;

assign zext_ln13_fu_256_p1 = state_bstate_n_bits_held_0_i_fu_100;

assign zext_ln23_fu_270_p1 = state_bstate_held_aligned_word_0_i_fu_96;

endmodule //cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1
