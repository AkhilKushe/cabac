-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    streamCtxRAM_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    streamCtxRAM_full_n : IN STD_LOGIC;
    streamCtxRAM_write : OUT STD_LOGIC;
    icmp_ln79 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp_ln79_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln40 : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_53 : STD_LOGIC_VECTOR (6 downto 0) := "1010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_3F0 : STD_LOGIC_VECTOR (9 downto 0) := "1111110000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_7E : STD_LOGIC_VECTOR (9 downto 0) := "0001111110";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln40_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal B_FRAME_INIT_VALS_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal B_FRAME_INIT_VALS_ce0 : STD_LOGIC;
    signal B_FRAME_INIT_VALS_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal P_FRAME_INIT_VALS_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal P_FRAME_INIT_VALS_ce0 : STD_LOGIC;
    signal P_FRAME_INIT_VALS_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_FRAME_INIT_VALS_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal I_FRAME_INIT_VALS_ce0 : STD_LOGIC;
    signal I_FRAME_INIT_VALS_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal streamCtxRAM_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln40_cast_fu_156_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln40_cast_reg_372 : STD_LOGIC_VECTOR (12 downto 0);
    signal slope_fu_238_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal slope_reg_396 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln12_fu_244_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln12_reg_401 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln12_reg_401_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln2_reg_406 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_1_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_1_reg_411 : STD_LOGIC_VECTOR (9 downto 0);
    signal initState_fu_314_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal initState_reg_417 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_423 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln40_fu_174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln41_fu_192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_1_fu_199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_fu_206_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln_fu_220_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln11_fu_216_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_fu_232_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_2_fu_228_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln14_fu_251_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln14_fu_251_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln_fu_266_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln14_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_fu_280_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_fu_273_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln8_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_297_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln14_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln13_fu_304_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln16_fu_330_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln16_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln16_fu_340_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_mul_7s_6ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_B_FRAME_INIT_VALS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_P_FRAME_INIT_VALS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_I_FRAME_INIT_VALS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    B_FRAME_INIT_VALS_U : component cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_B_FRAME_INIT_VALS_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_FRAME_INIT_VALS_address0,
        ce0 => B_FRAME_INIT_VALS_ce0,
        q0 => B_FRAME_INIT_VALS_q0);

    P_FRAME_INIT_VALS_U : component cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_P_FRAME_INIT_VALS_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => P_FRAME_INIT_VALS_address0,
        ce0 => P_FRAME_INIT_VALS_ce0,
        q0 => P_FRAME_INIT_VALS_q0);

    I_FRAME_INIT_VALS_U : component cabac_top_cabac_top_Pipeline_VITIS_LOOP_40_1_I_FRAME_INIT_VALS_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => I_FRAME_INIT_VALS_address0,
        ce0 => I_FRAME_INIT_VALS_ce0,
        q0 => I_FRAME_INIT_VALS_q0);

    mul_7s_6ns_13_1_1_U4 : component cabac_top_mul_7s_6ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        din0 => slope_reg_396,
        din1 => mul_ln14_fu_251_p1,
        dout => mul_ln14_fu_251_p2);

    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln40_fu_168_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_88 <= add_ln40_fu_174_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_88 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln14_1_reg_411 <= add_ln14_1_fu_286_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                initState_reg_417 <= initState_fu_314_p3;
                tmp_reg_423 <= initState_fu_314_p3(6 downto 6);
                trunc_ln12_reg_401_pp0_iter2_reg <= trunc_ln12_reg_401;
                trunc_ln2_reg_406 <= mul_ln14_fu_251_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                slope_reg_396 <= slope_fu_238_p2;
                trunc_ln12_reg_401 <= trunc_ln12_fu_244_p1;
                    zext_ln40_cast_reg_372(5 downto 0) <= zext_ln40_cast_fu_156_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln40_cast_reg_372(12 downto 6) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_FRAME_INIT_VALS_address0 <= i_1_cast_fu_180_p1(3 - 1 downto 0);

    B_FRAME_INIT_VALS_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_FRAME_INIT_VALS_ce0 <= ap_const_logic_1;
        else 
            B_FRAME_INIT_VALS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    I_FRAME_INIT_VALS_address0 <= i_1_cast_fu_180_p1(3 - 1 downto 0);

    I_FRAME_INIT_VALS_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            I_FRAME_INIT_VALS_ce0 <= ap_const_logic_1;
        else 
            I_FRAME_INIT_VALS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    P_FRAME_INIT_VALS_address0 <= i_1_cast_fu_180_p1(3 - 1 downto 0);

    P_FRAME_INIT_VALS_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            P_FRAME_INIT_VALS_ce0 <= ap_const_logic_1;
        else 
            P_FRAME_INIT_VALS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_232_p2 <= std_logic_vector(unsigned(zext_ln11_fu_216_p1) + unsigned(ap_const_lv7_53));
    add_ln14_1_fu_286_p2 <= std_logic_vector(unsigned(add_ln14_fu_280_p2) + unsigned(zext_ln14_fu_273_p1));
    add_ln14_fu_280_p2 <= std_logic_vector(signed(sext_ln14_fu_277_p1) + signed(ap_const_lv10_3F0));
    add_ln40_fu_174_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    and_ln_fu_220_p3 <= (trunc_ln1_fu_206_p4 & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, streamCtxRAM_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((streamCtxRAM_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, streamCtxRAM_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((streamCtxRAM_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, streamCtxRAM_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((streamCtxRAM_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(streamCtxRAM_full_n)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (streamCtxRAM_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln40_fu_168_p2)
    begin
        if (((icmp_ln40_fu_168_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_88;
        end if; 
    end process;

    i_1_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    icmp_ln14_fu_308_p2 <= "1" when (unsigned(select_ln8_fu_297_p3) < unsigned(ap_const_lv10_7E)) else "0";
    icmp_ln40_fu_168_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_5) else "0";
    icmp_ln8_fu_292_p2 <= "1" when (signed(add_ln14_1_reg_411) < signed(ap_const_lv10_1)) else "0";
    initState_fu_314_p3 <= 
        trunc_ln13_fu_304_p1 when (icmp_ln14_fu_308_p2(0) = '1') else 
        ap_const_lv7_7E;
    mul_ln14_fu_251_p1 <= zext_ln40_cast_reg_372(6 - 1 downto 0);
    select_ln16_fu_340_p3 <= 
        xor_ln16_fu_330_p2 when (tmp_reg_423(0) = '1') else 
        sub_ln16_fu_335_p2;
    select_ln41_1_fu_199_p3 <= 
        B_FRAME_INIT_VALS_q0 when (icmp_ln79_1(0) = '1') else 
        select_ln41_fu_192_p3;
    select_ln41_fu_192_p3 <= 
        P_FRAME_INIT_VALS_q0 when (icmp_ln79(0) = '1') else 
        I_FRAME_INIT_VALS_q0;
    select_ln8_fu_297_p3 <= 
        ap_const_lv10_1 when (icmp_ln8_fu_292_p2(0) = '1') else 
        add_ln14_1_reg_411;
        sext_ln14_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_406),10));

    shl_ln_fu_266_p3 <= (trunc_ln12_reg_401_pp0_iter2_reg & ap_const_lv3_0);
    slope_fu_238_p2 <= std_logic_vector(unsigned(add_ln11_fu_232_p2) + unsigned(zext_ln11_2_fu_228_p1));

    streamCtxRAM_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, streamCtxRAM_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            streamCtxRAM_blk_n <= streamCtxRAM_full_n;
        else 
            streamCtxRAM_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    streamCtxRAM_din <= (select_ln16_fu_340_p3 & tmp_reg_423);

    streamCtxRAM_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            streamCtxRAM_write <= ap_const_logic_1;
        else 
            streamCtxRAM_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln16_fu_335_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(initState_reg_417));
    trunc_ln12_fu_244_p1 <= select_ln41_1_fu_199_p3(4 - 1 downto 0);
    trunc_ln13_fu_304_p1 <= select_ln8_fu_297_p3(7 - 1 downto 0);
    trunc_ln1_fu_206_p4 <= select_ln41_1_fu_199_p3(7 downto 4);
    xor_ln16_fu_330_p2 <= (initState_reg_417 xor ap_const_lv7_40);
    zext_ln11_2_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_220_p3),7));
    zext_ln11_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_206_p4),7));
    zext_ln14_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_266_p3),10));
    zext_ln40_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln40),13));
end behav;
