-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_cabac_top_Pipeline_VITIS_LOOP_58_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bst_fifo_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    bst_fifo_empty_n : IN STD_LOGIC;
    bst_fifo_read : OUT STD_LOGIC;
    bitOut_TREADY : IN STD_LOGIC;
    bitOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    bitOut_TVALID : OUT STD_LOGIC );
end;


architecture behav of cabac_top_cabac_top_Pipeline_VITIS_LOOP_58_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_FF : STD_LOGIC_VECTOR (9 downto 0) := "0011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln58_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op34_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bitOut_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bst_fifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln58_reg_317_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_317_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bState_n_bits_held_load_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_n_bits_held_load_reg_321_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_n_bits_held_load_reg_321_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_326_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln22_fu_146_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln22_reg_330 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln22_reg_330_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln22_reg_330_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal next_n_held_bits_fu_156_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_n_held_bits_reg_335 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_n_held_bits_reg_335_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln14_fu_171_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln14_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln14_reg_340_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln14_reg_340_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_6_reg_345 : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_held_aligned_word_load_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln42_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_362 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_phi_mux_bitVal_phi_fu_96_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_bitVal_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_5_fu_269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_fu_127_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bState_n_bits_held_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln40_1_fu_162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_bState_n_bits_held_load : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_held_aligned_word_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_27_fu_136_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln24_fu_152_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal aligned_word_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln40_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln23_fu_226_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln23_fu_232_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln23_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_2_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln11_1_fu_247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_1_fu_251_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln42_fu_260_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal retVal_3_fu_254_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln42_fu_263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_1_fu_286_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_335 : BOOLEAN;
    signal ap_condition_339 : BOOLEAN;
    signal ap_condition_342 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    bState_held_aligned_word_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    bState_held_aligned_word_fu_76 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_condition_335)) then 
                    bState_held_aligned_word_fu_76 <= retVal_6_reg_345;
                end if;
            end if; 
        end if;
    end process;

    bState_n_bits_held_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_342)) then 
                    bState_n_bits_held_fu_72 <= add_ln14_fu_171_p2;
                elsif ((ap_const_boolean_1 = ap_condition_339)) then 
                    bState_n_bits_held_fu_72 <= zext_ln40_1_fu_162_p1;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    bState_n_bits_held_fu_72 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= i_3_fu_127_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_fu_140_p2 = ap_const_lv1_1))) then
                add_ln14_reg_340 <= add_ln14_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln14_reg_340_pp0_iter1_reg <= add_ln14_reg_340;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bState_n_bits_held_load_reg_321_pp0_iter1_reg <= bState_n_bits_held_load_reg_321;
                icmp_ln13_reg_326_pp0_iter1_reg <= icmp_ln13_reg_326;
                icmp_ln58_reg_317 <= icmp_ln58_fu_121_p2;
                icmp_ln58_reg_317_pp0_iter1_reg <= icmp_ln58_reg_317;
                next_n_held_bits_reg_335_pp0_iter1_reg <= next_n_held_bits_reg_335;
                xor_ln22_reg_330_pp0_iter1_reg <= xor_ln22_reg_330;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln14_reg_340_pp0_iter2_reg <= add_ln14_reg_340_pp0_iter1_reg;
                bState_n_bits_held_load_reg_321_pp0_iter2_reg <= bState_n_bits_held_load_reg_321_pp0_iter1_reg;
                icmp_ln13_reg_326_pp0_iter2_reg <= icmp_ln13_reg_326_pp0_iter1_reg;
                icmp_ln58_reg_317_pp0_iter2_reg <= icmp_ln58_reg_317_pp0_iter1_reg;
                xor_ln22_reg_330_pp0_iter2_reg <= xor_ln22_reg_330_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_reg_317_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bState_held_aligned_word_load_reg_351 <= bState_held_aligned_word_fu_76;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bState_n_bits_held_load_reg_321 <= ap_sig_allocacmp_bState_n_bits_held_load;
                icmp_ln13_reg_326 <= icmp_ln13_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_reg_317_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_reg_326_pp0_iter1_reg = ap_const_lv1_0))) then
                lshr_ln42_reg_357 <= lshr_ln42_fu_200_p2;
                tmp_1_reg_362 <= lshr_ln42_fu_200_p2(31 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_fu_140_p2 = ap_const_lv1_0))) then
                next_n_held_bits_reg_335 <= next_n_held_bits_fu_156_p2;
                xor_ln22_reg_330 <= xor_ln22_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op34_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                retVal_6_reg_345 <= bst_fifo_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_fu_171_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_bState_n_bits_held_load) + unsigned(ap_const_lv8_FD));
    aligned_word_fu_190_p3 <= (ap_const_lv24_0 & retVal_6_reg_345);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, bst_fifo_empty_n, ap_predicate_op34_read_state2, bitOut_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= (((bitOut_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op34_read_state2 = ap_const_boolean_1) and (bst_fifo_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, bst_fifo_empty_n, ap_predicate_op34_read_state2, bitOut_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= (((bitOut_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op34_read_state2 = ap_const_boolean_1) and (bst_fifo_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, bst_fifo_empty_n, ap_predicate_op34_read_state2, bitOut_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= (((bitOut_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_predicate_op34_read_state2 = ap_const_boolean_1) and (bst_fifo_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(bst_fifo_empty_n, ap_predicate_op34_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op34_read_state2 = ap_const_boolean_1) and (bst_fifo_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(bitOut_TREADY)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (bitOut_TREADY = ap_const_logic_0);
    end process;


    ap_condition_335_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln58_reg_317_pp0_iter1_reg, icmp_ln13_reg_326_pp0_iter1_reg)
    begin
                ap_condition_335 <= ((icmp_ln58_reg_317_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_326_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_339_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln58_fu_121_p2, icmp_ln13_fu_140_p2)
    begin
                ap_condition_339 <= ((icmp_ln58_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_140_p2 = ap_const_lv1_0));
    end process;


    ap_condition_342_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln58_fu_121_p2, icmp_ln13_fu_140_p2)
    begin
                ap_condition_342 <= ((icmp_ln58_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln13_fu_140_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_121_p2)
    begin
        if (((icmp_ln58_fu_121_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_bitVal_phi_fu_96_p4_assign_proc : process(icmp_ln58_reg_317_pp0_iter2_reg, icmp_ln13_reg_326_pp0_iter2_reg, zext_ln11_fu_290_p1, ap_phi_reg_pp0_iter3_bitVal_reg_93, retVal_5_fu_269_p3)
    begin
        if ((icmp_ln58_reg_317_pp0_iter2_reg = ap_const_lv1_0)) then
            if ((icmp_ln13_reg_326_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_bitVal_phi_fu_96_p4 <= retVal_5_fu_269_p3;
            elsif ((icmp_ln13_reg_326_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_bitVal_phi_fu_96_p4 <= zext_ln11_fu_290_p1;
            else 
                ap_phi_mux_bitVal_phi_fu_96_p4 <= ap_phi_reg_pp0_iter3_bitVal_reg_93;
            end if;
        else 
            ap_phi_mux_bitVal_phi_fu_96_p4 <= ap_phi_reg_pp0_iter3_bitVal_reg_93;
        end if; 
    end process;

    ap_phi_reg_pp0_iter3_bitVal_reg_93 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op34_read_state2_assign_proc : process(icmp_ln58_reg_317, icmp_ln13_reg_326)
    begin
                ap_predicate_op34_read_state2 <= ((icmp_ln13_reg_326 = ap_const_lv1_0) and (icmp_ln58_reg_317 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bState_n_bits_held_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, bState_n_bits_held_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_bState_n_bits_held_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_bState_n_bits_held_load <= bState_n_bits_held_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_68;
        end if; 
    end process;

    bitOut_TDATA <= ap_phi_mux_bitVal_phi_fu_96_p4;

    bitOut_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, bitOut_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            bitOut_TDATA_blk_n <= bitOut_TREADY;
        else 
            bitOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bitOut_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            bitOut_TVALID <= ap_const_logic_1;
        else 
            bitOut_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    bst_fifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, bst_fifo_empty_n, ap_predicate_op34_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op34_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bst_fifo_blk_n <= bst_fifo_empty_n;
        else 
            bst_fifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bst_fifo_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op34_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op34_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bst_fifo_read <= ap_const_logic_1;
        else 
            bst_fifo_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_27_fu_136_p1 <= ap_sig_allocacmp_bState_n_bits_held_load(2 - 1 downto 0);
    i_3_fu_127_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_1));
    icmp_ln13_fu_140_p2 <= "1" when (unsigned(ap_sig_allocacmp_bState_n_bits_held_load) > unsigned(ap_const_lv8_2)) else "0";
    icmp_ln58_fu_121_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv4_A) else "0";
    lshr_ln42_fu_200_p2 <= std_logic_vector(shift_right(unsigned(aligned_word_fu_190_p3),to_integer(unsigned('0' & zext_ln40_fu_197_p1(31-1 downto 0)))));
    next_n_held_bits_fu_156_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(zext_ln24_fu_152_p1));
    or_ln42_fu_263_p2 <= (trunc_ln42_fu_260_p1 or retVal_3_fu_254_p2);
    retVal_1_fu_286_p1 <= retVal_fu_280_p2(3 - 1 downto 0);
    retVal_2_fu_242_p2 <= (xor_ln23_fu_236_p2 and bState_held_aligned_word_load_reg_351);
    retVal_3_fu_254_p2 <= std_logic_vector(shift_left(unsigned(zext_ln11_1_fu_247_p1),to_integer(unsigned('0' & zext_ln24_1_fu_251_p1(11-1 downto 0)))));
    retVal_5_fu_269_p3 <= (tmp_1_reg_362 & or_ln42_fu_263_p2);
    retVal_fu_280_p2 <= std_logic_vector(shift_right(unsigned(zext_ln23_fu_223_p1),to_integer(unsigned('0' & zext_ln14_fu_277_p1(31-1 downto 0)))));
    shl_ln23_fu_226_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv10_FF),to_integer(unsigned('0' & zext_ln13_fu_220_p1(10-1 downto 0)))));
    trunc_ln23_fu_232_p1 <= shl_ln23_fu_226_p2(8 - 1 downto 0);
    trunc_ln42_fu_260_p1 <= lshr_ln42_reg_357(11 - 1 downto 0);
    xor_ln22_fu_146_p2 <= (empty_27_fu_136_p1 xor ap_const_lv2_3);
    xor_ln23_fu_236_p2 <= (trunc_ln23_fu_232_p1 xor ap_const_lv8_FF);
    zext_ln11_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_2_fu_242_p2),11));
    zext_ln11_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_1_fu_286_p1),32));
    zext_ln13_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bState_n_bits_held_load_reg_321_pp0_iter2_reg),10));
    zext_ln14_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_reg_340_pp0_iter2_reg),32));
    zext_ln23_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bState_held_aligned_word_load_reg_351),32));
    zext_ln24_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln22_reg_330_pp0_iter2_reg),11));
    zext_ln24_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln22_fu_146_p2),3));
    zext_ln40_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_n_held_bits_fu_156_p2),8));
    zext_ln40_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_n_held_bits_reg_335_pp0_iter1_reg),32));
end behav;
