-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_sao_top_Pipeline_VITIS_LOOP_38_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_ivlCurrRange_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_n_bits_held_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_ivlOffset_6 : IN STD_LOGIC_VECTOR (30 downto 0);
    init_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce1 : OUT STD_LOGIC;
    bStream_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    symbolVal_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    symbolVal_7_out_ap_vld : OUT STD_LOGIC;
    state_ivlCurrRange_ret4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlCurrRange_ret4_out_ap_vld : OUT STD_LOGIC;
    state_ivlOffset_ret5_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlOffset_ret5_out_ap_vld : OUT STD_LOGIC;
    state_bstate_currIdx_ret4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_ret4_out_ap_vld : OUT STD_LOGIC;
    state_bstate_n_bits_held_ret4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_ret4_out_ap_vld : OUT STD_LOGIC;
    state_bstate_held_aligned_word_ret5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_ret5_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_sao_top_Pipeline_VITIS_LOOP_38_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal and_ln42_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal init_assign_7_reg_123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal symbolVal_load_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal symbolVal_4_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal symbolVal_4_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_135_ap_start : STD_LOGIC;
    signal grp_decode_decision_fu_135_ap_done : STD_LOGIC;
    signal grp_decode_decision_fu_135_ap_idle : STD_LOGIC;
    signal grp_decode_decision_fu_135_ap_ready : STD_LOGIC;
    signal grp_decode_decision_fu_135_bStream_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_decision_fu_135_bStream_ce0 : STD_LOGIC;
    signal grp_decode_decision_fu_135_bStream_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_decision_fu_135_bStream_ce1 : STD_LOGIC;
    signal grp_decode_decision_fu_135_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_135_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_135_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_135_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_decision_fu_135_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_decision_fu_135_ap_return_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal grp_decode_decision_fu_135_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal symbolVal_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlOffset_7_in_fu_60 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln39_fu_215_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal state_bstate_held_aligned_word_7_fu_64 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_n_bits_held_7_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_currIdx_7_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlCurrRange_7_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_decode_decision IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        init : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bStream_ce0 : OUT STD_LOGIC;
        bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bStream_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bStream_ce1 : OUT STD_LOGIC;
        bStream_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_decode_decision_fu_135 : component cabac_top_decode_decision
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_decision_fu_135_ap_start,
        ap_done => grp_decode_decision_fu_135_ap_done,
        ap_idle => grp_decode_decision_fu_135_ap_idle,
        ap_ready => grp_decode_decision_fu_135_ap_ready,
        ap_ce => ap_const_logic_1,
        init => init_assign_7_reg_123,
        p_read => state_ivlCurrRange_7_fu_76,
        p_read1 => state_ivlOffset_7_in_fu_60,
        p_read2 => state_bstate_currIdx_7_fu_72,
        p_read3 => state_bstate_n_bits_held_7_fu_68,
        p_read4 => state_bstate_held_aligned_word_7_fu_64,
        bStream_address0 => grp_decode_decision_fu_135_bStream_address0,
        bStream_ce0 => grp_decode_decision_fu_135_bStream_ce0,
        bStream_q0 => bStream_q0,
        bStream_address1 => grp_decode_decision_fu_135_bStream_address1,
        bStream_ce1 => grp_decode_decision_fu_135_bStream_ce1,
        bStream_q1 => bStream_q1,
        ap_return_0 => grp_decode_decision_fu_135_ap_return_0,
        ap_return_1 => grp_decode_decision_fu_135_ap_return_1,
        ap_return_2 => grp_decode_decision_fu_135_ap_return_2,
        ap_return_3 => grp_decode_decision_fu_135_ap_return_3,
        ap_return_4 => grp_decode_decision_fu_135_ap_return_4,
        ap_return_5 => grp_decode_decision_fu_135_ap_return_5);

    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_decode_decision_fu_135_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_decision_fu_135_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_logic_1 = ap_NS_fsm_state2))) then 
                    grp_decode_decision_fu_135_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_decision_fu_135_ap_ready = ap_const_logic_1)) then 
                    grp_decode_decision_fu_135_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    init_assign_7_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                init_assign_7_reg_123 <= ap_const_lv1_0;
            elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                init_assign_7_reg_123 <= init_1;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_7_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                state_bstate_currIdx_7_fu_72 <= state_bstate_currIdx_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                state_bstate_currIdx_7_fu_72 <= grp_decode_decision_fu_135_ap_return_2;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_7_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                state_bstate_held_aligned_word_7_fu_64 <= state_bstate_held_aligned_word_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                state_bstate_held_aligned_word_7_fu_64 <= grp_decode_decision_fu_135_ap_return_4;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_7_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                state_bstate_n_bits_held_7_fu_68 <= state_bstate_n_bits_held_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                state_bstate_n_bits_held_7_fu_68 <= grp_decode_decision_fu_135_ap_return_3;
            end if; 
        end if;
    end process;

    state_ivlCurrRange_7_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                state_ivlCurrRange_7_fu_76 <= state_ivlCurrRange_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                state_ivlCurrRange_7_fu_76 <= grp_decode_decision_fu_135_ap_return_0;
            end if; 
        end if;
    end process;

    state_ivlOffset_7_in_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                state_ivlOffset_7_in_fu_60 <= state_ivlOffset_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                state_ivlOffset_7_in_fu_60 <= trunc_ln39_fu_215_p1;
            end if; 
        end if;
    end process;

    symbolVal_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                symbolVal_fu_56 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = and_ln42_fu_240_p2))) then 
                symbolVal_fu_56 <= symbolVal_4_reg_357;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                symbolVal_4_reg_357 <= symbolVal_4_fu_201_p2;
                symbolVal_load_reg_352 <= symbolVal_fu_56;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    and_ln42_fu_240_p2 <= (icmp_ln42_fu_235_p2 and grp_decode_decision_fu_135_ap_return_5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state5, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bStream_address0 <= grp_decode_decision_fu_135_bStream_address0;
    bStream_address1 <= grp_decode_decision_fu_135_bStream_address1;
    bStream_ce0 <= grp_decode_decision_fu_135_bStream_ce0;
    bStream_ce1 <= grp_decode_decision_fu_135_bStream_ce1;
    grp_decode_decision_fu_135_ap_start <= grp_decode_decision_fu_135_ap_start_reg;
    icmp_ln42_fu_235_p2 <= "1" when (unsigned(symbolVal_4_reg_357) < unsigned(ap_const_lv32_5)) else "0";
    state_bstate_currIdx_ret4_out <= grp_decode_decision_fu_135_ap_return_2;

    state_bstate_currIdx_ret4_out_ap_vld_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_bstate_currIdx_ret4_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_currIdx_ret4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_held_aligned_word_ret5_out <= grp_decode_decision_fu_135_ap_return_4;

    state_bstate_held_aligned_word_ret5_out_ap_vld_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_bstate_held_aligned_word_ret5_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_held_aligned_word_ret5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_n_bits_held_ret4_out <= grp_decode_decision_fu_135_ap_return_3;

    state_bstate_n_bits_held_ret4_out_ap_vld_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_bstate_n_bits_held_ret4_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_n_bits_held_ret4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_ivlCurrRange_ret4_out <= grp_decode_decision_fu_135_ap_return_0;

    state_ivlCurrRange_ret4_out_ap_vld_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ivlCurrRange_ret4_out_ap_vld <= ap_const_logic_1;
        else 
            state_ivlCurrRange_ret4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_ivlOffset_ret5_out <= grp_decode_decision_fu_135_ap_return_1;

    state_ivlOffset_ret5_out_ap_vld_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_ivlOffset_ret5_out_ap_vld <= ap_const_logic_1;
        else 
            state_ivlOffset_ret5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    symbolVal_4_fu_201_p2 <= std_logic_vector(unsigned(symbolVal_fu_56) + unsigned(ap_const_lv32_1));
    symbolVal_7_out <= symbolVal_load_reg_352;

    symbolVal_7_out_ap_vld_assign_proc : process(ap_CS_fsm_state5, and_ln42_fu_240_p2)
    begin
        if (((ap_const_lv1_0 = and_ln42_fu_240_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            symbolVal_7_out_ap_vld <= ap_const_logic_1;
        else 
            symbolVal_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln39_fu_215_p1 <= grp_decode_decision_fu_135_ap_return_1(31 - 1 downto 0);
end behav;
