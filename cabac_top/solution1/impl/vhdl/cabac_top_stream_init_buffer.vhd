-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_stream_init_buffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    streamCtxRAM1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    streamCtxRAM1_full_n : IN STD_LOGIC;
    streamCtxRAM1_write : OUT STD_LOGIC );
end;


architecture behav of cabac_top_stream_init_buffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_A60 : STD_LOGIC_VECTOR (11 downto 0) := "101001100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_1F0 : STD_LOGIC_VECTOR (8 downto 0) := "111110000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_7E : STD_LOGIC_VECTOR (8 downto 0) := "001111110";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal I_FRAME_INIT_VALS_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal I_FRAME_INIT_VALS_ce0 : STD_LOGIC;
    signal I_FRAME_INIT_VALS_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal streamCtxRAM1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln41_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln12_fu_126_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln12_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln14_3_fu_206_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_3_reg_300 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal initState_fu_234_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal initState_reg_306 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_fu_104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln41_fu_115_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_130_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln_fu_140_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln14_1_fu_152_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_2_fu_160_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_1_fu_164_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_1_fu_148_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_fu_170_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_186_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln14_fu_197_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_2_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_193_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln6_fu_217_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln12_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln11_fu_224_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln16_fu_250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln16_fu_255_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln16_fu_260_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_stream_init_buffer_I_FRAME_INIT_VALS_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    I_FRAME_INIT_VALS_U : component cabac_top_stream_init_buffer_I_FRAME_INIT_VALS_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => I_FRAME_INIT_VALS_address0,
        ce0 => I_FRAME_INIT_VALS_ce0,
        q0 => I_FRAME_INIT_VALS_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_72 <= ap_const_lv3_0;
            elsif (((icmp_ln41_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_72 <= add_ln41_fu_115_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    add_ln14_3_reg_300(8 downto 1) <= add_ln14_3_fu_206_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                initState_reg_306 <= initState_fu_234_p3;
                tmp_reg_312 <= initState_fu_234_p3(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln12_reg_290 <= trunc_ln12_fu_126_p1;
                trunc_ln_reg_295 <= add_ln14_fu_170_p2(11 downto 4);
            end if;
        end if;
    end process;
    add_ln14_3_reg_300(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, streamCtxRAM1_full_n, ap_CS_fsm_state6, ap_CS_fsm_state2, icmp_ln41_fu_109_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln41_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((streamCtxRAM1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    I_FRAME_INIT_VALS_address0 <= zext_ln41_fu_104_p1(3 - 1 downto 0);

    I_FRAME_INIT_VALS_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            I_FRAME_INIT_VALS_ce0 <= ap_const_logic_1;
        else 
            I_FRAME_INIT_VALS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_1_fu_164_p2 <= std_logic_vector(unsigned(zext_ln14_2_fu_160_p1) + unsigned(ap_const_lv12_A60));
    add_ln14_2_fu_200_p2 <= std_logic_vector(signed(sext_ln14_fu_197_p1) + signed(ap_const_lv9_1F0));
    add_ln14_3_fu_206_p2 <= std_logic_vector(unsigned(add_ln14_2_fu_200_p2) + unsigned(zext_ln14_fu_193_p1));
    add_ln14_fu_170_p2 <= std_logic_vector(unsigned(add_ln14_1_fu_164_p2) + unsigned(zext_ln14_1_fu_148_p1));
    add_ln41_fu_115_p2 <= std_logic_vector(unsigned(i_fu_72) + unsigned(ap_const_lv3_1));
    and_ln14_1_fu_152_p3 <= (tmp_1_fu_130_p4 & ap_const_lv5_0);
    and_ln_fu_140_p3 <= (tmp_1_fu_130_p4 & ap_const_lv7_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(streamCtxRAM1_full_n)
    begin
        if ((streamCtxRAM1_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln41_fu_109_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln41_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln41_fu_109_p2)
    begin
        if (((icmp_ln41_fu_109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln12_fu_228_p2 <= "1" when (unsigned(select_ln6_fu_217_p3) < unsigned(ap_const_lv9_7E)) else "0";
    icmp_ln41_fu_109_p2 <= "1" when (i_fu_72 = ap_const_lv3_5) else "0";
    icmp_ln6_fu_212_p2 <= "1" when (signed(add_ln14_3_reg_300) < signed(ap_const_lv9_1)) else "0";
    initState_fu_234_p3 <= 
        trunc_ln11_fu_224_p1 when (icmp_ln12_fu_228_p2(0) = '1') else 
        ap_const_lv7_7E;
    select_ln16_fu_260_p3 <= 
        xor_ln16_fu_250_p2 when (tmp_reg_312(0) = '1') else 
        sub_ln16_fu_255_p2;
    select_ln6_fu_217_p3 <= 
        ap_const_lv9_1 when (icmp_ln6_fu_212_p2(0) = '1') else 
        add_ln14_3_reg_300;
        sext_ln14_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_295),9));

    shl_ln_fu_186_p3 <= (trunc_ln12_reg_290 & ap_const_lv3_0);

    streamCtxRAM1_blk_n_assign_proc : process(streamCtxRAM1_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            streamCtxRAM1_blk_n <= streamCtxRAM1_full_n;
        else 
            streamCtxRAM1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    streamCtxRAM1_din <= (select_ln16_fu_260_p3 & tmp_reg_312);

    streamCtxRAM1_write_assign_proc : process(streamCtxRAM1_full_n, ap_CS_fsm_state6)
    begin
        if (((streamCtxRAM1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            streamCtxRAM1_write <= ap_const_logic_1;
        else 
            streamCtxRAM1_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln16_fu_255_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(initState_reg_306));
    tmp_1_fu_130_p4 <= I_FRAME_INIT_VALS_q0(7 downto 4);
    trunc_ln11_fu_224_p1 <= select_ln6_fu_217_p3(7 - 1 downto 0);
    trunc_ln12_fu_126_p1 <= I_FRAME_INIT_VALS_q0(4 - 1 downto 0);
    xor_ln16_fu_250_p2 <= (initState_reg_306 xor ap_const_lv7_40);
    zext_ln14_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_140_p3),12));
    zext_ln14_2_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln14_1_fu_152_p3),12));
    zext_ln14_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_186_p3),9));
    zext_ln41_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_72),64));
end behav;
