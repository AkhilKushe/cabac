-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_bstate_n_bits_held_read_assign : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_read_assign : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_currIdx_read_assign : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln1076_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln1076 : IN STD_LOGIC_VECTOR (31 downto 0);
    bStream_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream1_load_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_0_i_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_0_i_out_ap_vld : OUT STD_LOGIC;
    state_bstate_held_aligned_word_0_i_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_0_i_out_ap_vld : OUT STD_LOGIC;
    state_bstate_currIdx_0_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_0_i_out_ap_vld : OUT STD_LOGIC;
    phi_ln59_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    phi_ln59_out_ap_vld : OUT STD_LOGIC;
    state_ivlCurrRange_1_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlCurrRange_1_i_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_decode_decision_Pipeline_VITIS_LOOP_53_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1072_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal state_ivlCurrRange_1_i_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1026_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal phi_ln59_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_currIdx_0_i_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln13_2_fu_378_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_held_aligned_word_0_i_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_3_fu_370_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_n_bits_held_0_i_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln13_fu_362_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_222_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln13_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_280_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln23_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_5_fu_300_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal retVal_5_fu_300_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln24_fu_290_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_260_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_332_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_1_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_2_fu_348_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln6_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_fu_324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln11_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1543_fu_394_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1543_1_fu_398_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal retVal_6_fu_386_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_412_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln1543_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_8_1_1_U10 : component cabac_top_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => bStream_load_2,
        din1 => bStream1_load_2,
        din2 => p_read,
        din3 => p_read1,
        din4 => retVal_5_fu_300_p5,
        dout => retVal_5_fu_300_p6);

    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    phi_ln59_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln59_fu_88 <= select_ln1076_2;
                elsif (((icmp_ln1072_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_ln59_fu_88 <= ret_fu_422_p3;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_0_i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_currIdx_0_i_fu_92 <= state_bstate_currIdx_read_assign;
                elsif (((icmp_ln1072_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    state_bstate_currIdx_0_i_fu_92 <= select_ln13_2_fu_378_p3;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_0_i_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_held_aligned_word_0_i_fu_96 <= state_bstate_held_aligned_word_read_assign;
                elsif (((icmp_ln1072_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    state_bstate_held_aligned_word_0_i_fu_96 <= retVal_3_fu_370_p3;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_0_i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_n_bits_held_0_i_fu_100 <= state_bstate_n_bits_held_read_assign;
                elsif (((icmp_ln1072_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    state_bstate_n_bits_held_0_i_fu_100 <= select_ln13_fu_362_p3;
                end if;
            end if; 
        end if;
    end process;

    state_ivlCurrRange_1_i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_ivlCurrRange_1_i_fu_84 <= select_ln1076;
                elsif (((icmp_ln1072_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    state_ivlCurrRange_1_i_fu_84 <= shl_ln1026_fu_250_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_fu_332_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_260_p1) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_356_p2 <= std_logic_vector(unsigned(state_bstate_n_bits_held_0_i_fu_100) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_310_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_0_i_fu_92) + unsigned(ap_const_lv32_1));
    and_ln24_fu_290_p2 <= (xor_ln23_fu_284_p2 and state_bstate_held_aligned_word_0_i_fu_96);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1072_fu_232_p2)
    begin
        if (((icmp_ln1072_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1072_fu_232_p2 <= "1" when (tmp_fu_222_p4 = ap_const_lv24_0) else "0";
    icmp_ln13_fu_264_p2 <= "1" when (state_bstate_n_bits_held_0_i_fu_100 = ap_const_lv8_0) else "0";
    or_ln1543_fu_406_p2 <= (shl_ln1543_1_fu_398_p3 or retVal_6_fu_386_p3);
    phi_ln59_out <= phi_ln59_fu_88;

    phi_ln59_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1072_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phi_ln59_out_ap_vld <= ap_const_logic_1;
        else 
            phi_ln59_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retVal_1_fu_342_p2 <= std_logic_vector(shift_right(unsigned(zext_ln23_fu_270_p1),to_integer(unsigned('0' & sext_ln14_fu_338_p1(31-1 downto 0)))));
    retVal_2_fu_348_p1 <= retVal_1_fu_342_p2(1 - 1 downto 0);
    retVal_3_fu_370_p3 <= 
        retVal_5_fu_300_p6 when (icmp_ln13_fu_264_p2(0) = '1') else 
        state_bstate_held_aligned_word_0_i_fu_96;
    retVal_5_fu_300_p5 <= state_bstate_currIdx_0_i_fu_92(2 - 1 downto 0);
    retVal_6_fu_386_p3 <= 
        retVal_fu_324_p3 when (icmp_ln13_fu_264_p2(0) = '1') else 
        zext_ln11_fu_352_p1;
    retVal_fu_324_p3 <= (and_ln24_fu_290_p2 & tmp_1_fu_316_p3);
    ret_fu_422_p3 <= (tmp_4_fu_412_p4 & or_ln1543_fu_406_p2);
    select_ln13_2_fu_378_p3 <= 
        add_ln6_fu_310_p2 when (icmp_ln13_fu_264_p2(0) = '1') else 
        state_bstate_currIdx_0_i_fu_92;
    select_ln13_fu_362_p3 <= 
        ap_const_lv8_7 when (icmp_ln13_fu_264_p2(0) = '1') else 
        add_ln16_fu_356_p2;
        sext_ln14_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_332_p2),32));

    shl_ln1026_fu_250_p2 <= std_logic_vector(shift_left(unsigned(state_ivlCurrRange_1_i_fu_84),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln1543_1_fu_398_p3 <= (trunc_ln1543_fu_394_p1 & ap_const_lv1_0);
    shl_ln23_fu_274_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FF),to_integer(unsigned('0' & zext_ln13_fu_256_p1(31-1 downto 0)))));
    state_bstate_currIdx_0_i_out <= state_bstate_currIdx_0_i_fu_92;

    state_bstate_currIdx_0_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1072_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_bstate_currIdx_0_i_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_currIdx_0_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_held_aligned_word_0_i_out <= state_bstate_held_aligned_word_0_i_fu_96;

    state_bstate_held_aligned_word_0_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1072_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_bstate_held_aligned_word_0_i_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_held_aligned_word_0_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_n_bits_held_0_i_out <= state_bstate_n_bits_held_0_i_fu_100;

    state_bstate_n_bits_held_0_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1072_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_bstate_n_bits_held_0_i_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_n_bits_held_0_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_ivlCurrRange_1_i_out <= state_ivlCurrRange_1_i_fu_84;

    state_ivlCurrRange_1_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1072_fu_232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1072_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_ivlCurrRange_1_i_out_ap_vld <= ap_const_logic_1;
        else 
            state_ivlCurrRange_1_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_316_p3 <= retVal_5_fu_300_p6(7 downto 7);
    tmp_4_fu_412_p4 <= phi_ln59_fu_88(30 downto 8);
    tmp_fu_222_p4 <= state_ivlCurrRange_1_i_fu_84(31 downto 8);
    trunc_ln1543_fu_394_p1 <= phi_ln59_fu_88(8 - 1 downto 0);
    trunc_ln23_fu_280_p1 <= shl_ln23_fu_274_p2(8 - 1 downto 0);
    xor_ln23_fu_284_p2 <= (trunc_ln23_fu_280_p1 xor ap_const_lv8_FF);
    zext_ln11_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_2_fu_348_p1),9));
    zext_ln13_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_n_bits_held_0_i_fu_100),9));
    zext_ln13_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_n_bits_held_0_i_fu_100),32));
    zext_ln23_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_held_aligned_word_0_i_fu_96),32));
end behav;
