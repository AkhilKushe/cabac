-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_sao_top_Pipeline_VITIS_LOOP_96_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_bstate_currIdx_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_n_bits_held_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    state_ivlOffset_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_reload8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_reload9 : IN STD_LOGIC_VECTOR (30 downto 0);
    baeState_0_constprop_load : IN STD_LOGIC_VECTOR (31 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_currIdx_11_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_11_out_ap_vld : OUT STD_LOGIC;
    state_bstate_n_bits_held_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_11_out_ap_vld : OUT STD_LOGIC;
    state_bstate_held_aligned_word_11_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_11_out_ap_vld : OUT STD_LOGIC;
    state_ivlOffset_8_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlOffset_8_out_ap_vld : OUT STD_LOGIC;
    symbolVal_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    symbolVal_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_sao_top_Pipeline_VITIS_LOOP_96_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln96_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln96_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_612_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_load17_reg_616 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_621 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal retVal_fu_392_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter0_val_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter1_val_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter2_val_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter3_val_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln5_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal symbolVal_4_fu_96 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln_cast_cast_fu_500_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_in72_fu_100 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln76_fu_486_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_fu_306_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal binIdx_fu_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln99_fu_291_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_2_fu_478_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_n_bits_held_11_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal aligned_word_fu_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal aligned_word_1_fu_124 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_currIdx_11_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln13_fu_349_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_1_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_2_fu_372_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1543_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1543_1_fu_433_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_450_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln1543_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_1_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln99_fu_496_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal binVal_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_398 : BOOLEAN;
    signal ap_condition_402 : BOOLEAN;
    signal ap_condition_405 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    aligned_word_1_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    aligned_word_1_fu_124 <= state_bstate_held_aligned_word_8_reload;
                elsif ((ap_const_boolean_1 = ap_condition_398)) then 
                    aligned_word_1_fu_124 <= bStream_q0;
                end if;
            end if; 
        end if;
    end process;

    aligned_word_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    aligned_word_fu_120 <= p_reload7;
                elsif ((ap_const_boolean_1 = ap_condition_398)) then 
                    aligned_word_fu_120 <= bStream_q0;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_val_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln13_reg_621 = ap_const_lv1_0) and (icmp_ln96_reg_612 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_val_reg_228 <= zext_ln11_fu_376_p1;
                elsif (((icmp_ln13_reg_621 = ap_const_lv1_1) and (icmp_ln96_reg_612 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_val_reg_228 <= retVal_fu_392_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_val_reg_228 <= ap_phi_reg_pp0_iter2_val_reg_228;
                end if;
            end if; 
        end if;
    end process;

    binIdx_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    binIdx_fu_108 <= ap_const_lv3_0;
                elsif (((icmp_ln96_fu_285_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    binIdx_fu_108 <= add_ln99_fu_291_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_104 <= p_reload8;
                elsif ((ap_const_boolean_1 = ap_condition_405)) then 
                    empty_fu_104 <= ap_const_lv8_7;
                elsif ((ap_const_boolean_1 = ap_condition_402)) then 
                    empty_fu_104 <= add_ln16_fu_306_p2;
                end if;
            end if; 
        end if;
    end process;

    p_in72_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_in72_fu_100 <= p_reload9;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_0))) then 
                    p_in72_fu_100 <= trunc_ln76_fu_486_p1;
                end if;
            end if; 
        end if;
    end process;

    ret_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    ret_fu_112 <= state_ivlOffset_6_reload;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_0))) then 
                    ret_fu_112 <= ret_2_fu_478_p3;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_11_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_currIdx_11_fu_128 <= state_bstate_currIdx_8_reload;
                elsif ((ap_const_boolean_1 = ap_condition_405)) then 
                    state_bstate_currIdx_11_fu_128 <= add_ln6_fu_325_p2;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_11_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    state_bstate_n_bits_held_11_fu_116 <= state_bstate_n_bits_held_8_reload;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_612 = ap_const_lv1_0))) then 
                    state_bstate_n_bits_held_11_fu_116 <= empty_fu_104;
                end if;
            end if; 
        end if;
    end process;

    symbolVal_4_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    symbolVal_4_fu_96 <= ap_const_lv30_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_0))) then 
                    symbolVal_4_fu_96 <= or_ln_cast_cast_fu_500_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln96_reg_612 <= icmp_ln96_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_val_reg_228 <= ap_phi_reg_pp0_iter0_val_reg_228;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_val_reg_228 <= ap_phi_reg_pp0_iter1_val_reg_228;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_285_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln13_reg_621 <= icmp_ln13_fu_300_p2;
                p_load17_reg_616 <= empty_fu_104;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln96_reg_612_pp0_iter2_reg <= icmp_ln96_reg_612;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_fu_356_p2 <= std_logic_vector(unsigned(zext_ln13_fu_349_p1) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_306_p2 <= std_logic_vector(unsigned(empty_fu_104) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_325_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_11_fu_128) + unsigned(ap_const_lv32_1));
    add_ln99_fu_291_p2 <= std_logic_vector(unsigned(binIdx_fu_108) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_398_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln96_reg_612, icmp_ln13_reg_621)
    begin
                ap_condition_398 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_621 = ap_const_lv1_1) and (icmp_ln96_reg_612 = ap_const_lv1_0));
    end process;


    ap_condition_402_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln96_fu_285_p2, icmp_ln13_fu_300_p2)
    begin
                ap_condition_402 <= ((icmp_ln96_fu_285_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln13_fu_300_p2 = ap_const_lv1_0));
    end process;


    ap_condition_405_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln96_fu_285_p2, icmp_ln13_fu_300_p2)
    begin
                ap_condition_405 <= ((icmp_ln96_fu_285_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln13_fu_300_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln96_fu_285_p2)
    begin
        if (((icmp_ln96_fu_285_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_val_reg_228 <= "XXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bStream_address0 <= zext_ln5_fu_320_p1(3 - 1 downto 0);

    bStream_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bStream_ce0 <= ap_const_logic_1;
        else 
            bStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    binVal_fu_490_p2 <= (icmp_ln1076_fu_468_p2 xor ap_const_lv1_1);
    icmp_ln1076_fu_468_p2 <= "1" when (unsigned(ret_1_fu_460_p3) < unsigned(baeState_0_constprop_load)) else "0";
    icmp_ln13_fu_300_p2 <= "1" when (empty_fu_104 = ap_const_lv8_0) else "0";
    icmp_ln96_fu_285_p2 <= "1" when (binIdx_fu_108 = ap_const_lv3_5) else "0";
    or_ln1543_fu_444_p2 <= (shl_ln1543_1_fu_433_p3 or ap_phi_reg_pp0_iter3_val_reg_228);
    or_ln_cast_cast_fu_500_p3 <= (trunc_ln99_fu_496_p1 & binVal_fu_490_p2);
    retVal_1_fu_366_p2 <= std_logic_vector(shift_right(unsigned(zext_ln14_fu_352_p1),to_integer(unsigned('0' & sext_ln14_fu_362_p1(31-1 downto 0)))));
    retVal_2_fu_372_p1 <= retVal_1_fu_366_p2(1 - 1 downto 0);
    retVal_fu_392_p3 <= (ap_const_lv1_0 & zext_ln42_fu_388_p1);
    ret_1_fu_460_p3 <= (tmp_s_fu_450_p4 & or_ln1543_fu_444_p2);
    ret_2_fu_478_p3 <= 
        ret_1_fu_460_p3 when (icmp_ln1076_fu_468_p2(0) = '1') else 
        sub_ln229_fu_473_p2;
        sext_ln14_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_356_p2),32));

    shl_ln1543_1_fu_433_p3 <= (trunc_ln1543_fu_429_p1 & ap_const_lv1_0);
    state_bstate_currIdx_11_out <= state_bstate_currIdx_11_fu_128;

    state_bstate_currIdx_11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_612_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_bstate_currIdx_11_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_currIdx_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_held_aligned_word_11_out <= aligned_word_1_fu_124;

    state_bstate_held_aligned_word_11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_612_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_bstate_held_aligned_word_11_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_held_aligned_word_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_n_bits_held_11_out <= state_bstate_n_bits_held_11_fu_116;

    state_bstate_n_bits_held_11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_612_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_bstate_n_bits_held_11_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_n_bits_held_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_ivlOffset_8_out <= ret_fu_112;

    state_ivlOffset_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_612_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_ivlOffset_8_out_ap_vld <= ap_const_logic_1;
        else 
            state_ivlOffset_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln229_fu_473_p2 <= std_logic_vector(unsigned(ret_1_fu_460_p3) - unsigned(baeState_0_constprop_load));
    symbolVal_4_out <= symbolVal_4_fu_96(8 - 1 downto 0);

    symbolVal_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln96_reg_612_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln96_reg_612_pp0_iter2_reg = ap_const_lv1_1))) then 
            symbolVal_4_out_ap_vld <= ap_const_logic_1;
        else 
            symbolVal_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_380_p3 <= bStream_q0(7 downto 7);
    tmp_s_fu_450_p4 <= p_in72_fu_100(30 downto 8);
    trunc_ln1543_fu_429_p1 <= p_in72_fu_100(8 - 1 downto 0);
    trunc_ln76_fu_486_p1 <= ret_2_fu_478_p3(31 - 1 downto 0);
    trunc_ln99_fu_496_p1 <= symbolVal_4_fu_96(29 - 1 downto 0);
    zext_ln11_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_2_fu_372_p1),9));
    zext_ln13_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_load17_reg_616),9));
    zext_ln14_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(aligned_word_fu_120),32));
    zext_ln42_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_380_p3),8));
    zext_ln5_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_currIdx_11_fu_128),64));
end behav;
