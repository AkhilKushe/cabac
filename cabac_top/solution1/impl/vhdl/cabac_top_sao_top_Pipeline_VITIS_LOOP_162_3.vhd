-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_sao_top_Pipeline_VITIS_LOOP_162_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_bstate_currIdx_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_n_bits_held_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_ivlOffset_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln188 : IN STD_LOGIC_VECTOR (3 downto 0);
    sao_offset_abs_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sao_offset_abs_ce0 : OUT STD_LOGIC;
    sao_offset_abs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sao_offset_sign_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sao_offset_sign_ce0 : OUT STD_LOGIC;
    sao_offset_sign_we0 : OUT STD_LOGIC;
    sao_offset_sign_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    baeState_0_constprop_load : IN STD_LOGIC_VECTOR (31 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_currIdx_8_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_8_out_ap_vld : OUT STD_LOGIC;
    state_bstate_n_bits_held_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_8_out_ap_vld : OUT STD_LOGIC;
    state_bstate_held_aligned_word_8_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_8_out_ap_vld : OUT STD_LOGIC;
    state_ivlOffset_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlOffset_6_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (30 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_sao_top_Pipeline_VITIS_LOOP_162_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln162_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln162_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_630_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_630_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sao_offset_sign_addr_reg_639 : STD_LOGIC_VECTOR (3 downto 0);
    signal sao_offset_sign_addr_reg_639_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sao_offset_sign_addr_reg_639_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln163_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_644_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_load15_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal retVal_4_fu_434_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter0_val_reg_253 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter1_val_reg_253 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter2_val_reg_253 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter3_val_reg_253 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln163_1_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln5_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_98 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln162_fu_311_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal aligned_word_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal aligned_word_4_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_currIdx_8_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_5_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_4_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_n_bits_held_8_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln163_fu_317_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln163_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln13_fu_391_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_398_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln14_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_8_fu_414_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1543_fu_468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1543_2_fu_472_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_486_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln1543_fu_480_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_2_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_431 : BOOLEAN;
    signal ap_condition_176 : BOOLEAN;
    signal ap_condition_171 : BOOLEAN;
    signal ap_condition_442 : BOOLEAN;
    signal ap_condition_447 : BOOLEAN;
    signal ap_condition_452 : BOOLEAN;
    signal ap_condition_456 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    aligned_word_4_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    aligned_word_4_fu_106 <= state_bstate_held_aligned_word_5;
                elsif ((ap_const_boolean_1 = ap_condition_431)) then 
                    aligned_word_4_fu_106 <= bStream_q0;
                end if;
            end if; 
        end if;
    end process;

    aligned_word_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    aligned_word_fu_102 <= state_bstate_held_aligned_word_5;
                elsif ((ap_const_boolean_1 = ap_condition_431)) then 
                    aligned_word_fu_102 <= bStream_q0;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_val_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_171)) then 
                    ap_phi_reg_pp0_iter3_val_reg_253 <= zext_ln11_fu_418_p1;
                elsif ((ap_const_boolean_1 = ap_condition_176)) then 
                    ap_phi_reg_pp0_iter3_val_reg_253 <= retVal_4_fu_434_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_val_reg_253 <= ap_phi_reg_pp0_iter2_val_reg_253;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_118 <= state_bstate_n_bits_held_5;
                elsif ((ap_const_boolean_1 = ap_condition_447)) then 
                    empty_fu_118 <= ap_const_lv8_7;
                elsif ((ap_const_boolean_1 = ap_condition_442)) then 
                    empty_fu_118 <= add_ln16_fu_353_p2;
                end if;
            end if; 
        end if;
    end process;

    i_3_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln162_fu_305_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_3_fu_98 <= add_ln162_fu_311_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_98 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    ret_4_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_4_fu_122 <= state_ivlOffset_5;
                elsif ((ap_const_boolean_1 = ap_condition_452)) then 
                    ret_4_fu_122 <= ret_5_fu_514_p3;
                end if;
            end if; 
        end if;
    end process;

    ret_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ret_fu_114 <= state_ivlOffset_5;
                elsif ((ap_const_boolean_1 = ap_condition_452)) then 
                    ret_fu_114 <= ret_5_fu_514_p3;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_8_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_currIdx_8_fu_110 <= state_bstate_currIdx_5;
                elsif ((ap_const_boolean_1 = ap_condition_447)) then 
                    state_bstate_currIdx_8_fu_110 <= add_ln6_fu_372_p2;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_8_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    state_bstate_n_bits_held_8_fu_126 <= state_bstate_n_bits_held_5;
                elsif ((ap_const_boolean_1 = ap_condition_456)) then 
                    state_bstate_n_bits_held_8_fu_126 <= empty_fu_118;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln162_reg_630 <= icmp_ln162_fu_305_p2;
                icmp_ln162_reg_630_pp0_iter1_reg <= icmp_ln162_reg_630;
                sao_offset_sign_addr_reg_639_pp0_iter1_reg <= sao_offset_sign_addr_reg_639;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_val_reg_253 <= ap_phi_reg_pp0_iter0_val_reg_253;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_val_reg_253 <= ap_phi_reg_pp0_iter1_val_reg_253;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln163_fu_338_p2 = ap_const_lv1_0) and (icmp_ln162_reg_630 = ap_const_lv1_0))) then
                icmp_ln13_reg_653 <= icmp_ln13_fu_347_p2;
                p_load15_reg_648 <= empty_fu_118;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln162_reg_630_pp0_iter2_reg <= icmp_ln162_reg_630_pp0_iter1_reg;
                icmp_ln163_reg_644_pp0_iter2_reg <= icmp_ln163_reg_644;
                sao_offset_sign_addr_reg_639_pp0_iter2_reg <= sao_offset_sign_addr_reg_639_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln162_reg_630 = ap_const_lv1_0))) then
                icmp_ln163_reg_644 <= icmp_ln163_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln162_fu_305_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sao_offset_sign_addr_reg_639 <= zext_ln163_1_fu_327_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_fu_398_p2 <= std_logic_vector(unsigned(zext_ln13_fu_391_p1) + unsigned(ap_const_lv9_1FF));
    add_ln162_fu_311_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    add_ln163_fu_321_p2 <= std_logic_vector(unsigned(zext_ln188) + unsigned(zext_ln163_fu_317_p1));
    add_ln16_fu_353_p2 <= std_logic_vector(unsigned(empty_fu_118) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_372_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_8_fu_110) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_171_assign_proc : process(icmp_ln162_reg_630_pp0_iter1_reg, icmp_ln163_reg_644, icmp_ln13_reg_653)
    begin
                ap_condition_171 <= ((icmp_ln13_reg_653 = ap_const_lv1_0) and (icmp_ln163_reg_644 = ap_const_lv1_0) and (icmp_ln162_reg_630_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_176_assign_proc : process(icmp_ln162_reg_630_pp0_iter1_reg, icmp_ln163_reg_644, icmp_ln13_reg_653)
    begin
                ap_condition_176 <= ((icmp_ln13_reg_653 = ap_const_lv1_1) and (icmp_ln163_reg_644 = ap_const_lv1_0) and (icmp_ln162_reg_630_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_431_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln162_reg_630_pp0_iter1_reg, icmp_ln163_reg_644, icmp_ln13_reg_653)
    begin
                ap_condition_431 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_653 = ap_const_lv1_1) and (icmp_ln163_reg_644 = ap_const_lv1_0) and (icmp_ln162_reg_630_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_442_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln162_reg_630, icmp_ln163_fu_338_p2, icmp_ln13_fu_347_p2)
    begin
                ap_condition_442 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln13_fu_347_p2 = ap_const_lv1_0) and (icmp_ln163_fu_338_p2 = ap_const_lv1_0) and (icmp_ln162_reg_630 = ap_const_lv1_0));
    end process;


    ap_condition_447_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln162_reg_630, icmp_ln163_fu_338_p2, icmp_ln13_fu_347_p2)
    begin
                ap_condition_447 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln13_fu_347_p2 = ap_const_lv1_1) and (icmp_ln163_fu_338_p2 = ap_const_lv1_0) and (icmp_ln162_reg_630 = ap_const_lv1_0));
    end process;


    ap_condition_452_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln162_reg_630_pp0_iter2_reg, icmp_ln163_reg_644_pp0_iter2_reg)
    begin
                ap_condition_452 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln163_reg_644_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_456_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln162_reg_630_pp0_iter1_reg, icmp_ln163_reg_644)
    begin
                ap_condition_456 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln163_reg_644 = ap_const_lv1_0) and (icmp_ln162_reg_630_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln162_fu_305_p2)
    begin
        if (((icmp_ln162_fu_305_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_val_reg_253 <= "XXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_3_fu_98, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_98;
        end if; 
    end process;

    bStream_address0 <= zext_ln5_fu_367_p1(3 - 1 downto 0);

    bStream_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bStream_ce0 <= ap_const_logic_1;
        else 
            bStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1076_fu_504_p2 <= "1" when (unsigned(ret_2_fu_496_p3) < unsigned(baeState_0_constprop_load)) else "0";
    icmp_ln13_fu_347_p2 <= "1" when (empty_fu_118 = ap_const_lv8_0) else "0";
    icmp_ln162_fu_305_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_4) else "0";
    icmp_ln163_fu_338_p2 <= "1" when (sao_offset_abs_q0 = ap_const_lv8_0) else "0";
    or_ln1543_fu_480_p2 <= (shl_ln1543_2_fu_472_p3 or ap_phi_reg_pp0_iter3_val_reg_253);
    p_out <= aligned_word_fu_102;
    p_out1 <= empty_fu_118;

    p_out1_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= ret_fu_114(31 - 1 downto 0);

    p_out2_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retVal_4_fu_434_p3 <= (ap_const_lv1_0 & zext_ln42_fu_430_p1);
    retVal_8_fu_414_p1 <= retVal_fu_408_p2(1 - 1 downto 0);
    retVal_fu_408_p2 <= std_logic_vector(shift_right(unsigned(zext_ln14_fu_394_p1),to_integer(unsigned('0' & sext_ln14_fu_404_p1(31-1 downto 0)))));
    ret_2_fu_496_p3 <= (tmp_s_fu_486_p4 & or_ln1543_fu_480_p2);
    ret_5_fu_514_p3 <= 
        ret_2_fu_496_p3 when (icmp_ln1076_fu_504_p2(0) = '1') else 
        sub_ln229_fu_509_p2;
    sao_offset_abs_address0 <= zext_ln163_1_fu_327_p1(4 - 1 downto 0);

    sao_offset_abs_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sao_offset_abs_ce0 <= ap_const_logic_1;
        else 
            sao_offset_abs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sao_offset_sign_address0 <= sao_offset_sign_addr_reg_639_pp0_iter2_reg;

    sao_offset_sign_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sao_offset_sign_ce0 <= ap_const_logic_1;
        else 
            sao_offset_sign_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sao_offset_sign_d0 <= (icmp_ln1076_fu_504_p2 xor ap_const_lv1_1);

    sao_offset_sign_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg, icmp_ln163_reg_644_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln163_reg_644_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_0))) then 
            sao_offset_sign_we0 <= ap_const_logic_1;
        else 
            sao_offset_sign_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln14_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_398_p2),32));

    shl_ln1543_2_fu_472_p3 <= (trunc_ln1543_fu_468_p1 & ap_const_lv1_0);
    state_bstate_currIdx_8_out <= state_bstate_currIdx_8_fu_110;

    state_bstate_currIdx_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_bstate_currIdx_8_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_currIdx_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_held_aligned_word_8_out <= aligned_word_4_fu_106;

    state_bstate_held_aligned_word_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_bstate_held_aligned_word_8_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_held_aligned_word_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_n_bits_held_8_out <= state_bstate_n_bits_held_8_fu_126;

    state_bstate_n_bits_held_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_bstate_n_bits_held_8_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_n_bits_held_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_ivlOffset_6_out <= ret_4_fu_122;

    state_ivlOffset_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln162_reg_630_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln162_reg_630_pp0_iter2_reg = ap_const_lv1_1))) then 
            state_ivlOffset_6_out_ap_vld <= ap_const_logic_1;
        else 
            state_ivlOffset_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln229_fu_509_p2 <= std_logic_vector(unsigned(ret_2_fu_496_p3) - unsigned(baeState_0_constprop_load));
    tmp_fu_422_p3 <= bStream_q0(7 downto 7);
    tmp_s_fu_486_p4 <= ret_fu_114(30 downto 8);
    trunc_ln1543_fu_468_p1 <= ret_fu_114(8 - 1 downto 0);
    zext_ln11_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_8_fu_414_p1),9));
    zext_ln13_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_load15_reg_648),9));
    zext_ln14_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(aligned_word_fu_102),32));
    zext_ln163_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_fu_321_p2),64));
    zext_ln163_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),4));
    zext_ln42_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_422_p3),8));
    zext_ln5_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_currIdx_8_fu_110),64));
end behav;
