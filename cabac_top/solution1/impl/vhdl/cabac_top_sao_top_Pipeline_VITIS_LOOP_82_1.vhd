-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_sao_top_Pipeline_VITIS_LOOP_82_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_ivlCurrRange_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_n_bits_held_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_8_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    state_ivlOffset_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    init_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce1 : OUT STD_LOGIC;
    bStream_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_ivlCurrRange_10_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    state_ivlCurrRange_10_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlCurrRange_10_out_o_ap_vld : OUT STD_LOGIC;
    state_bstate_currIdx_10_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_10_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_10_out_o_ap_vld : OUT STD_LOGIC;
    state_bstate_n_bits_held_10_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_10_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_10_out_o_ap_vld : OUT STD_LOGIC;
    state_bstate_held_aligned_word_10_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_10_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_10_out_o_ap_vld : OUT STD_LOGIC;
    state_ivlOffset_10_out_i : IN STD_LOGIC_VECTOR (31 downto 0);
    state_ivlOffset_10_out_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlOffset_10_out_o_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_sao_top_Pipeline_VITIS_LOOP_82_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln82_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal init_assign_8_reg_115 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln82_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_decode_decision_fu_127_ap_start : STD_LOGIC;
    signal grp_decode_decision_fu_127_ap_done : STD_LOGIC;
    signal grp_decode_decision_fu_127_ap_idle : STD_LOGIC;
    signal grp_decode_decision_fu_127_ap_ready : STD_LOGIC;
    signal grp_decode_decision_fu_127_p_read1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_decision_fu_127_bStream_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_decision_fu_127_bStream_ce0 : STD_LOGIC;
    signal grp_decode_decision_fu_127_bStream_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_decision_fu_127_bStream_ce1 : STD_LOGIC;
    signal grp_decode_decision_fu_127_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_127_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_127_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_decision_fu_127_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_decision_fu_127_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_decision_fu_127_ap_return_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal grp_decode_decision_fu_127_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal symbolVal_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal symbolVal_1_fu_260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal binIdx_fu_68 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln86_fu_189_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_binIdx_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln84_fu_256_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_346 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_decode_decision IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        init : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (30 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bStream_ce0 : OUT STD_LOGIC;
        bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bStream_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bStream_ce1 : OUT STD_LOGIC;
        bStream_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_decode_decision_fu_127 : component cabac_top_decode_decision
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_decision_fu_127_ap_start,
        ap_done => grp_decode_decision_fu_127_ap_done,
        ap_idle => grp_decode_decision_fu_127_ap_idle,
        ap_ready => grp_decode_decision_fu_127_ap_ready,
        ap_ce => ap_const_logic_1,
        init => init_assign_8_reg_115,
        p_read => state_ivlCurrRange_10_out_i,
        p_read1 => grp_decode_decision_fu_127_p_read1,
        p_read2 => state_bstate_currIdx_10_out_i,
        p_read3 => state_bstate_n_bits_held_10_out_i,
        p_read4 => state_bstate_held_aligned_word_10_out_i,
        bStream_address0 => grp_decode_decision_fu_127_bStream_address0,
        bStream_ce0 => grp_decode_decision_fu_127_bStream_ce0,
        bStream_q0 => bStream_q0,
        bStream_address1 => grp_decode_decision_fu_127_bStream_address1,
        bStream_ce1 => grp_decode_decision_fu_127_bStream_ce1,
        bStream_q1 => bStream_q1,
        ap_return_0 => grp_decode_decision_fu_127_ap_return_0,
        ap_return_1 => grp_decode_decision_fu_127_ap_return_1,
        ap_return_2 => grp_decode_decision_fu_127_ap_return_2,
        ap_return_3 => grp_decode_decision_fu_127_ap_return_3,
        ap_return_4 => grp_decode_decision_fu_127_ap_return_4,
        ap_return_5 => grp_decode_decision_fu_127_ap_return_5);

    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_decode_decision_fu_127_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_decision_fu_127_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln82_fu_183_p2 = ap_const_lv1_0))) then 
                    grp_decode_decision_fu_127_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_decision_fu_127_ap_ready = ap_const_logic_1)) then 
                    grp_decode_decision_fu_127_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    binIdx_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln82_fu_183_p2 = ap_const_lv1_0))) then 
                    binIdx_fu_68 <= add_ln86_fu_189_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    binIdx_fu_68 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    init_assign_8_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    init_assign_8_reg_115 <= init_1;
                elsif ((ap_const_boolean_1 = ap_condition_346)) then 
                    init_assign_8_reg_115 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    symbolVal_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    symbolVal_fu_64 <= ap_const_lv32_0;
                elsif (((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    symbolVal_fu_64 <= symbolVal_1_fu_260_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln82_reg_327 <= icmp_ln82_fu_183_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln86_fu_189_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_binIdx_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_346_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, ap_block_pp0_stage0_11001)
    begin
                ap_condition_346 <= ((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln82_reg_327)
    begin
        if (((icmp_ln82_reg_327 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_binIdx_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, binIdx_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_binIdx_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_binIdx_1 <= binIdx_fu_68;
        end if; 
    end process;

    bStream_address0 <= grp_decode_decision_fu_127_bStream_address0;
    bStream_address1 <= grp_decode_decision_fu_127_bStream_address1;
    bStream_ce0 <= grp_decode_decision_fu_127_bStream_ce0;
    bStream_ce1 <= grp_decode_decision_fu_127_bStream_ce1;
    grp_decode_decision_fu_127_ap_start <= grp_decode_decision_fu_127_ap_start_reg;
    grp_decode_decision_fu_127_p_read1 <= state_ivlOffset_10_out_i(31 - 1 downto 0);
    icmp_ln82_fu_183_p2 <= "1" when (ap_sig_allocacmp_binIdx_1 = ap_const_lv3_5) else "0";
    p_out <= symbolVal_fu_64;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln82_reg_327, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln82_reg_327 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_bstate_currIdx_10_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, state_bstate_currIdx_8_reload, state_bstate_currIdx_10_out_i, grp_decode_decision_fu_127_ap_return_2, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                state_bstate_currIdx_10_out_o <= state_bstate_currIdx_8_reload;
            elsif (((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                state_bstate_currIdx_10_out_o <= grp_decode_decision_fu_127_ap_return_2;
            else 
                state_bstate_currIdx_10_out_o <= state_bstate_currIdx_10_out_i;
            end if;
        else 
            state_bstate_currIdx_10_out_o <= state_bstate_currIdx_10_out_i;
        end if; 
    end process;


    state_bstate_currIdx_10_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            state_bstate_currIdx_10_out_o_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_currIdx_10_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_bstate_held_aligned_word_10_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, state_bstate_held_aligned_word_8_reload, state_bstate_held_aligned_word_10_out_i, grp_decode_decision_fu_127_ap_return_4, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                state_bstate_held_aligned_word_10_out_o <= state_bstate_held_aligned_word_8_reload;
            elsif (((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                state_bstate_held_aligned_word_10_out_o <= grp_decode_decision_fu_127_ap_return_4;
            else 
                state_bstate_held_aligned_word_10_out_o <= state_bstate_held_aligned_word_10_out_i;
            end if;
        else 
            state_bstate_held_aligned_word_10_out_o <= state_bstate_held_aligned_word_10_out_i;
        end if; 
    end process;


    state_bstate_held_aligned_word_10_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            state_bstate_held_aligned_word_10_out_o_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_held_aligned_word_10_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_bstate_n_bits_held_10_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, state_bstate_n_bits_held_8_reload, state_bstate_n_bits_held_10_out_i, grp_decode_decision_fu_127_ap_return_3, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                state_bstate_n_bits_held_10_out_o <= state_bstate_n_bits_held_8_reload;
            elsif (((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                state_bstate_n_bits_held_10_out_o <= grp_decode_decision_fu_127_ap_return_3;
            else 
                state_bstate_n_bits_held_10_out_o <= state_bstate_n_bits_held_10_out_i;
            end if;
        else 
            state_bstate_n_bits_held_10_out_o <= state_bstate_n_bits_held_10_out_i;
        end if; 
    end process;


    state_bstate_n_bits_held_10_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            state_bstate_n_bits_held_10_out_o_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_n_bits_held_10_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_ivlCurrRange_10_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, state_ivlCurrRange_8_reload, state_ivlCurrRange_10_out_i, grp_decode_decision_fu_127_ap_return_0, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                state_ivlCurrRange_10_out_o <= state_ivlCurrRange_8_reload;
            elsif (((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                state_ivlCurrRange_10_out_o <= grp_decode_decision_fu_127_ap_return_0;
            else 
                state_ivlCurrRange_10_out_o <= state_ivlCurrRange_10_out_i;
            end if;
        else 
            state_ivlCurrRange_10_out_o <= state_ivlCurrRange_10_out_i;
        end if; 
    end process;


    state_ivlCurrRange_10_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            state_ivlCurrRange_10_out_o_ap_vld <= ap_const_logic_1;
        else 
            state_ivlCurrRange_10_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_ivlOffset_10_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, state_ivlOffset_8_reload, state_ivlOffset_10_out_i, grp_decode_decision_fu_127_ap_return_1, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                state_ivlOffset_10_out_o <= state_ivlOffset_8_reload;
            elsif (((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                state_ivlOffset_10_out_o <= grp_decode_decision_fu_127_ap_return_1;
            else 
                state_ivlOffset_10_out_o <= state_ivlOffset_10_out_i;
            end if;
        else 
            state_ivlOffset_10_out_o <= state_ivlOffset_10_out_i;
        end if; 
    end process;


    state_ivlOffset_10_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln82_reg_327, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((icmp_ln82_reg_327 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            state_ivlOffset_10_out_o_ap_vld <= ap_const_logic_1;
        else 
            state_ivlOffset_10_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    symbolVal_1_fu_260_p3 <= (trunc_ln84_fu_256_p1 & grp_decode_decision_fu_127_ap_return_5);
    trunc_ln84_fu_256_p1 <= symbolVal_fu_64(31 - 1 downto 0);
end behav;
