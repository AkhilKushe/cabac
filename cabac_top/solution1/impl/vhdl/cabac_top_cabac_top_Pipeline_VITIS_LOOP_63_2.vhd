-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_cabac_top_Pipeline_VITIS_LOOP_63_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bitOut_TREADY : IN STD_LOGIC;
    tempBst_0_01_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    tempBst_1_02_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    tempBst_2_03_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    tempBst_3_04_reload : IN STD_LOGIC_VECTOR (7 downto 0);
    bitOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    bitOut_TVALID : OUT STD_LOGIC );
end;


architecture behav of cabac_top_cabac_top_Pipeline_VITIS_LOOP_63_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln63_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bitOut_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bState_n_bits_held_load_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_n_bits_held_load_reg_403_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_409_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln22_fu_165_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln22_reg_416 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_n_held_bits_fu_175_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal next_n_held_bits_reg_421 : STD_LOGIC_VECTOR (2 downto 0);
    signal bState_held_aligned_word_load_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_5_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_5_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_fu_144_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bState_currIdx_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal bState_currIdx_2_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bState_n_bits_held_fu_76 : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_n_bits_held_1_fu_185_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_bState_n_bits_held_load : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_held_aligned_word_fu_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal bState_held_aligned_word_2_fu_290_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln24_fu_171_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln14_1_fu_159_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln40_1_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln13_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln23_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_218_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln23_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal retVal_2_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln11_1_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_7_fu_251_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal retVal_7_fu_251_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal aligned_word_fu_267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln40_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln42_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_3_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bState_currIdx_1_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_1_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_320_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_1_fu_336_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln11_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_8_1_1_U13 : component cabac_top_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tempBst_0_01_reload,
        din1 => tempBst_1_02_reload,
        din2 => tempBst_2_03_reload,
        din3 => tempBst_3_04_reload,
        din4 => retVal_7_fu_251_p5,
        dout => retVal_7_fu_251_p6);

    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    bState_currIdx_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bState_currIdx_fu_72 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    bState_currIdx_fu_72 <= bState_currIdx_2_fu_297_p3;
                end if;
            end if; 
        end if;
    end process;

    bState_held_aligned_word_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    bState_held_aligned_word_fu_80 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    bState_held_aligned_word_fu_80 <= bState_held_aligned_word_2_fu_290_p3;
                end if;
            end if; 
        end if;
    end process;

    bState_n_bits_held_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln63_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    bState_n_bits_held_fu_76 <= bState_n_bits_held_1_fu_185_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    bState_n_bits_held_fu_76 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln63_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= i_3_fu_144_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                bState_held_aligned_word_load_reg_426 <= bState_held_aligned_word_fu_80;
                bState_n_bits_held_load_reg_403_pp0_iter1_reg <= bState_n_bits_held_load_reg_403;
                icmp_ln13_reg_409_pp0_iter1_reg <= icmp_ln13_reg_409;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_138_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bState_n_bits_held_load_reg_403 <= ap_sig_allocacmp_bState_n_bits_held_load;
                icmp_ln13_reg_409 <= icmp_ln13_fu_153_p2;
                next_n_held_bits_reg_421 <= next_n_held_bits_fu_175_p2;
                sub_ln22_reg_416 <= sub_ln22_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_409 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                retVal_5_reg_431 <= retVal_5_fu_284_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_1_fu_159_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_bState_n_bits_held_load) + unsigned(ap_const_lv8_FD));
    add_ln14_fu_320_p2 <= std_logic_vector(unsigned(zext_ln13_1_fu_314_p1) + unsigned(ap_const_lv9_1FD));
    aligned_word_fu_267_p3 <= (ap_const_lv24_0 & retVal_7_fu_251_p6);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, bitOut_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((bitOut_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, bitOut_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((bitOut_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, bitOut_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((bitOut_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(bitOut_TREADY)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (bitOut_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln63_fu_138_p2)
    begin
        if (((icmp_ln63_fu_138_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bState_n_bits_held_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, bState_n_bits_held_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_bState_n_bits_held_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_bState_n_bits_held_load <= bState_n_bits_held_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_68;
        end if; 
    end process;

    bState_currIdx_1_fu_261_p2 <= std_logic_vector(unsigned(bState_currIdx_fu_72) + unsigned(ap_const_lv32_1));
    bState_currIdx_2_fu_297_p3 <= 
        bState_currIdx_fu_72 when (icmp_ln13_reg_409(0) = '1') else 
        bState_currIdx_1_fu_261_p2;
    bState_held_aligned_word_2_fu_290_p3 <= 
        bState_held_aligned_word_fu_80 when (icmp_ln13_reg_409(0) = '1') else 
        retVal_7_fu_251_p6;
    bState_n_bits_held_1_fu_185_p3 <= 
        add_ln14_1_fu_159_p2 when (icmp_ln13_fu_153_p2(0) = '1') else 
        zext_ln40_1_fu_181_p1;
    bitOut_TDATA <= 
        zext_ln11_fu_340_p1 when (icmp_ln13_reg_409_pp0_iter1_reg(0) = '1') else 
        retVal_5_reg_431;

    bitOut_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, bitOut_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bitOut_TDATA_blk_n <= bitOut_TREADY;
        else 
            bitOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bitOut_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bitOut_TVALID <= ap_const_logic_1;
        else 
            bitOut_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_144_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_1));
    icmp_ln13_fu_153_p2 <= "1" when (unsigned(ap_sig_allocacmp_bState_n_bits_held_load) > unsigned(ap_const_lv8_2)) else "0";
    icmp_ln63_fu_138_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv4_A) else "0";
    lshr_ln42_fu_278_p2 <= std_logic_vector(shift_right(unsigned(aligned_word_fu_267_p3),to_integer(unsigned('0' & zext_ln40_fu_275_p1(31-1 downto 0)))));
    next_n_held_bits_fu_175_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(trunc_ln24_fu_171_p1));
    retVal_1_fu_336_p1 <= retVal_fu_330_p2(3 - 1 downto 0);
    retVal_2_fu_228_p2 <= (xor_ln23_fu_222_p2 and bState_held_aligned_word_fu_80);
    retVal_3_fu_241_p2 <= std_logic_vector(shift_left(unsigned(zext_ln11_1_fu_234_p1),to_integer(unsigned('0' & zext_ln24_fu_238_p1(31-1 downto 0)))));
    retVal_5_fu_284_p2 <= (retVal_3_fu_241_p2 or lshr_ln42_fu_278_p2);
    retVal_7_fu_251_p5 <= bState_currIdx_fu_72(2 - 1 downto 0);
    retVal_fu_330_p2 <= std_logic_vector(shift_right(unsigned(zext_ln23_fu_317_p1),to_integer(unsigned('0' & sext_ln14_fu_326_p1(31-1 downto 0)))));
        sext_ln14_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_320_p2),32));

    shl_ln23_fu_212_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FF),to_integer(unsigned('0' & zext_ln13_fu_209_p1(31-1 downto 0)))));
    sub_ln22_fu_165_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) - unsigned(ap_sig_allocacmp_bState_n_bits_held_load));
    trunc_ln23_fu_218_p1 <= shl_ln23_fu_212_p2(8 - 1 downto 0);
    trunc_ln24_fu_171_p1 <= sub_ln22_fu_165_p2(3 - 1 downto 0);
    xor_ln23_fu_222_p2 <= (trunc_ln23_fu_218_p1 xor ap_const_lv8_FF);
    zext_ln11_1_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_2_fu_228_p2),32));
    zext_ln11_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_1_fu_336_p1),32));
    zext_ln13_1_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bState_n_bits_held_load_reg_403_pp0_iter1_reg),9));
    zext_ln13_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bState_n_bits_held_load_reg_403),32));
    zext_ln23_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bState_held_aligned_word_load_reg_426),32));
    zext_ln24_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln22_reg_416),32));
    zext_ln40_1_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_n_held_bits_fu_175_p2),8));
    zext_ln40_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(next_n_held_bits_reg_421),32));
end behav;
