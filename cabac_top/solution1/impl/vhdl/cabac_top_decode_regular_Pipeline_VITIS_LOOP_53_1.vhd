-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln1076_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    select_ln1076 : IN STD_LOGIC_VECTOR (31 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_n_bits_held_0_out_ap_vld : OUT STD_LOGIC;
    state_bstate_held_aligned_word_0_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_bstate_held_aligned_word_0_out_ap_vld : OUT STD_LOGIC;
    state_bstate_currIdx_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_bstate_currIdx_0_out_ap_vld : OUT STD_LOGIC;
    phi_ln65_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    phi_ln65_out_ap_vld : OUT STD_LOGIC;
    state_ivlCurrRange_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_ivlCurrRange_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1072_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal state_ivlCurrRange_1_load_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1072_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_bstate_n_bits_held_0_load_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal retVal_fu_330_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter0_val_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter1_val_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter2_val_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter3_val_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln5_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal state_ivlCurrRange_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1026_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ret_1_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_n_bits_held_0_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln16_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_currIdx_0_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal aligned_word_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_213_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln13_fu_287_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln14_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_2_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_3_fu_310_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_765_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1543_fu_346_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1_fu_350_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_364_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln1543_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_321 : BOOLEAN;
    signal ap_condition_325 : BOOLEAN;
    signal ap_condition_328 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cabac_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    aligned_word_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    aligned_word_fu_94 <= p_read6;
                elsif ((ap_const_boolean_1 = ap_condition_321)) then 
                    aligned_word_fu_94 <= bStream_q0;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_val_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln1072_reg_448 = ap_const_lv1_1) and (icmp_ln13_reg_457 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_val_reg_176 <= zext_ln11_fu_314_p1;
                elsif (((icmp_ln1072_reg_448 = ap_const_lv1_1) and (icmp_ln13_reg_457 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter3_val_reg_176 <= retVal_fu_330_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_val_reg_176 <= ap_phi_reg_pp0_iter2_val_reg_176;
                end if;
            end if; 
        end if;
    end process;

    ret_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    ret_1_fu_82 <= select_ln1076_2;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    ret_1_fu_82 <= ret_fu_374_p3;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_0_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_currIdx_0_fu_90 <= p_read4;
                elsif ((ap_const_boolean_1 = ap_condition_325)) then 
                    state_bstate_currIdx_0_fu_90 <= add_ln6_fu_263_p2;
                end if;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_0_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_bstate_n_bits_held_0_fu_86 <= p_read5;
                elsif ((ap_const_boolean_1 = ap_condition_325)) then 
                    state_bstate_n_bits_held_0_fu_86 <= ap_const_lv8_7;
                elsif ((ap_const_boolean_1 = ap_condition_328)) then 
                    state_bstate_n_bits_held_0_fu_86 <= add_ln16_fu_244_p2;
                end if;
            end if; 
        end if;
    end process;

    state_ivlCurrRange_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    state_ivlCurrRange_1_fu_78 <= select_ln1076;
                elsif (((icmp_ln1072_fu_223_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    state_ivlCurrRange_1_fu_78 <= shl_ln1026_fu_232_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln1072_reg_448 <= icmp_ln1072_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_val_reg_176 <= ap_phi_reg_pp0_iter0_val_reg_176;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_val_reg_176 <= ap_phi_reg_pp0_iter1_val_reg_176;
                state_ivlCurrRange_1_load_reg_443 <= state_ivlCurrRange_1_fu_78;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1072_fu_223_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln13_reg_457 <= icmp_ln13_fu_238_p2;
                state_bstate_n_bits_held_0_load_reg_452 <= state_bstate_n_bits_held_0_fu_86;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln14_fu_294_p2 <= std_logic_vector(unsigned(zext_ln13_fu_287_p1) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_244_p2 <= std_logic_vector(unsigned(state_bstate_n_bits_held_0_fu_86) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_263_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_0_fu_90) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_321_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1072_reg_448, icmp_ln13_reg_457)
    begin
                ap_condition_321 <= ((icmp_ln1072_reg_448 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_457 = ap_const_lv1_1));
    end process;


    ap_condition_325_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1072_fu_223_p2, icmp_ln13_fu_238_p2)
    begin
                ap_condition_325 <= ((icmp_ln1072_fu_223_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln13_fu_238_p2 = ap_const_lv1_1));
    end process;


    ap_condition_328_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln1072_fu_223_p2, icmp_ln13_fu_238_p2)
    begin
                ap_condition_328 <= ((icmp_ln1072_fu_223_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln13_fu_238_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1072_fu_223_p2)
    begin
        if (((icmp_ln1072_fu_223_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_val_reg_176 <= "XXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bStream_address0 <= zext_ln5_fu_258_p1(3 - 1 downto 0);

    bStream_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bStream_ce0 <= ap_const_logic_1;
        else 
            bStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1072_fu_223_p2 <= "1" when (tmp_fu_213_p4 = ap_const_lv24_0) else "0";
    icmp_ln13_fu_238_p2 <= "1" when (state_bstate_n_bits_held_0_fu_86 = ap_const_lv8_0) else "0";
    or_ln1543_fu_358_p2 <= (shl_ln1_fu_350_p3 or ap_phi_reg_pp0_iter3_val_reg_176);
    phi_ln65_out <= ret_1_fu_82;

    phi_ln65_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1072_reg_448)
    begin
        if (((icmp_ln1072_reg_448 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phi_ln65_out_ap_vld <= ap_const_logic_1;
        else 
            phi_ln65_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    retVal_2_fu_304_p2 <= std_logic_vector(shift_right(unsigned(zext_ln23_fu_290_p1),to_integer(unsigned('0' & sext_ln14_fu_300_p1(31-1 downto 0)))));
    retVal_3_fu_310_p1 <= retVal_2_fu_304_p2(1 - 1 downto 0);
    retVal_fu_330_p3 <= (ap_const_lv1_0 & zext_ln42_fu_326_p1);
    ret_fu_374_p3 <= (tmp_s_fu_364_p4 & or_ln1543_fu_358_p2);
        sext_ln14_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_294_p2),32));

    shl_ln1026_fu_232_p2 <= std_logic_vector(shift_left(unsigned(state_ivlCurrRange_1_fu_78),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln1_fu_350_p3 <= (trunc_ln1543_fu_346_p1 & ap_const_lv1_0);
    state_bstate_currIdx_0_out <= state_bstate_currIdx_0_fu_90;

    state_bstate_currIdx_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1072_reg_448)
    begin
        if (((icmp_ln1072_reg_448 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            state_bstate_currIdx_0_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_currIdx_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_held_aligned_word_0_out <= aligned_word_fu_94;

    state_bstate_held_aligned_word_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1072_reg_448)
    begin
        if (((icmp_ln1072_reg_448 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            state_bstate_held_aligned_word_0_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_held_aligned_word_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_bstate_n_bits_held_0_out <= state_bstate_n_bits_held_0_fu_86;

    state_bstate_n_bits_held_0_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1072_reg_448)
    begin
        if (((icmp_ln1072_reg_448 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            state_bstate_n_bits_held_0_out_ap_vld <= ap_const_logic_1;
        else 
            state_bstate_n_bits_held_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_ivlCurrRange_1_out <= state_ivlCurrRange_1_load_reg_443;

    state_ivlCurrRange_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1072_reg_448)
    begin
        if (((icmp_ln1072_reg_448 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            state_ivlCurrRange_1_out_ap_vld <= ap_const_logic_1;
        else 
            state_ivlCurrRange_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_765_fu_318_p3 <= bStream_q0(7 downto 7);
    tmp_fu_213_p4 <= state_ivlCurrRange_1_fu_78(31 downto 8);
    tmp_s_fu_364_p4 <= ret_1_fu_82(30 downto 8);
    trunc_ln1543_fu_346_p1 <= ret_1_fu_82(8 - 1 downto 0);
    zext_ln11_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_3_fu_310_p1),9));
    zext_ln13_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_n_bits_held_0_load_reg_452),9));
    zext_ln23_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(aligned_word_fu_94),32));
    zext_ln42_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_765_fu_318_p3),8));
    zext_ln5_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_bstate_currIdx_0_fu_90),64));
end behav;
