-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cabac_top_decode_decision_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    init_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    mode_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce0 : OUT STD_LOGIC;
    bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bStream_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bStream_ce1 : OUT STD_LOGIC;
    bStream_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctxTables_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ctxTables_ce0 : OUT STD_LOGIC;
    ctxTables_we0 : OUT STD_LOGIC;
    ctxTables_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctxTables_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cabac_top_decode_decision_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mode_offset_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal init_offset_read_read_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_346_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_reg_584 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln14_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_1_fu_513_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln16_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln6_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_7_fu_533_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_decode_regular_fu_301_ap_start : STD_LOGIC;
    signal grp_decode_regular_fu_301_ap_done : STD_LOGIC;
    signal grp_decode_regular_fu_301_ap_idle : STD_LOGIC;
    signal grp_decode_regular_fu_301_ap_ready : STD_LOGIC;
    signal grp_decode_regular_fu_301_bStream_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_regular_fu_301_bStream_ce0 : STD_LOGIC;
    signal grp_decode_regular_fu_301_ctxTables_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_decode_regular_fu_301_ctxTables_ce0 : STD_LOGIC;
    signal grp_decode_regular_fu_301_ctxTables_we0 : STD_LOGIC;
    signal grp_decode_regular_fu_301_ctxTables_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_regular_fu_301_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_regular_fu_301_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_regular_fu_301_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_regular_fu_301_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_regular_fu_301_ap_return_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decode_regular_fu_301_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlCurrRange_0_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_currIdx_0_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_n_bits_held_0_reg_171 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_held_aligned_word_0_reg_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln11_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ivlOffset_0_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_currIdx_1_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_bstate_n_bits_held_1_reg_213 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_bstate_held_aligned_word_1_reg_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_reg_234 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln76_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_binVal_1_phi_fu_286_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_2_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_regular_fu_301_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln5_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal retVal_5_fu_333_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1543_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_413_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln1543_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1076_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln14_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_9_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal retVal_10_fu_509_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cabac_top_decode_regular IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        bStream_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bStream_ce0 : OUT STD_LOGIC;
        bStream_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctxTables_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ctxTables_ce0 : OUT STD_LOGIC;
        ctxTables_we0 : OUT STD_LOGIC;
        ctxTables_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctxTables_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_decode_regular_fu_301 : component cabac_top_decode_regular
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_regular_fu_301_ap_start,
        ap_done => grp_decode_regular_fu_301_ap_done,
        ap_idle => grp_decode_regular_fu_301_ap_idle,
        ap_ready => grp_decode_regular_fu_301_ap_ready,
        p_read => state_ivlCurrRange_0_reg_149,
        p_read1 => state_ivlOffset_0_reg_193,
        p_read4 => state_bstate_currIdx_0_reg_160,
        p_read5 => state_bstate_n_bits_held_0_reg_171,
        p_read6 => state_bstate_held_aligned_word_0_reg_182,
        bStream_address0 => grp_decode_regular_fu_301_bStream_address0,
        bStream_ce0 => grp_decode_regular_fu_301_bStream_ce0,
        bStream_q0 => bStream_q0,
        ctxTables_address0 => grp_decode_regular_fu_301_ctxTables_address0,
        ctxTables_ce0 => grp_decode_regular_fu_301_ctxTables_ce0,
        ctxTables_we0 => grp_decode_regular_fu_301_ctxTables_we0,
        ctxTables_d0 => grp_decode_regular_fu_301_ctxTables_d0,
        ctxTables_q0 => ctxTables_q0,
        ap_return_0 => grp_decode_regular_fu_301_ap_return_0,
        ap_return_1 => grp_decode_regular_fu_301_ap_return_1,
        ap_return_2 => grp_decode_regular_fu_301_ap_return_2,
        ap_return_3 => grp_decode_regular_fu_301_ap_return_3,
        ap_return_4 => grp_decode_regular_fu_301_ap_return_4,
        ap_return_5 => grp_decode_regular_fu_301_ap_return_5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_return_0_preg <= ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_return_1_preg <= ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_return_2_preg <= ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_return_3_preg <= ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_return_4_preg <= ap_phi_mux_binVal_1_phi_fu_286_p4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_return_5_preg <= ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_decode_regular_fu_301_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_regular_fu_301_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_decode_regular_fu_301_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_regular_fu_301_ap_ready = ap_const_logic_1)) then 
                    grp_decode_regular_fu_301_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    state_bstate_currIdx_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                state_bstate_currIdx_0_reg_160 <= p_read2;
            elsif (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_bstate_currIdx_0_reg_160 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    state_bstate_currIdx_1_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                state_bstate_currIdx_1_reg_203 <= state_bstate_currIdx_0_reg_160;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                state_bstate_currIdx_1_reg_203 <= add_ln6_fu_523_p2;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_0_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                state_bstate_held_aligned_word_0_reg_182 <= p_read4;
            elsif (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_bstate_held_aligned_word_0_reg_182 <= bStream_q0;
            end if; 
        end if;
    end process;

    state_bstate_held_aligned_word_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                state_bstate_held_aligned_word_1_reg_224 <= state_bstate_held_aligned_word_0_reg_182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                state_bstate_held_aligned_word_1_reg_224 <= bStream_q0;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                state_bstate_n_bits_held_0_reg_171 <= p_read3;
            elsif (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_bstate_n_bits_held_0_reg_171 <= ap_const_lv8_7;
            end if; 
        end if;
    end process;

    state_bstate_n_bits_held_1_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                state_bstate_n_bits_held_1_reg_213 <= add_ln16_fu_517_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                state_bstate_n_bits_held_1_reg_213 <= ap_const_lv8_7;
            end if; 
        end if;
    end process;

    state_ivlCurrRange_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                state_ivlCurrRange_0_reg_149 <= p_read;
            elsif (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_ivlCurrRange_0_reg_149 <= ap_const_lv32_1FE;
            end if; 
        end if;
    end process;

    state_ivlOffset_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                state_ivlOffset_0_reg_193 <= p_read1;
            elsif (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                state_ivlOffset_0_reg_193 <= zext_ln11_fu_341_p1;
            end if; 
        end if;
    end process;

    val_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                                val_reg_234(0) <= zext_ln11_1_fu_513_p1(0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                                val_reg_234(0) <= retVal_7_fu_533_p3(0);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_reg_584(7 downto 0) <= zext_ln13_fu_346_p1(7 downto 0);
                    zext_ln14_reg_592(7 downto 0) <= zext_ln14_fu_356_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_584(8) <= '0';
    zext_ln14_reg_592(31 downto 8) <= "000000000000000000000000";
    val_reg_234(8 downto 1) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mode_offset_read_read_fu_102_p2, ap_CS_fsm_state2, icmp_ln13_fu_350_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_350_p2 = ap_const_lv1_1) and (mode_offset_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln13_fu_350_p2 = ap_const_lv1_0) and (mode_offset_read_read_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln14_fu_495_p2 <= std_logic_vector(unsigned(zext_ln13_reg_584) + unsigned(ap_const_lv9_1FF));
    add_ln16_fu_517_p2 <= std_logic_vector(unsigned(state_bstate_n_bits_held_0_reg_171) + unsigned(ap_const_lv8_FF));
    add_ln6_fu_523_p2 <= std_logic_vector(unsigned(state_bstate_currIdx_0_reg_160) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_block_state4_on_subcall_done_assign_proc : process(mode_offset, grp_decode_regular_fu_301_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((mode_offset = ap_const_lv1_0) and (grp_decode_regular_fu_301_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_binVal_1_phi_fu_286_p4_assign_proc : process(mode_offset, mode_offset_read_read_fu_102_p2, grp_decode_regular_fu_301_ap_return_4, ap_CS_fsm_state4, xor_ln76_fu_443_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((mode_offset = ap_const_lv1_0)) then 
                ap_phi_mux_binVal_1_phi_fu_286_p4 <= grp_decode_regular_fu_301_ap_return_4;
            elsif ((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_binVal_1_phi_fu_286_p4 <= xor_ln76_fu_443_p2;
            else 
                ap_phi_mux_binVal_1_phi_fu_286_p4 <= "X";
            end if;
        else 
            ap_phi_mux_binVal_1_phi_fu_286_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4_assign_proc : process(init_offset_read_read_fu_108_p2, ap_CS_fsm_state2, state_bstate_currIdx_0_reg_160)
    begin
        if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4 <= ap_const_lv32_2;
        else 
            ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4 <= state_bstate_currIdx_0_reg_160;
        end if; 
    end process;


    ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4_assign_proc : process(mode_offset, mode_offset_read_read_fu_102_p2, grp_decode_regular_fu_301_ap_return_1, state_bstate_currIdx_1_reg_203, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((mode_offset = ap_const_lv1_0)) then 
                ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 <= grp_decode_regular_fu_301_ap_return_1;
            elsif ((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 <= state_bstate_currIdx_1_reg_203;
            else 
                ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4_assign_proc : process(bStream_q0, init_offset_read_read_fu_108_p2, ap_CS_fsm_state2, state_bstate_held_aligned_word_0_reg_182)
    begin
        if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4 <= bStream_q0;
        else 
            ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4 <= state_bstate_held_aligned_word_0_reg_182;
        end if; 
    end process;


    ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4_assign_proc : process(mode_offset, mode_offset_read_read_fu_102_p2, grp_decode_regular_fu_301_ap_return_3, state_bstate_held_aligned_word_1_reg_224, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((mode_offset = ap_const_lv1_0)) then 
                ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 <= grp_decode_regular_fu_301_ap_return_3;
            elsif ((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 <= state_bstate_held_aligned_word_1_reg_224;
            else 
                ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4_assign_proc : process(init_offset_read_read_fu_108_p2, ap_CS_fsm_state2, state_bstate_n_bits_held_0_reg_171)
    begin
        if (((init_offset_read_read_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 <= ap_const_lv8_7;
        else 
            ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 <= state_bstate_n_bits_held_0_reg_171;
        end if; 
    end process;


    ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4_assign_proc : process(mode_offset, mode_offset_read_read_fu_102_p2, grp_decode_regular_fu_301_ap_return_2, state_bstate_n_bits_held_1_reg_213, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((mode_offset = ap_const_lv1_0)) then 
                ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 <= grp_decode_regular_fu_301_ap_return_2;
            elsif ((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 <= state_bstate_n_bits_held_1_reg_213;
            else 
                ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4_assign_proc : process(mode_offset, mode_offset_read_read_fu_102_p2, grp_decode_regular_fu_301_ap_return_0, state_ivlCurrRange_0_reg_149, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((mode_offset = ap_const_lv1_0)) then 
                ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 <= grp_decode_regular_fu_301_ap_return_0;
            elsif ((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 <= state_ivlCurrRange_0_reg_149;
            else 
                ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4_assign_proc : process(mode_offset, mode_offset_read_read_fu_102_p2, grp_decode_regular_fu_301_ap_return_5, ap_CS_fsm_state4, ret_2_fu_450_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((mode_offset = ap_const_lv1_0)) then 
                ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 <= grp_decode_regular_fu_301_ap_return_5;
            elsif ((mode_offset_read_read_fu_102_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 <= ret_2_fu_450_p3;
            else 
                ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_return_0 <= ap_phi_mux_state_ivlCurrRange_1_phi_fu_246_p4;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_return_1 <= ap_phi_mux_state_bstate_currIdx_2_phi_fu_256_p4;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_return_2 <= ap_phi_mux_state_bstate_n_bits_held_2_phi_fu_266_p4;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4, ap_return_3_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_return_3 <= ap_phi_mux_state_bstate_held_aligned_word_2_phi_fu_276_p4;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_phi_mux_binVal_1_phi_fu_286_p4, ap_return_4_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_return_4 <= ap_phi_mux_binVal_1_phi_fu_286_p4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4, ap_return_5_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_return_5 <= ap_phi_mux_state_ivlOffset_2_phi_fu_295_p4;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    bStream_address0_assign_proc : process(ap_CS_fsm_state1, mode_offset, ap_CS_fsm_state2, grp_decode_regular_fu_301_bStream_address0, ap_CS_fsm_state4, zext_ln5_fu_360_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bStream_address0 <= zext_ln5_fu_360_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bStream_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((mode_offset = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bStream_address0 <= grp_decode_regular_fu_301_bStream_address0;
        else 
            bStream_address0 <= "XXX";
        end if; 
    end process;

    bStream_address1 <= ap_const_lv64_0(3 - 1 downto 0);

    bStream_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, mode_offset, ap_CS_fsm_state2, grp_decode_regular_fu_301_bStream_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            bStream_ce0 <= ap_const_logic_1;
        elsif (((mode_offset = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bStream_ce0 <= grp_decode_regular_fu_301_bStream_ce0;
        else 
            bStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bStream_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bStream_ce1 <= ap_const_logic_1;
        else 
            bStream_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctxTables_address0 <= grp_decode_regular_fu_301_ctxTables_address0;
    ctxTables_ce0 <= grp_decode_regular_fu_301_ctxTables_ce0;
    ctxTables_d0 <= grp_decode_regular_fu_301_ctxTables_d0;
    ctxTables_we0 <= grp_decode_regular_fu_301_ctxTables_we0;
    grp_decode_regular_fu_301_ap_start <= grp_decode_regular_fu_301_ap_start_reg;
    grp_fu_325_p3 <= bStream_q0(7 downto 7);
    icmp_ln1076_fu_431_p2 <= "1" when (unsigned(ret_fu_423_p3) < unsigned(state_ivlCurrRange_0_reg_149)) else "0";
    icmp_ln13_fu_350_p2 <= "1" when (ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4 = ap_const_lv8_0) else "0";
    init_offset_read_read_fu_108_p2 <= init_offset;
    mode_offset_read_read_fu_102_p2 <= mode_offset;
    or_ln1543_fu_407_p2 <= (val_reg_234 or shl_ln_fu_399_p3);
    retVal_10_fu_509_p1 <= retVal_9_fu_504_p2(1 - 1 downto 0);
    retVal_5_fu_333_p3 <= (bStream_q1 & grp_fu_325_p3);
    retVal_7_fu_533_p3 <= (ap_const_lv1_0 & zext_ln42_fu_529_p1);
    retVal_9_fu_504_p2 <= std_logic_vector(shift_right(unsigned(zext_ln14_reg_592),to_integer(unsigned('0' & sext_ln14_fu_500_p1(31-1 downto 0)))));
    ret_2_fu_450_p3 <= 
        ret_fu_423_p3 when (icmp_ln1076_fu_431_p2(0) = '1') else 
        sub_ln229_fu_437_p2;
    ret_fu_423_p3 <= (tmp_s_fu_413_p4 & or_ln1543_fu_407_p2);
        sext_ln14_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_495_p2),32));

    shl_ln_fu_399_p3 <= (trunc_ln1543_fu_395_p1 & ap_const_lv1_0);
    sub_ln229_fu_437_p2 <= std_logic_vector(unsigned(ret_fu_423_p3) - unsigned(state_ivlCurrRange_0_reg_149));
    tmp_s_fu_413_p4 <= state_ivlOffset_0_reg_193(30 downto 8);
    trunc_ln1543_fu_395_p1 <= state_ivlOffset_0_reg_193(8 - 1 downto 0);
    xor_ln76_fu_443_p2 <= (icmp_ln1076_fu_431_p2 xor ap_const_lv1_1);
    zext_ln11_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_10_fu_509_p1),9));
    zext_ln11_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(retVal_5_fu_333_p3),32));
    zext_ln13_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_state_bstate_n_bits_held_0_phi_fu_174_p4),9));
    zext_ln14_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_state_bstate_held_aligned_word_0_phi_fu_185_p4),32));
    zext_ln42_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_325_p3),8));
    zext_ln5_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_state_bstate_currIdx_0_phi_fu_163_p4),64));
end behav;
