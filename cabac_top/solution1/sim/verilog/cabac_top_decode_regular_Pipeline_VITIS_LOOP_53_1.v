// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read5,
        p_read4,
        write_flag2_0,
        p_read1,
        empty_41,
        empty,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        state_bstate_held_aligned_word_0_out,
        state_bstate_held_aligned_word_0_out_ap_vld,
        state_bstate_n_bits_held_0_out,
        state_bstate_n_bits_held_0_out_ap_vld,
        write_flag2_1_out,
        write_flag2_1_out_ap_vld,
        state_bstate_currIdx_0_out,
        state_bstate_currIdx_0_out_ap_vld,
        state_ivlOffset_1_out,
        state_ivlOffset_1_out_ap_vld,
        baeState_0_constprop,
        baeState_0_constprop_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read5;
input  [7:0] p_read4;
input  [0:0] write_flag2_0;
input  [31:0] p_read1;
input  [31:0] empty_41;
input  [31:0] empty;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [7:0] state_bstate_held_aligned_word_0_out;
output   state_bstate_held_aligned_word_0_out_ap_vld;
output  [7:0] state_bstate_n_bits_held_0_out;
output   state_bstate_n_bits_held_0_out_ap_vld;
output  [0:0] write_flag2_1_out;
output   write_flag2_1_out_ap_vld;
output  [31:0] state_bstate_currIdx_0_out;
output   state_bstate_currIdx_0_out_ap_vld;
output  [31:0] state_ivlOffset_1_out;
output   state_ivlOffset_1_out_ap_vld;
output  [31:0] baeState_0_constprop;
output   baeState_0_constprop_ap_vld;

reg ap_idle;
reg bStream_ce0;
reg state_bstate_held_aligned_word_0_out_ap_vld;
reg state_bstate_n_bits_held_0_out_ap_vld;
reg write_flag2_1_out_ap_vld;
reg state_bstate_currIdx_0_out_ap_vld;
reg state_ivlOffset_1_out_ap_vld;
reg baeState_0_constprop_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_fu_252_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] write_flag2_1_reg_192;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1072_reg_483;
reg   [0:0] icmp_ln1072_reg_483_pp0_iter2_reg;
reg   [7:0] state_bstate_n_bits_held_0_load_reg_487;
wire   [0:0] icmp_ln13_fu_273_p2;
reg   [0:0] icmp_ln13_reg_492;
wire   [8:0] zext_ln11_fu_349_p1;
wire   [8:0] retVal_fu_365_p3;
reg   [0:0] ap_phi_mux_write_flag2_1_phi_fu_197_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
wire   [8:0] ap_phi_reg_pp0_iter0_val_reg_205;
reg   [8:0] ap_phi_reg_pp0_iter1_val_reg_205;
reg   [8:0] ap_phi_reg_pp0_iter2_val_reg_205;
reg   [8:0] ap_phi_reg_pp0_iter3_val_reg_205;
wire   [63:0] zext_ln5_fu_293_p1;
wire   [31:0] shl_ln1026_fu_261_p2;
reg   [31:0] empty_53_fu_88;
reg   [31:0] ret_8_fu_92;
wire   [31:0] ret_fu_409_p3;
reg   [7:0] state_bstate_n_bits_held_0_fu_96;
wire   [7:0] add_ln16_fu_279_p2;
reg   [31:0] state_bstate_currIdx_0_fu_100;
wire   [31:0] add_ln6_fu_298_p2;
reg   [7:0] aligned_word_fu_104;
wire    ap_block_pp0_stage0_01001;
wire   [23:0] tmp_2_fu_242_p4;
wire   [8:0] zext_ln13_fu_322_p1;
wire   [8:0] add_ln14_fu_329_p2;
wire   [31:0] zext_ln23_fu_325_p1;
wire  signed [31:0] sext_ln14_fu_335_p1;
wire   [31:0] retVal_19_fu_339_p2;
wire   [0:0] retVal_20_fu_345_p1;
wire   [0:0] tmp_3_fu_353_p3;
wire   [7:0] zext_ln42_fu_361_p1;
wire   [7:0] trunc_ln1543_fu_381_p1;
wire   [8:0] shl_ln1_fu_385_p3;
wire   [22:0] tmp_s_fu_399_p4;
wire   [8:0] or_ln1543_fu_393_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_332;
reg    ap_condition_337;
reg    ap_condition_340;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            aligned_word_fu_104 <= p_read5;
        end else if ((1'b1 == ap_condition_332)) begin
            aligned_word_fu_104 <= bStream_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln13_reg_492 == 1'd0) & (icmp_ln1072_reg_483 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_val_reg_205 <= zext_ln11_fu_349_p1;
        end else if (((icmp_ln13_reg_492 == 1'd1) & (icmp_ln1072_reg_483 == 1'd1))) begin
            ap_phi_reg_pp0_iter3_val_reg_205 <= retVal_fu_365_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_val_reg_205 <= ap_phi_reg_pp0_iter2_val_reg_205;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_53_fu_88 <= empty;
        end else if (((icmp_ln1072_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_53_fu_88 <= shl_ln1026_fu_261_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            ret_8_fu_92 <= empty_41;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1072_reg_483_pp0_iter2_reg == 1'd1))) begin
            ret_8_fu_92 <= ret_fu_409_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_currIdx_0_fu_100 <= p_read1;
        end else if ((1'b1 == ap_condition_337)) begin
            state_bstate_currIdx_0_fu_100 <= add_ln6_fu_298_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_n_bits_held_0_fu_96 <= p_read4;
        end else if ((1'b1 == ap_condition_337)) begin
            state_bstate_n_bits_held_0_fu_96 <= 8'd7;
        end else if ((1'b1 == ap_condition_340)) begin
            state_bstate_n_bits_held_0_fu_96 <= add_ln16_fu_279_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1072_reg_483_pp0_iter2_reg == 1'd1))) begin
        write_flag2_1_reg_192 <= 1'd1;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        write_flag2_1_reg_192 <= write_flag2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln1072_reg_483 <= icmp_ln1072_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_reg_205 <= ap_phi_reg_pp0_iter0_val_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_val_reg_205 <= ap_phi_reg_pp0_iter1_val_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1072_reg_483_pp0_iter2_reg <= icmp_ln1072_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_492 <= icmp_ln13_fu_273_p2;
        state_bstate_n_bits_held_0_load_reg_487 <= state_bstate_n_bits_held_0_fu_96;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_252_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1072_reg_483_pp0_iter2_reg == 1'd1))) begin
        ap_phi_mux_write_flag2_1_phi_fu_197_p4 = 1'd1;
    end else begin
        ap_phi_mux_write_flag2_1_phi_fu_197_p4 = write_flag2_1_reg_192;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bStream_ce0 = 1'b1;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_252_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        baeState_0_constprop_ap_vld = 1'b1;
    end else begin
        baeState_0_constprop_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1072_reg_483 == 1'd0))) begin
        state_bstate_currIdx_0_out_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1072_reg_483 == 1'd0))) begin
        state_bstate_held_aligned_word_0_out_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1072_reg_483 == 1'd0))) begin
        state_bstate_n_bits_held_0_out_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1072_reg_483 == 1'd0))) begin
        state_ivlOffset_1_out_ap_vld = 1'b1;
    end else begin
        state_ivlOffset_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1072_reg_483 == 1'd0))) begin
        write_flag2_1_out_ap_vld = 1'b1;
    end else begin
        write_flag2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_329_p2 = ($signed(zext_ln13_fu_322_p1) + $signed(9'd511));

assign add_ln16_fu_279_p2 = ($signed(state_bstate_n_bits_held_0_fu_96) + $signed(8'd255));

assign add_ln6_fu_298_p2 = (state_bstate_currIdx_0_fu_100 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_332 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln13_reg_492 == 1'd1) & (icmp_ln1072_reg_483 == 1'd1));
end

always @ (*) begin
    ap_condition_337 = ((icmp_ln1072_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln13_fu_273_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_340 = ((icmp_ln1072_fu_252_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln13_fu_273_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_val_reg_205 = 'bx;

assign bStream_address0 = zext_ln5_fu_293_p1;

assign baeState_0_constprop = empty_53_fu_88 << 32'd1;

assign icmp_ln1072_fu_252_p2 = ((tmp_2_fu_242_p4 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_273_p2 = ((state_bstate_n_bits_held_0_fu_96 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln1543_fu_393_p2 = (shl_ln1_fu_385_p3 | ap_phi_reg_pp0_iter3_val_reg_205);

assign retVal_19_fu_339_p2 = zext_ln23_fu_325_p1 >> sext_ln14_fu_335_p1;

assign retVal_20_fu_345_p1 = retVal_19_fu_339_p2[0:0];

assign retVal_fu_365_p3 = {{1'd0}, {zext_ln42_fu_361_p1}};

assign ret_fu_409_p3 = {{tmp_s_fu_399_p4}, {or_ln1543_fu_393_p2}};

assign sext_ln14_fu_335_p1 = $signed(add_ln14_fu_329_p2);

assign shl_ln1026_fu_261_p2 = empty_53_fu_88 << 32'd1;

assign shl_ln1_fu_385_p3 = {{trunc_ln1543_fu_381_p1}, {1'd0}};

assign state_bstate_currIdx_0_out = state_bstate_currIdx_0_fu_100;

assign state_bstate_held_aligned_word_0_out = aligned_word_fu_104;

assign state_bstate_n_bits_held_0_out = state_bstate_n_bits_held_0_fu_96;

assign state_ivlOffset_1_out = ret_8_fu_92;

assign tmp_2_fu_242_p4 = {{empty_53_fu_88[31:8]}};

assign tmp_3_fu_353_p3 = bStream_q0[32'd7];

assign tmp_s_fu_399_p4 = {{ret_8_fu_92[30:8]}};

assign trunc_ln1543_fu_381_p1 = ret_8_fu_92[7:0];

assign write_flag2_1_out = ap_phi_mux_write_flag2_1_phi_fu_197_p4;

assign zext_ln11_fu_349_p1 = retVal_20_fu_345_p1;

assign zext_ln13_fu_322_p1 = state_bstate_n_bits_held_0_load_reg_487;

assign zext_ln23_fu_325_p1 = aligned_word_fu_104;

assign zext_ln42_fu_361_p1 = tmp_3_fu_353_p3;

assign zext_ln5_fu_293_p1 = state_bstate_currIdx_0_fu_100;

endmodule //cabac_top_decode_regular_Pipeline_VITIS_LOOP_53_1
