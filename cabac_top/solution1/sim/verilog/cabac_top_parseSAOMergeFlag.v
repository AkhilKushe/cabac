// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_parseSAOMergeFlag (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_1_read,
        p_read1,
        state_2_1_read,
        p_read3,
        state_2_2_read,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        baeState_0_constprop,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] state_1_read;
input  [31:0] p_read1;
input  [7:0] state_2_1_read;
input  [7:0] p_read3;
input  [7:0] state_2_2_read;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
input  [31:0] baeState_0_constprop;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bStream_ce0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] shl_ln_fu_139_p3;
reg   [8:0] shl_ln_reg_325;
wire   [0:0] icmp_ln13_fu_151_p2;
reg   [0:0] icmp_ln13_reg_330;
wire   [0:0] retVal_12_fu_177_p1;
reg   [0:0] retVal_12_reg_334;
wire   [8:0] zext_ln11_fu_186_p1;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln16_fu_189_p2;
wire   [31:0] add_ln6_fu_194_p2;
wire   [8:0] retVal_fu_211_p3;
reg   [22:0] tmp_s_reg_369;
reg   [7:0] state_bstate_n_bits_held_write_assign_reg_97;
reg   [7:0] phi_ln49_reg_108;
reg   [31:0] state_2_0_0_reg_117;
reg   [8:0] val_reg_126;
wire   [63:0] zext_ln5_fu_181_p1;
wire    ap_CS_fsm_state3;
wire   [7:0] trunc_ln1543_fu_135_p1;
wire   [8:0] zext_ln13_fu_147_p1;
wire   [8:0] add_ln14_fu_161_p2;
wire   [31:0] zext_ln14_fu_157_p1;
wire  signed [31:0] sext_ln14_fu_167_p1;
wire   [31:0] retVal_11_fu_171_p2;
wire   [0:0] tmp_fu_199_p3;
wire   [7:0] zext_ln42_fu_207_p1;
wire   [8:0] or_ln1543_fu_228_p2;
wire   [31:0] ret_fu_233_p3;
wire   [0:0] icmp_ln1076_fu_244_p2;
wire   [31:0] sub_ln229_fu_250_p2;
wire   [0:0] xor_ln44_fu_264_p2;
wire   [31:0] zext_ln95_fu_270_p1;
wire   [31:0] ret_6_fu_256_p3;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_0_preg <= state_2_0_0_reg_117;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
                        ap_return_1_preg[0] <= zext_ln95_fu_270_p1[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_2_preg <= ret_6_fu_256_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_3_preg <= state_bstate_n_bits_held_write_assign_reg_97;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_4_preg <= phi_ln49_reg_108;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln13_reg_330 == 1'd0)) begin
            phi_ln49_reg_108 <= p_read3;
        end else if ((icmp_ln13_reg_330 == 1'd1)) begin
            phi_ln49_reg_108 <= bStream_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln13_reg_330 == 1'd0)) begin
            state_2_0_0_reg_117 <= p_read1;
        end else if ((icmp_ln13_reg_330 == 1'd1)) begin
            state_2_0_0_reg_117 <= add_ln6_fu_194_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln13_reg_330 == 1'd0)) begin
            state_bstate_n_bits_held_write_assign_reg_97 <= add_ln16_fu_189_p2;
        end else if ((icmp_ln13_reg_330 == 1'd1)) begin
            state_bstate_n_bits_held_write_assign_reg_97 <= 8'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((icmp_ln13_reg_330 == 1'd0)) begin
                        val_reg_126[0] <= zext_ln11_fu_186_p1[0];
        end else if ((icmp_ln13_reg_330 == 1'd1)) begin
                        val_reg_126[0] <= retVal_fu_211_p3[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln13_reg_330 <= icmp_ln13_fu_151_p2;
        shl_ln_reg_325[8 : 1] <= shl_ln_fu_139_p3[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        retVal_12_reg_334 <= retVal_12_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_s_reg_369 <= {{state_1_read[30:8]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_0 = state_2_0_0_reg_117;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_1 = zext_ln95_fu_270_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_2 = ret_6_fu_256_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_3 = state_bstate_n_bits_held_write_assign_reg_97;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_4 = phi_ln49_reg_108;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bStream_ce0 = 1'b1;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_161_p2 = ($signed(zext_ln13_fu_147_p1) + $signed(9'd511));

assign add_ln16_fu_189_p2 = ($signed(state_2_1_read) + $signed(8'd255));

assign add_ln6_fu_194_p2 = (p_read1 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bStream_address0 = zext_ln5_fu_181_p1;

assign icmp_ln1076_fu_244_p2 = ((ret_fu_233_p3 < baeState_0_constprop) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_151_p2 = ((state_2_1_read == 8'd0) ? 1'b1 : 1'b0);

assign or_ln1543_fu_228_p2 = (val_reg_126 | shl_ln_reg_325);

assign retVal_11_fu_171_p2 = zext_ln14_fu_157_p1 >> sext_ln14_fu_167_p1;

assign retVal_12_fu_177_p1 = retVal_11_fu_171_p2[0:0];

assign retVal_fu_211_p3 = {{1'd0}, {zext_ln42_fu_207_p1}};

assign ret_6_fu_256_p3 = ((icmp_ln1076_fu_244_p2[0:0] == 1'b1) ? ret_fu_233_p3 : sub_ln229_fu_250_p2);

assign ret_fu_233_p3 = {{tmp_s_reg_369}, {or_ln1543_fu_228_p2}};

assign sext_ln14_fu_167_p1 = $signed(add_ln14_fu_161_p2);

assign shl_ln_fu_139_p3 = {{trunc_ln1543_fu_135_p1}, {1'd0}};

assign sub_ln229_fu_250_p2 = (ret_fu_233_p3 - baeState_0_constprop);

assign tmp_fu_199_p3 = bStream_q0[32'd7];

assign trunc_ln1543_fu_135_p1 = state_1_read[7:0];

assign xor_ln44_fu_264_p2 = (icmp_ln1076_fu_244_p2 ^ 1'd1);

assign zext_ln11_fu_186_p1 = retVal_12_reg_334;

assign zext_ln13_fu_147_p1 = state_2_1_read;

assign zext_ln14_fu_157_p1 = state_2_2_read;

assign zext_ln42_fu_207_p1 = tmp_fu_199_p3;

assign zext_ln5_fu_181_p1 = p_read1;

assign zext_ln95_fu_270_p1 = xor_ln44_fu_264_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_325[0] <= 1'b0;
    val_reg_126[8:1] <= 8'b00000000;
    ap_return_1_preg[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //cabac_top_parseSAOMergeFlag
