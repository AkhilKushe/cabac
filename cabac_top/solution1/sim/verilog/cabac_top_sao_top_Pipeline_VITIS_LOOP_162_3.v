// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cabac_top_sao_top_Pipeline_VITIS_LOOP_162_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_bstate_currIdx_5,
        state_bstate_n_bits_held_5,
        state_bstate_held_aligned_word_5,
        state_ivlOffset_5,
        zext_ln188,
        sao_offset_abs_address0,
        sao_offset_abs_ce0,
        sao_offset_abs_q0,
        sao_offset_sign_address0,
        sao_offset_sign_ce0,
        sao_offset_sign_we0,
        sao_offset_sign_d0,
        baeState_0_constprop_load,
        bStream_address0,
        bStream_ce0,
        bStream_q0,
        state_bstate_currIdx_8_out,
        state_bstate_currIdx_8_out_ap_vld,
        state_bstate_n_bits_held_8_out,
        state_bstate_n_bits_held_8_out_ap_vld,
        state_bstate_held_aligned_word_8_out,
        state_bstate_held_aligned_word_8_out_ap_vld,
        state_ivlOffset_6_out,
        state_ivlOffset_6_out_ap_vld,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] state_bstate_currIdx_5;
input  [7:0] state_bstate_n_bits_held_5;
input  [7:0] state_bstate_held_aligned_word_5;
input  [31:0] state_ivlOffset_5;
input  [3:0] zext_ln188;
output  [3:0] sao_offset_abs_address0;
output   sao_offset_abs_ce0;
input  [7:0] sao_offset_abs_q0;
output  [3:0] sao_offset_sign_address0;
output   sao_offset_sign_ce0;
output   sao_offset_sign_we0;
output  [0:0] sao_offset_sign_d0;
input  [31:0] baeState_0_constprop_load;
output  [2:0] bStream_address0;
output   bStream_ce0;
input  [7:0] bStream_q0;
output  [31:0] state_bstate_currIdx_8_out;
output   state_bstate_currIdx_8_out_ap_vld;
output  [7:0] state_bstate_n_bits_held_8_out;
output   state_bstate_n_bits_held_8_out_ap_vld;
output  [7:0] state_bstate_held_aligned_word_8_out;
output   state_bstate_held_aligned_word_8_out_ap_vld;
output  [31:0] state_ivlOffset_6_out;
output   state_ivlOffset_6_out_ap_vld;
output  [7:0] p_out;
output   p_out_ap_vld;
output  [7:0] p_out1;
output   p_out1_ap_vld;
output  [30:0] p_out2;
output   p_out2_ap_vld;

reg ap_idle;
reg sao_offset_abs_ce0;
reg sao_offset_sign_ce0;
reg sao_offset_sign_we0;
reg bStream_ce0;
reg state_bstate_currIdx_8_out_ap_vld;
reg state_bstate_n_bits_held_8_out_ap_vld;
reg state_bstate_held_aligned_word_8_out_ap_vld;
reg state_ivlOffset_6_out_ap_vld;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln162_fu_305_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln162_reg_630;
reg   [0:0] icmp_ln162_reg_630_pp0_iter1_reg;
reg   [0:0] icmp_ln162_reg_630_pp0_iter2_reg;
reg   [3:0] sao_offset_sign_addr_reg_639;
reg   [3:0] sao_offset_sign_addr_reg_639_pp0_iter1_reg;
reg   [3:0] sao_offset_sign_addr_reg_639_pp0_iter2_reg;
wire   [0:0] icmp_ln163_fu_338_p2;
reg   [0:0] icmp_ln163_reg_644;
reg   [0:0] icmp_ln163_reg_644_pp0_iter2_reg;
reg   [7:0] p_load15_reg_648;
wire   [0:0] icmp_ln13_fu_347_p2;
reg   [0:0] icmp_ln13_reg_653;
wire   [8:0] zext_ln11_fu_418_p1;
wire   [8:0] retVal_4_fu_434_p3;
wire   [8:0] ap_phi_reg_pp0_iter0_val_reg_253;
reg   [8:0] ap_phi_reg_pp0_iter1_val_reg_253;
reg   [8:0] ap_phi_reg_pp0_iter2_val_reg_253;
reg   [8:0] ap_phi_reg_pp0_iter3_val_reg_253;
wire   [63:0] zext_ln163_1_fu_327_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln5_fu_367_p1;
reg   [2:0] i_3_fu_98;
wire   [2:0] add_ln162_fu_311_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
reg   [7:0] aligned_word_fu_102;
reg   [7:0] aligned_word_4_fu_106;
reg   [31:0] state_bstate_currIdx_8_fu_110;
wire   [31:0] add_ln6_fu_372_p2;
reg   [31:0] ret_fu_114;
wire   [31:0] ret_5_fu_514_p3;
reg   [7:0] empty_fu_118;
wire   [7:0] add_ln16_fu_353_p2;
reg   [31:0] ret_4_fu_122;
reg   [7:0] state_bstate_n_bits_held_8_fu_126;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] zext_ln163_fu_317_p1;
wire   [3:0] add_ln163_fu_321_p2;
wire   [8:0] zext_ln13_fu_391_p1;
wire   [8:0] add_ln14_fu_398_p2;
wire   [31:0] zext_ln14_fu_394_p1;
wire  signed [31:0] sext_ln14_fu_404_p1;
wire   [31:0] retVal_fu_408_p2;
wire   [0:0] retVal_8_fu_414_p1;
wire   [0:0] tmp_fu_422_p3;
wire   [7:0] zext_ln42_fu_430_p1;
wire   [7:0] trunc_ln1543_fu_468_p1;
wire   [8:0] shl_ln1543_2_fu_472_p3;
wire   [22:0] tmp_s_fu_486_p4;
wire   [8:0] or_ln1543_fu_480_p2;
wire   [31:0] ret_2_fu_496_p3;
wire   [0:0] icmp_ln1076_fu_504_p2;
wire   [31:0] sub_ln229_fu_509_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_431;
reg    ap_condition_176;
reg    ap_condition_171;
reg    ap_condition_442;
reg    ap_condition_447;
reg    ap_condition_452;
reg    ap_condition_456;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cabac_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            aligned_word_4_fu_106 <= state_bstate_held_aligned_word_5;
        end else if ((1'b1 == ap_condition_431)) begin
            aligned_word_4_fu_106 <= bStream_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            aligned_word_fu_102 <= state_bstate_held_aligned_word_5;
        end else if ((1'b1 == ap_condition_431)) begin
            aligned_word_fu_102 <= bStream_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((1'b1 == ap_condition_171)) begin
            ap_phi_reg_pp0_iter3_val_reg_253 <= zext_ln11_fu_418_p1;
        end else if ((1'b1 == ap_condition_176)) begin
            ap_phi_reg_pp0_iter3_val_reg_253 <= retVal_4_fu_434_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_val_reg_253 <= ap_phi_reg_pp0_iter2_val_reg_253;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_118 <= state_bstate_n_bits_held_5;
        end else if ((1'b1 == ap_condition_447)) begin
            empty_fu_118 <= 8'd7;
        end else if ((1'b1 == ap_condition_442)) begin
            empty_fu_118 <= add_ln16_fu_353_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln162_fu_305_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_98 <= add_ln162_fu_311_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_98 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ret_4_fu_122 <= state_ivlOffset_5;
        end else if ((1'b1 == ap_condition_452)) begin
            ret_4_fu_122 <= ret_5_fu_514_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ret_fu_114 <= state_ivlOffset_5;
        end else if ((1'b1 == ap_condition_452)) begin
            ret_fu_114 <= ret_5_fu_514_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            state_bstate_currIdx_8_fu_110 <= state_bstate_currIdx_5;
        end else if ((1'b1 == ap_condition_447)) begin
            state_bstate_currIdx_8_fu_110 <= add_ln6_fu_372_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            state_bstate_n_bits_held_8_fu_126 <= state_bstate_n_bits_held_5;
        end else if ((1'b1 == ap_condition_456)) begin
            state_bstate_n_bits_held_8_fu_126 <= empty_fu_118;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln162_reg_630 <= icmp_ln162_fu_305_p2;
        icmp_ln162_reg_630_pp0_iter1_reg <= icmp_ln162_reg_630;
        sao_offset_sign_addr_reg_639_pp0_iter1_reg <= sao_offset_sign_addr_reg_639;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_val_reg_253 <= ap_phi_reg_pp0_iter0_val_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_val_reg_253 <= ap_phi_reg_pp0_iter1_val_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln163_fu_338_p2 == 1'd0) & (icmp_ln162_reg_630 == 1'd0))) begin
        icmp_ln13_reg_653 <= icmp_ln13_fu_347_p2;
        p_load15_reg_648 <= empty_fu_118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln162_reg_630_pp0_iter2_reg <= icmp_ln162_reg_630_pp0_iter1_reg;
        icmp_ln163_reg_644_pp0_iter2_reg <= icmp_ln163_reg_644;
        sao_offset_sign_addr_reg_639_pp0_iter2_reg <= sao_offset_sign_addr_reg_639_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln162_reg_630 == 1'd0))) begin
        icmp_ln163_reg_644 <= icmp_ln163_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_305_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sao_offset_sign_addr_reg_639 <= zext_ln163_1_fu_327_p1;
    end
end

always @ (*) begin
    if (((icmp_ln162_fu_305_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bStream_ce0 = 1'b1;
    end else begin
        bStream_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sao_offset_abs_ce0 = 1'b1;
    end else begin
        sao_offset_abs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sao_offset_sign_ce0 = 1'b1;
    end else begin
        sao_offset_sign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln163_reg_644_pp0_iter2_reg == 1'd0) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd0))) begin
        sao_offset_sign_we0 = 1'b1;
    end else begin
        sao_offset_sign_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        state_bstate_currIdx_8_out_ap_vld = 1'b1;
    end else begin
        state_bstate_currIdx_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        state_bstate_held_aligned_word_8_out_ap_vld = 1'b1;
    end else begin
        state_bstate_held_aligned_word_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        state_bstate_n_bits_held_8_out_ap_vld = 1'b1;
    end else begin
        state_bstate_n_bits_held_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd1))) begin
        state_ivlOffset_6_out_ap_vld = 1'b1;
    end else begin
        state_ivlOffset_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_398_p2 = ($signed(zext_ln13_fu_391_p1) + $signed(9'd511));

assign add_ln162_fu_311_p2 = (ap_sig_allocacmp_i + 3'd1);

assign add_ln163_fu_321_p2 = (zext_ln188 + zext_ln163_fu_317_p1);

assign add_ln16_fu_353_p2 = ($signed(empty_fu_118) + $signed(8'd255));

assign add_ln6_fu_372_p2 = (state_bstate_currIdx_8_fu_110 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_171 = ((icmp_ln13_reg_653 == 1'd0) & (icmp_ln163_reg_644 == 1'd0) & (icmp_ln162_reg_630_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_176 = ((icmp_ln13_reg_653 == 1'd1) & (icmp_ln163_reg_644 == 1'd0) & (icmp_ln162_reg_630_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_431 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln13_reg_653 == 1'd1) & (icmp_ln163_reg_644 == 1'd0) & (icmp_ln162_reg_630_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_442 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln13_fu_347_p2 == 1'd0) & (icmp_ln163_fu_338_p2 == 1'd0) & (icmp_ln162_reg_630 == 1'd0));
end

always @ (*) begin
    ap_condition_447 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln13_fu_347_p2 == 1'd1) & (icmp_ln163_fu_338_p2 == 1'd0) & (icmp_ln162_reg_630 == 1'd0));
end

always @ (*) begin
    ap_condition_452 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln163_reg_644_pp0_iter2_reg == 1'd0) & (icmp_ln162_reg_630_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_condition_456 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln163_reg_644 == 1'd0) & (icmp_ln162_reg_630_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_val_reg_253 = 'bx;

assign bStream_address0 = zext_ln5_fu_367_p1;

assign icmp_ln1076_fu_504_p2 = ((ret_2_fu_496_p3 < baeState_0_constprop_load) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_347_p2 = ((empty_fu_118 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_305_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_338_p2 = ((sao_offset_abs_q0 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln1543_fu_480_p2 = (shl_ln1543_2_fu_472_p3 | ap_phi_reg_pp0_iter3_val_reg_253);

assign p_out = aligned_word_fu_102;

assign p_out1 = empty_fu_118;

assign p_out2 = ret_fu_114[30:0];

assign retVal_4_fu_434_p3 = {{1'd0}, {zext_ln42_fu_430_p1}};

assign retVal_8_fu_414_p1 = retVal_fu_408_p2[0:0];

assign retVal_fu_408_p2 = zext_ln14_fu_394_p1 >> sext_ln14_fu_404_p1;

assign ret_2_fu_496_p3 = {{tmp_s_fu_486_p4}, {or_ln1543_fu_480_p2}};

assign ret_5_fu_514_p3 = ((icmp_ln1076_fu_504_p2[0:0] == 1'b1) ? ret_2_fu_496_p3 : sub_ln229_fu_509_p2);

assign sao_offset_abs_address0 = zext_ln163_1_fu_327_p1;

assign sao_offset_sign_address0 = sao_offset_sign_addr_reg_639_pp0_iter2_reg;

assign sao_offset_sign_d0 = (icmp_ln1076_fu_504_p2 ^ 1'd1);

assign sext_ln14_fu_404_p1 = $signed(add_ln14_fu_398_p2);

assign shl_ln1543_2_fu_472_p3 = {{trunc_ln1543_fu_468_p1}, {1'd0}};

assign state_bstate_currIdx_8_out = state_bstate_currIdx_8_fu_110;

assign state_bstate_held_aligned_word_8_out = aligned_word_4_fu_106;

assign state_bstate_n_bits_held_8_out = state_bstate_n_bits_held_8_fu_126;

assign state_ivlOffset_6_out = ret_4_fu_122;

assign sub_ln229_fu_509_p2 = (ret_2_fu_496_p3 - baeState_0_constprop_load);

assign tmp_fu_422_p3 = bStream_q0[32'd7];

assign tmp_s_fu_486_p4 = {{ret_fu_114[30:8]}};

assign trunc_ln1543_fu_468_p1 = ret_fu_114[7:0];

assign zext_ln11_fu_418_p1 = retVal_8_fu_414_p1;

assign zext_ln13_fu_391_p1 = p_load15_reg_648;

assign zext_ln14_fu_394_p1 = aligned_word_fu_102;

assign zext_ln163_1_fu_327_p1 = add_ln163_fu_321_p2;

assign zext_ln163_fu_317_p1 = ap_sig_allocacmp_i;

assign zext_ln42_fu_430_p1 = tmp_fu_422_p3;

assign zext_ln5_fu_367_p1 = state_bstate_currIdx_8_fu_110;

endmodule //cabac_top_sao_top_Pipeline_VITIS_LOOP_162_3
